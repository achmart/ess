   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"randombytes_dilbert.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.randombytes_dilbert_random_buf,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv4-sp-d16
  23              	randombytes_dilbert_random_buf:
  24              	.LFB0:
  25              		.file 1 "randombytes_dilbert.c"
   1:randombytes_dilbert.c **** /* Copyright 2017 Florian Wilde
   2:randombytes_dilbert.c ****  *
   3:randombytes_dilbert.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   4:randombytes_dilbert.c ****  * of this software and associated documentation files (the "Software"), to
   5:randombytes_dilbert.c ****  * deal in the Software without restriction, including without limitation the
   6:randombytes_dilbert.c ****  * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   7:randombytes_dilbert.c ****  * sell copies of the Software, and to permit persons to whom the Software is
   8:randombytes_dilbert.c ****  * furnished to do so, subject to the following conditions:
   9:randombytes_dilbert.c ****  *
  10:randombytes_dilbert.c ****  * The above copyright notice and this permission notice shall be included in
  11:randombytes_dilbert.c ****  * all copies or substantial portions of the Software.
  12:randombytes_dilbert.c ****  *
  13:randombytes_dilbert.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  14:randombytes_dilbert.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  15:randombytes_dilbert.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  16:randombytes_dilbert.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  17:randombytes_dilbert.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  18:randombytes_dilbert.c ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  19:randombytes_dilbert.c ****  * IN THE SOFTWARE.
  20:randombytes_dilbert.c ****  */
  21:randombytes_dilbert.c **** 
  22:randombytes_dilbert.c **** #include <stdlib.h>
  23:randombytes_dilbert.c **** #include <sys/types.h>
  24:randombytes_dilbert.c **** #include <string.h>
  25:randombytes_dilbert.c **** 
  26:randombytes_dilbert.c **** #include <sodium/randombytes.h>
  27:randombytes_dilbert.c **** #include "randombytes_dilbert.h"
  28:randombytes_dilbert.c **** #include <sodium/utils.h>
  29:randombytes_dilbert.c **** 
  30:randombytes_dilbert.c **** #ifndef SSIZE_MAX
  31:randombytes_dilbert.c **** # define SSIZE_MAX (SIZE_MAX / 2 - 1)
  32:randombytes_dilbert.c **** #endif
  33:randombytes_dilbert.c **** 
  34:randombytes_dilbert.c **** static void
  35:randombytes_dilbert.c **** randombytes_dilbert_random_buf(void * const buf, const size_t size)
  36:randombytes_dilbert.c **** {
  26              		.loc 1 36 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  42 0008 3960     		str	r1, [r7]
  37:randombytes_dilbert.c ****   memset(buf, 9, size);
  43              		.loc 1 37 0
  44 000a 3A68     		ldr	r2, [r7]
  45 000c 0921     		movs	r1, #9
  46 000e 7868     		ldr	r0, [r7, #4]
  47 0010 FFF7FEFF 		bl	memset
  38:randombytes_dilbert.c **** }
  48              		.loc 1 38 0
  49 0014 00BF     		nop
  50 0016 0837     		adds	r7, r7, #8
  51              	.LCFI3:
  52              		.cfi_def_cfa_offset 8
  53 0018 BD46     		mov	sp, r7
  54              	.LCFI4:
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 001a 80BD     		pop	{r7, pc}
  58              		.cfi_endproc
  59              	.LFE0:
  61              		.section	.text.randombytes_dilbert_random,"ax",%progbits
  62              		.align	1
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	randombytes_dilbert_random:
  69              	.LFB1:
  39:randombytes_dilbert.c **** 
  40:randombytes_dilbert.c **** static uint32_t
  41:randombytes_dilbert.c **** randombytes_dilbert_random(void)
  42:randombytes_dilbert.c **** {
  70              		.loc 1 42 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 1, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75 0000 80B4     		push	{r7}
  76              	.LCFI5:
  77              		.cfi_def_cfa_offset 4
  78              		.cfi_offset 7, -4
  79 0002 00AF     		add	r7, sp, #0
  80              	.LCFI6:
  81              		.cfi_def_cfa_register 7
  43:randombytes_dilbert.c ****   /* From http://dilbert.com/strip/2001-10-25 we know that 9 is a very random 
  44:randombytes_dilbert.c ****    * number. This implementation is only for testing,
  45:randombytes_dilbert.c ****    * ! DO NOT USE IN REAL-WORLD APPLICATIONS ! */
  46:randombytes_dilbert.c ****   return 9;
  82              		.loc 1 46 0
  83 0004 0923     		movs	r3, #9
  47:randombytes_dilbert.c **** }
  84              		.loc 1 47 0
  85 0006 1846     		mov	r0, r3
  86 0008 BD46     		mov	sp, r7
  87              	.LCFI7:
  88              		.cfi_def_cfa_register 13
  89              		@ sp needed
  90 000a 5DF8047B 		ldr	r7, [sp], #4
  91              	.LCFI8:
  92              		.cfi_restore 7
  93              		.cfi_def_cfa_offset 0
  94 000e 7047     		bx	lr
  95              		.cfi_endproc
  96              	.LFE1:
  98              		.section	.rodata
  99              		.align	2
 100              	.LC0:
 101 0000 44696C62 		.ascii	"Dilbert\000"
 101      65727400 
 102              		.section	.text.randombytes_dilbert_implementation_name,"ax",%progbits
 103              		.align	1
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 107              		.fpu fpv4-sp-d16
 109              	randombytes_dilbert_implementation_name:
 110              	.LFB2:
  48:randombytes_dilbert.c **** 
  49:randombytes_dilbert.c **** static const char *
  50:randombytes_dilbert.c **** randombytes_dilbert_implementation_name(void)
  51:randombytes_dilbert.c **** {
 111              		.loc 1 51 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 1, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116 0000 80B4     		push	{r7}
 117              	.LCFI9:
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 7, -4
 120 0002 00AF     		add	r7, sp, #0
 121              	.LCFI10:
 122              		.cfi_def_cfa_register 7
  52:randombytes_dilbert.c ****     return "Dilbert";
 123              		.loc 1 52 0
 124 0004 024B     		ldr	r3, .L6
  53:randombytes_dilbert.c **** }
 125              		.loc 1 53 0
 126 0006 1846     		mov	r0, r3
 127 0008 BD46     		mov	sp, r7
 128              	.LCFI11:
 129              		.cfi_def_cfa_register 13
 130              		@ sp needed
 131 000a 5DF8047B 		ldr	r7, [sp], #4
 132              	.LCFI12:
 133              		.cfi_restore 7
 134              		.cfi_def_cfa_offset 0
 135 000e 7047     		bx	lr
 136              	.L7:
 137              		.align	2
 138              	.L6:
 139 0010 00000000 		.word	.LC0
 140              		.cfi_endproc
 141              	.LFE2:
 143              		.global	randombytes_dilbert_implementation
 144              		.data
 145              		.align	2
 148              	randombytes_dilbert_implementation:
 149 0000 00000000 		.word	randombytes_dilbert_implementation_name
 150 0004 00000000 		.word	randombytes_dilbert_random
 151 0008 00000000 		.word	0
 152 000c 00000000 		.word	0
 153 0010 00000000 		.word	randombytes_dilbert_random_buf
 154 0014 00000000 		.word	0
 155              		.text
 156              	.Letext0:
 157              		.file 2 "/usr/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 158              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 159              		.file 4 "/usr/arm-none-eabi/include/sys/lock.h"
 160              		.file 5 "/usr/arm-none-eabi/include/sys/_types.h"
 161              		.file 6 "/usr/arm-none-eabi/include/sys/reent.h"
 162              		.file 7 "/usr/arm-none-eabi/include/stdlib.h"
 163              		.file 8 "/usr/arm-none-eabi/include/sys/_stdint.h"
 164              		.file 9 "/home/martin/Programming/ess/sodium/sodium-1.0.15/include/sodium/randombytes.h"
 165              		.file 10 "randombytes_dilbert.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 randombytes_dilbert.c
     /tmp/ccNQsNpG.s:17     .text.randombytes_dilbert_random_buf:0000000000000000 $t
     /tmp/ccNQsNpG.s:23     .text.randombytes_dilbert_random_buf:0000000000000000 randombytes_dilbert_random_buf
     /tmp/ccNQsNpG.s:62     .text.randombytes_dilbert_random:0000000000000000 $t
     /tmp/ccNQsNpG.s:68     .text.randombytes_dilbert_random:0000000000000000 randombytes_dilbert_random
     /tmp/ccNQsNpG.s:99     .rodata:0000000000000000 $d
     /tmp/ccNQsNpG.s:103    .text.randombytes_dilbert_implementation_name:0000000000000000 $t
     /tmp/ccNQsNpG.s:109    .text.randombytes_dilbert_implementation_name:0000000000000000 randombytes_dilbert_implementation_name
     /tmp/ccNQsNpG.s:139    .text.randombytes_dilbert_implementation_name:0000000000000010 $d
     /tmp/ccNQsNpG.s:148    .data:0000000000000000 randombytes_dilbert_implementation
     /tmp/ccNQsNpG.s:145    .data:0000000000000000 $d
                           .group:0000000000000000 wm4.0.c52906f746dd90abef2694639d8411ad
                           .group:0000000000000000 wm4.ieeefp.h.77.49bcce8a603f3d93a95080d6a3573782
                           .group:0000000000000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:0000000000000000 wm4.newlib.h.21.64e14ed41172bf448383d50cbb14725e
                           .group:0000000000000000 wm4.features.h.22.692cd1f2e947ca7b8fea300222f5f1f2
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.7120b8bb2e0149e2359704f4e2251b68
                           .group:0000000000000000 wm4.reent.h.17.87376802c2b370b32a762f0a30482d9e
                           .group:0000000000000000 wm4.cdefs.h.47.b99d69adf76e00132150c6ca209cbd8f
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.export.h.3.069642e50a739d7e8bd572e0f5b91055
                           .group:0000000000000000 wm4.randombytes.h.28.d92c4e5a57bf52557a9782c27b663a62
                           .group:0000000000000000 wm4.utils.h.17.31ca9da2b3c3d17cb1ce98c0f528b530

UNDEFINED SYMBOLS
memset

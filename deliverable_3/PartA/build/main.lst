
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c124  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800c124  0c00c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  3 .ram_code     00000000  10000800  10000800  00020a98  2**0
                  CONTENTS
  4 PSRAM_DATA    00000000  10000800  10000800  00020a98  2**0
                  CONTENTS
  5 PSRAM_BSS     00000000  10000800  10000800  00020a98  2**0
                  CONTENTS
  6 .data         00000a7c  20000000  0c00c12c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          00000010  20000a7c  0c00cba8  00020a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .got.plt      0000000c  20000a8c  0c00cbb8  00020a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000a98  0c00cbc4  00020a98  2**2
                  ALLOC
 10 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
 11 DSRAM2_DATA   00000000  30000000  30000000  00020a98  2**0
                  CONTENTS
 12 DSRAM2_BSS    00000e00  30000000  0c00cbc4  00030000  2**2
                  ALLOC
 13 .stab         000000e4  00000000  00000000  00020a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000001ed  00000000  00000000  00020b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000df0  00000000  00000000  00020d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   0002b97c  00000000  00000000  00021b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000511c  00000000  00000000  0004d4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000dde1  00000000  00000000  000525f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  000042dc  00000000  00000000  000603dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000886bb  00000000  00000000  000646b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000bbe7  00000000  00000000  000ecd73  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000e78  00000000  00000000  000f895a  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .build_attributes 00001239  00000000  00000000  000f97d2  2**0
                  CONTENTS, READONLY
 24 .debug_macro  00020e6c  00000000  00000000  000faa0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	29 09 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     )...............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00c12c 	.word	0x0c00c12c
 800024c:	20000000 	.word	0x20000000
 8000250:	00000a7c 	.word	0x00000a7c
 8000254:	0c00cbc4 	.word	0x0c00cbc4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00c12c 	.word	0x0c00c12c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00c12c 	.word	0x0c00c12c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000a98 	.word	0x20000a98
 800027c:	00000788 	.word	0x00000788
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	0800639d 	.word	0x0800639d
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080085c1 	.word	0x080085c1
    ldr  r0, =main
 80002ac:	080002e9 	.word	0x080002e9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemCoreClockSetup>:
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
};

void SystemCoreClockSetup(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    /* Setup settings for USB clock */
    XMC_SCU_CLOCK_Init(&clock_config);
 80002b8:	480a      	ldr	r0, [pc, #40]	; (80002e4 <SystemCoreClockSetup+0x30>)
 80002ba:	f004 fb27 	bl	800490c <XMC_SCU_CLOCK_Init>

    XMC_SCU_CLOCK_EnableUsbPll();
 80002be:	f004 ffeb 	bl	8005298 <XMC_SCU_CLOCK_EnableUsbPll>
    XMC_SCU_CLOCK_StartUsbPll(2, 64);
 80002c2:	2140      	movs	r1, #64	; 0x40
 80002c4:	2002      	movs	r0, #2
 80002c6:	f005 f80b 	bl	80052e0 <XMC_SCU_CLOCK_StartUsbPll>
    XMC_SCU_CLOCK_SetUsbClockDivider(4);
 80002ca:	2004      	movs	r0, #4
 80002cc:	f004 ff22 	bl	8005114 <XMC_SCU_CLOCK_SetUsbClockDivider>
    XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f004 fe27 	bl	8004f24 <XMC_SCU_CLOCK_SetUsbClockSource>
    XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f004 ff76 	bl	80051c8 <XMC_SCU_CLOCK_EnableClock>

    SystemCoreClockUpdate();
 80002dc:	f006 f9ac 	bl	8006638 <SystemCoreClockUpdate>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	0800bc30 	.word	0x0800bc30

080002e8 <main>:

int main(void){
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b093      	sub	sp, #76	; 0x4c
 80002ec:	af02      	add	r7, sp, #8
    
    uint16_t total_received_bytes = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint16_t received_bytes = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t length_decoded_text = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t length_encoded_text = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    unsigned char received_char = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    // Max Size of received Data:
    // 3 Control + 36 Header + 43692 Text = 43731
    char *buffer = (char *)calloc(MAX_MESSAGE_SIZE + crypto_secretbox_MACBYTES, sizeof(char));
 8000304:	2101      	movs	r1, #1
 8000306:	f64a 3028 	movw	r0, #43816	; 0xab28
 800030a:	f008 f8f3 	bl	80084f4 <calloc>
 800030e:	4603      	mov	r3, r0
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
    enum myread_state {IDLE, READ_START, READ_HEADER, READ_TEXT};
    enum myread_state read_state = READ_START;
 8000312:	2301      	movs	r3, #1
 8000314:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    USB_Init();
 8000318:	f000 fb10 	bl	800093c <USB_Init>
    // Replace RNG
    randombytes_set_implementation(&randombytes_dilbert_implementation);
 800031c:	489c      	ldr	r0, [pc, #624]	; (8000590 <main+0x2a8>)
 800031e:	f006 fbf7 	bl	8006b10 <randombytes_set_implementation>
    if(sodium_init() == -1)
 8000322:	f006 fcaf 	bl	8006c84 <sodium_init>
 8000326:	4603      	mov	r3, r0
 8000328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800032c:	d102      	bne.n	8000334 <main+0x4c>
        return -1;
 800032e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000332:	e246      	b.n	80007c2 <main+0x4da>

    while (1) {
        
        // Read Bytes from Serial as long as possible, normally you get only one
        received_bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 8000334:	4897      	ldr	r0, [pc, #604]	; (8000594 <main+0x2ac>)
 8000336:	f003 fbab 	bl	8003a90 <CDC_Device_BytesReceived>
 800033a:	4603      	mov	r3, r0
 800033c:	863b      	strh	r3, [r7, #48]	; 0x30
        for (uint16_t i = 0; i < received_bytes; i++) {
 800033e:	2300      	movs	r3, #0
 8000340:	877b      	strh	r3, [r7, #58]	; 0x3a
 8000342:	e0d5      	b.n	80004f0 <main+0x208>
            received_char = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 8000344:	4893      	ldr	r0, [pc, #588]	; (8000594 <main+0x2ac>)
 8000346:	f003 fc1d 	bl	8003b84 <CDC_Device_ReceiveByte>
 800034a:	4603      	mov	r3, r0
 800034c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            switch (read_state) {
 8000350:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000354:	2b03      	cmp	r3, #3
 8000356:	f200 80c8 	bhi.w	80004ea <main+0x202>
 800035a:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <main+0x78>)
 800035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000360:	080004eb 	.word	0x080004eb
 8000364:	08000371 	.word	0x08000371
 8000368:	08000395 	.word	0x08000395
 800036c:	0800043f 	.word	0x0800043f
                // Read until first 0x01 arrives
                case READ_START:
                    if(received_char == 0x01) {
 8000370:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000374:	2b01      	cmp	r3, #1
 8000376:	f040 80b7 	bne.w	80004e8 <main+0x200>
                        buffer[total_received_bytes] = received_char;
 800037a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800037c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800037e:	4413      	add	r3, r2
 8000380:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000384:	701a      	strb	r2, [r3, #0]
                        total_received_bytes++;
 8000386:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000388:	3301      	adds	r3, #1
 800038a:	87fb      	strh	r3, [r7, #62]	; 0x3e
                        read_state = READ_HEADER;
 800038c:	2302      	movs	r3, #2
 800038e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                    }
                    break;
 8000392:	e0a9      	b.n	80004e8 <main+0x200>
                // Read header until 0x02 arrives
                case READ_HEADER:
                    if((received_char >= 'A' && received_char <= 'Z') || (received_char >= 'a' && received_char <= 'z')
 8000394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000398:	2b40      	cmp	r3, #64	; 0x40
 800039a:	d903      	bls.n	80003a4 <main+0xbc>
 800039c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003a0:	2b5a      	cmp	r3, #90	; 0x5a
 80003a2:	d91b      	bls.n	80003dc <main+0xf4>
 80003a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003a8:	2b60      	cmp	r3, #96	; 0x60
 80003aa:	d903      	bls.n	80003b4 <main+0xcc>
 80003ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003b0:	2b7a      	cmp	r3, #122	; 0x7a
 80003b2:	d913      	bls.n	80003dc <main+0xf4>
                        || (received_char >= '0' && received_char <= '9') || received_char == '-' || received_char == '_'
 80003b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003b8:	2b2f      	cmp	r3, #47	; 0x2f
 80003ba:	d903      	bls.n	80003c4 <main+0xdc>
 80003bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003c0:	2b39      	cmp	r3, #57	; 0x39
 80003c2:	d90b      	bls.n	80003dc <main+0xf4>
 80003c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003c8:	2b2d      	cmp	r3, #45	; 0x2d
 80003ca:	d007      	beq.n	80003dc <main+0xf4>
 80003cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003d0:	2b5f      	cmp	r3, #95	; 0x5f
 80003d2:	d003      	beq.n	80003dc <main+0xf4>
                        || received_char == '=') {
 80003d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003d8:	2b3d      	cmp	r3, #61	; 0x3d
 80003da:	d109      	bne.n	80003f0 <main+0x108>
                            buffer[total_received_bytes] = received_char;
 80003dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80003de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003e0:	4413      	add	r3, r2
 80003e2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80003e6:	701a      	strb	r2, [r3, #0]
                            total_received_bytes++;
 80003e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80003ea:	3301      	adds	r3, #1
 80003ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
                        } else {
                            // TODO only until 36 bytes arrived
                            read_state = READ_START;
                            total_received_bytes = 0;
                        }
                        break;
 80003ee:	e07c      	b.n	80004ea <main+0x202>
                        } else if(received_char == 0x02) {
 80003f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d10c      	bne.n	8000412 <main+0x12a>
                            buffer[total_received_bytes] = received_char;
 80003f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80003fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003fc:	4413      	add	r3, r2
 80003fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000402:	701a      	strb	r2, [r3, #0]
                            total_received_bytes++;
 8000404:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000406:	3301      	adds	r3, #1
 8000408:	87fb      	strh	r3, [r7, #62]	; 0x3e
                            read_state = READ_TEXT;
 800040a:	2303      	movs	r3, #3
 800040c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                        break;
 8000410:	e06b      	b.n	80004ea <main+0x202>
                        } else if(received_char == 0x01) {
 8000412:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000416:	2b01      	cmp	r3, #1
 8000418:	d10b      	bne.n	8000432 <main+0x14a>
                            total_received_bytes = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	87fb      	strh	r3, [r7, #62]	; 0x3e
                            buffer[total_received_bytes] = received_char;
 800041e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000422:	4413      	add	r3, r2
 8000424:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000428:	701a      	strb	r2, [r3, #0]
                            total_received_bytes++;
 800042a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800042c:	3301      	adds	r3, #1
 800042e:	87fb      	strh	r3, [r7, #62]	; 0x3e
                        break;
 8000430:	e05b      	b.n	80004ea <main+0x202>
                            read_state = READ_START;
 8000432:	2301      	movs	r3, #1
 8000434:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                            total_received_bytes = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	87fb      	strh	r3, [r7, #62]	; 0x3e
                        break;
 800043c:	e055      	b.n	80004ea <main+0x202>
                // Read text until 0x03 arrives
                // TODO check for buffer overflow
                case READ_TEXT:
                    if((received_char >= 'A' && received_char <= 'Z') || (received_char >= 'a' && received_char <= 'z')
 800043e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000442:	2b40      	cmp	r3, #64	; 0x40
 8000444:	d903      	bls.n	800044e <main+0x166>
 8000446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800044a:	2b5a      	cmp	r3, #90	; 0x5a
 800044c:	d91b      	bls.n	8000486 <main+0x19e>
 800044e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000452:	2b60      	cmp	r3, #96	; 0x60
 8000454:	d903      	bls.n	800045e <main+0x176>
 8000456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800045a:	2b7a      	cmp	r3, #122	; 0x7a
 800045c:	d913      	bls.n	8000486 <main+0x19e>
                        || (received_char >= '0' && received_char <= '9') || received_char == '-' || received_char == '_'
 800045e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000462:	2b2f      	cmp	r3, #47	; 0x2f
 8000464:	d903      	bls.n	800046e <main+0x186>
 8000466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800046a:	2b39      	cmp	r3, #57	; 0x39
 800046c:	d90b      	bls.n	8000486 <main+0x19e>
 800046e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000472:	2b2d      	cmp	r3, #45	; 0x2d
 8000474:	d007      	beq.n	8000486 <main+0x19e>
 8000476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800047a:	2b5f      	cmp	r3, #95	; 0x5f
 800047c:	d003      	beq.n	8000486 <main+0x19e>
                        || received_char == '=') {
 800047e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000482:	2b3d      	cmp	r3, #61	; 0x3d
 8000484:	d109      	bne.n	800049a <main+0x1b2>
                            buffer[total_received_bytes] = received_char;
 8000486:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800048a:	4413      	add	r3, r2
 800048c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000490:	701a      	strb	r2, [r3, #0]
                            total_received_bytes++;
 8000492:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000494:	3301      	adds	r3, #1
 8000496:	87fb      	strh	r3, [r7, #62]	; 0x3e
                            read_state= READ_HEADER;
                        } else {
                            read_state = READ_START;
                            total_received_bytes = 0;
                        }
                        break;
 8000498:	e027      	b.n	80004ea <main+0x202>
                        } else if(received_char == 0x03) {
 800049a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d109      	bne.n	80004b6 <main+0x1ce>
                            buffer[total_received_bytes] = received_char;
 80004a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80004a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a6:	4413      	add	r3, r2
 80004a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80004ac:	701a      	strb	r2, [r3, #0]
                            read_state = IDLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                        break;
 80004b4:	e019      	b.n	80004ea <main+0x202>
                        } else if(received_char == 0x01) {
 80004b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d10e      	bne.n	80004dc <main+0x1f4>
                            total_received_bytes = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
                            buffer[total_received_bytes] = received_char;
 80004c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80004c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004c6:	4413      	add	r3, r2
 80004c8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80004cc:	701a      	strb	r2, [r3, #0]
                            total_received_bytes++;
 80004ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80004d0:	3301      	adds	r3, #1
 80004d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
                            read_state= READ_HEADER;
 80004d4:	2302      	movs	r3, #2
 80004d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                        break;
 80004da:	e006      	b.n	80004ea <main+0x202>
                            read_state = READ_START;
 80004dc:	2301      	movs	r3, #1
 80004de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                            total_received_bytes = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
                        break;
 80004e6:	e000      	b.n	80004ea <main+0x202>
                    break;
 80004e8:	bf00      	nop
        for (uint16_t i = 0; i < received_bytes; i++) {
 80004ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80004ec:	3301      	adds	r3, #1
 80004ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 80004f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80004f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80004f4:	429a      	cmp	r2, r3
 80004f6:	f4ff af25 	bcc.w	8000344 <main+0x5c>
                        break;
            }
        }

        // Complete Message arrived
        if(read_state == IDLE) {
 80004fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80004fe:	2b00      	cmp	r3, #0
 8000500:	f040 815b 	bne.w	80007ba <main+0x4d2>
            
            // Decoded length of plaintext = 24 bits = 3 Bytes
            // reserve extra byte as zero to stop decoding routine
            char *encoded_length = (char *)calloc(5, sizeof(char));
 8000504:	2101      	movs	r1, #1
 8000506:	2005      	movs	r0, #5
 8000508:	f007 fff4 	bl	80084f4 <calloc>
 800050c:	4603      	mov	r3, r0
 800050e:	623b      	str	r3, [r7, #32]
            memcpy(encoded_length, &buffer[1], 4);
 8000510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000512:	3301      	adds	r3, #1
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	601a      	str	r2, [r3, #0]
            char* decoded_length = (char *)calloc(3, sizeof(char));
 800051c:	2101      	movs	r1, #1
 800051e:	2003      	movs	r0, #3
 8000520:	f007 ffe8 	bl	80084f4 <calloc>
 8000524:	4603      	mov	r3, r0
 8000526:	61fb      	str	r3, [r7, #28]
            Base64decode(decoded_length, encoded_length);
 8000528:	6a39      	ldr	r1, [r7, #32]
 800052a:	69f8      	ldr	r0, [r7, #28]
 800052c:	f000 fb12 	bl	8000b54 <Base64decode>

            // Only proceed if transmitted length is right
            length_encoded_text = *((uint16_t *)decoded_length);
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	85bb      	strh	r3, [r7, #44]	; 0x2c
            //length_decoded_text = 3*length_encoded_text/4;
            if((total_received_bytes - HEADER_SIZE) == length_encoded_text) {
 8000536:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000538:	f1a3 0226 	sub.w	r2, r3, #38	; 0x26
 800053c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800053e:	429a      	cmp	r2, r3
 8000540:	f040 8130 	bne.w	80007a4 <main+0x4bc>

                // Decode nonce = 192 bits = 24 Byte
                // reserve extra byte as zero to stop decoding routine
                char *encoded_nonce = (char *)calloc(33, sizeof(char));
 8000544:	2101      	movs	r1, #1
 8000546:	2021      	movs	r0, #33	; 0x21
 8000548:	f007 ffd4 	bl	80084f4 <calloc>
 800054c:	4603      	mov	r3, r0
 800054e:	61bb      	str	r3, [r7, #24]
                memcpy(encoded_nonce, &buffer[5], 32);
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	3305      	adds	r3, #5
 8000554:	2220      	movs	r2, #32
 8000556:	4619      	mov	r1, r3
 8000558:	69b8      	ldr	r0, [r7, #24]
 800055a:	f008 fb09 	bl	8008b70 <memcpy>
                char *decoded_nonce = (char *)calloc(24, sizeof(char));
 800055e:	2101      	movs	r1, #1
 8000560:	2018      	movs	r0, #24
 8000562:	f007 ffc7 	bl	80084f4 <calloc>
 8000566:	4603      	mov	r3, r0
 8000568:	617b      	str	r3, [r7, #20]
                Base64decode(decoded_nonce, encoded_nonce);
 800056a:	69b9      	ldr	r1, [r7, #24]
 800056c:	6978      	ldr	r0, [r7, #20]
 800056e:	f000 faf1 	bl	8000b54 <Base64decode>

                // Decode Text in place
                // Stops when it reaches byte 0x03
                length_decoded_text = Base64decode(&buffer[HEADER_SIZE], &buffer[HEADER_SIZE]);
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	3326      	adds	r3, #38	; 0x26
 800057c:	4619      	mov	r1, r3
 800057e:	4610      	mov	r0, r2
 8000580:	f000 fae8 	bl	8000b54 <Base64decode>
 8000584:	4603      	mov	r3, r0
 8000586:	85fb      	strh	r3, [r7, #46]	; 0x2e

                // Set all remaining bytes to zero
                for (uint16_t i = HEADER_SIZE + length_decoded_text; i < MAX_MESSAGE_SIZE + crypto_secretbox_MACBYTES; i++ ) {
 8000588:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800058a:	3326      	adds	r3, #38	; 0x26
 800058c:	873b      	strh	r3, [r7, #56]	; 0x38
 800058e:	e00b      	b.n	80005a8 <main+0x2c0>
 8000590:	20000054 	.word	0x20000054
 8000594:	20000024 	.word	0x20000024
                    buffer[i] = 0;
 8000598:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800059a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800059c:	4413      	add	r3, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
                for (uint16_t i = HEADER_SIZE + length_decoded_text; i < MAX_MESSAGE_SIZE + crypto_secretbox_MACBYTES; i++ ) {
 80005a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005a4:	3301      	adds	r3, #1
 80005a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80005a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005aa:	f64a 3227 	movw	r2, #43815	; 0xab27
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d9f2      	bls.n	8000598 <main+0x2b0>
                }
                // Encrpyt Text
                // Create key
                
                unsigned char *key = (unsigned char*)calloc(32, sizeof(char));
 80005b2:	2101      	movs	r1, #1
 80005b4:	2020      	movs	r0, #32
 80005b6:	f007 ff9d 	bl	80084f4 <calloc>
 80005ba:	4603      	mov	r3, r0
 80005bc:	613b      	str	r3, [r7, #16]
                memcpy(key, g_chipid, 16);
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	4a82      	ldr	r2, [pc, #520]	; (80007cc <main+0x4e4>)
 80005c2:	6814      	ldr	r4, [r2, #0]
 80005c4:	6850      	ldr	r0, [r2, #4]
 80005c6:	6891      	ldr	r1, [r2, #8]
 80005c8:	68d2      	ldr	r2, [r2, #12]
 80005ca:	601c      	str	r4, [r3, #0]
 80005cc:	6058      	str	r0, [r3, #4]
 80005ce:	6099      	str	r1, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
                memcpy(key+16, g_chipid, 16);
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	3310      	adds	r3, #16
 80005d6:	4a7d      	ldr	r2, [pc, #500]	; (80007cc <main+0x4e4>)
 80005d8:	6814      	ldr	r4, [r2, #0]
 80005da:	6850      	ldr	r0, [r2, #4]
 80005dc:	6891      	ldr	r1, [r2, #8]
 80005de:	68d2      	ldr	r2, [r2, #12]
 80005e0:	601c      	str	r4, [r3, #0]
 80005e2:	6058      	str	r0, [r3, #4]
 80005e4:	6099      	str	r1, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
                
                
                uint16_t length_decoded_cipher = length_decoded_text + crypto_secretbox_MACBYTES;
 80005e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80005ea:	3310      	adds	r3, #16
 80005ec:	81fb      	strh	r3, [r7, #14]

                //unsigned char *encrypted = (unsigned char*)calloc(length_decoded_cipher, sizeof(char));

                crypto_secretbox_easy((unsigned char*)&buffer[HEADER_SIZE], (unsigned char*)&buffer[HEADER_SIZE],
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80005fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80005fc:	f04f 0400 	mov.w	r4, #0
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4623      	mov	r3, r4
 800060c:	f006 f970 	bl	80068f0 <crypto_secretbox_easy>
                while (encoded_cipher[length_encoded_cipher-1] == 0) {
                    length_encoded_cipher--;
                }
            */
            
                uint16_t length_encoded_cipher = Base64encode_len(length_decoded_cipher);
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fb50 	bl	8000cb8 <Base64encode_len>
 8000618:	4603      	mov	r3, r0
 800061a:	86fb      	strh	r3, [r7, #54]	; 0x36
                // Move cipher in bytes of 3 to make room for encoding                
                for (uint16_t i = (length_decoded_cipher-1)/3; i > 0; i--) {
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a6b      	ldr	r2, [pc, #428]	; (80007d0 <main+0x4e8>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	17db      	asrs	r3, r3, #31
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800062c:	e01b      	b.n	8000666 <main+0x37e>
                    memmove(&buffer[HEADER_SIZE + 4*i], &buffer[HEADER_SIZE + 3*i], 3);
 800062e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	3326      	adds	r3, #38	; 0x26
 8000634:	461a      	mov	r2, r3
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	1898      	adds	r0, r3, r2
 800063a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	3326      	adds	r3, #38	; 0x26
 8000644:	461a      	mov	r2, r3
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	4413      	add	r3, r2
 800064a:	2203      	movs	r2, #3
 800064c:	4619      	mov	r1, r3
 800064e:	f008 fb29 	bl	8008ca4 <memmove>
                    buffer[HEADER_SIZE + 4*i +3] = 0;
 8000652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	3329      	adds	r3, #41	; 0x29
 8000658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800065a:	4413      	add	r3, r2
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
                for (uint16_t i = (length_decoded_cipher-1)/3; i > 0; i--) {
 8000660:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000662:	3b01      	subs	r3, #1
 8000664:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000666:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1e0      	bne.n	800062e <main+0x346>
                }
                // Encode every 3 Bit at a time
                // Last Byte has to be treated differently
                char temp[3] = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2100      	movs	r1, #0
 8000672:	460a      	mov	r2, r1
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	460a      	mov	r2, r1
 8000678:	709a      	strb	r2, [r3, #2]
                char last[3] = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2100      	movs	r1, #0
 800067e:	460a      	mov	r2, r1
 8000680:	801a      	strh	r2, [r3, #0]
 8000682:	460a      	mov	r2, r1
 8000684:	709a      	strb	r2, [r3, #2]
                int16_t i = (length_decoded_cipher-1)/3;
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	3b01      	subs	r3, #1
 800068a:	4a51      	ldr	r2, [pc, #324]	; (80007d0 <main+0x4e8>)
 800068c:	fb82 1203 	smull	r1, r2, r2, r3
 8000690:	17db      	asrs	r3, r3, #31
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	867b      	strh	r3, [r7, #50]	; 0x32
                int16_t lastindex = i;
 8000696:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000698:	81bb      	strh	r3, [r7, #12]
                memcpy(last, &buffer[HEADER_SIZE + 4*i], 3);                                
 800069a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	3326      	adds	r3, #38	; 0x26
 80006a2:	461a      	mov	r2, r3
 80006a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a6:	441a      	add	r2, r3
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	8811      	ldrh	r1, [r2, #0]
 80006ac:	7892      	ldrb	r2, [r2, #2]
 80006ae:	8019      	strh	r1, [r3, #0]
 80006b0:	709a      	strb	r2, [r3, #2]
                for (; i >= 0; i--) {
 80006b2:	e01f      	b.n	80006f4 <main+0x40c>
                    memcpy(temp, &buffer[HEADER_SIZE + 4*i], 3);
 80006b4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	3326      	adds	r3, #38	; 0x26
 80006bc:	461a      	mov	r2, r3
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	441a      	add	r2, r3
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	8811      	ldrh	r1, [r2, #0]
 80006c8:	7892      	ldrb	r2, [r2, #2]
 80006ca:	8019      	strh	r1, [r3, #0]
 80006cc:	709a      	strb	r2, [r3, #2]
                    Base64encode(&buffer[HEADER_SIZE + 4*i], temp, 3);
 80006ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	3326      	adds	r3, #38	; 0x26
 80006d6:	461a      	mov	r2, r3
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	4413      	add	r3, r2
 80006dc:	f107 0108 	add.w	r1, r7, #8
 80006e0:	2203      	movs	r2, #3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fafc 	bl	8000ce0 <Base64encode>
                for (; i >= 0; i--) {
 80006e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	3b01      	subs	r3, #1
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	867b      	strh	r3, [r7, #50]	; 0x32
 80006f4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dadb      	bge.n	80006b4 <main+0x3cc>
                }
                if (last[1]== 0)
 80006fc:	797b      	ldrb	r3, [r7, #5]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d107      	bne.n	8000712 <main+0x42a>
                    buffer[HEADER_SIZE + 4*lastindex +2] = '=';
 8000702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	3328      	adds	r3, #40	; 0x28
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	4413      	add	r3, r2
 800070e:	223d      	movs	r2, #61	; 0x3d
 8000710:	701a      	strb	r2, [r3, #0]
                if (last[2]== 0)
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10b      	bne.n	8000730 <main+0x448>
                    buffer[HEADER_SIZE + 4*lastindex +3] = '=';
 8000718:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	3329      	adds	r3, #41	; 0x29
 8000720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000722:	4413      	add	r3, r2
 8000724:	223d      	movs	r2, #61	; 0x3d
 8000726:	701a      	strb	r2, [r3, #0]
                
            
                while (buffer[HEADER_SIZE + length_encoded_cipher-1] == 0) {
 8000728:	e002      	b.n	8000730 <main+0x448>
                    length_encoded_cipher--;
 800072a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800072c:	3b01      	subs	r3, #1
 800072e:	86fb      	strh	r3, [r7, #54]	; 0x36
                while (buffer[HEADER_SIZE + length_encoded_cipher-1] == 0) {
 8000730:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000732:	3325      	adds	r3, #37	; 0x25
 8000734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f5      	beq.n	800072a <main+0x442>
                }
            
                // Decode every      
                // Write length of encoded ciphertext into Header
                *((uint16_t *)decoded_length) = length_encoded_cipher;
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000742:	801a      	strh	r2, [r3, #0]

                // Encode header
                Base64encode(encoded_length, decoded_length, 3);
 8000744:	2203      	movs	r2, #3
 8000746:	69f9      	ldr	r1, [r7, #28]
 8000748:	6a38      	ldr	r0, [r7, #32]
 800074a:	f000 fac9 	bl	8000ce0 <Base64encode>

                // Make Protocol
                buffer[0] = 0x01;
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
                memcpy(&buffer[1], encoded_length, 4);
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	3301      	adds	r3, #1
 8000758:	6a3a      	ldr	r2, [r7, #32]
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	601a      	str	r2, [r3, #0]
                buffer[5] = 0x02;
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	3305      	adds	r3, #5
 8000762:	2202      	movs	r2, #2
 8000764:	701a      	strb	r2, [r3, #0]
                memmove(&buffer[6], &buffer[HEADER_SIZE], length_encoded_cipher);
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	1d98      	adds	r0, r3, #6
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	3326      	adds	r3, #38	; 0x26
 800076e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000770:	4619      	mov	r1, r3
 8000772:	f008 fa97 	bl	8008ca4 <memmove>
                buffer[length_encoded_cipher + 6] = 0x03;
 8000776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000778:	3306      	adds	r3, #6
 800077a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077c:	4413      	add	r3, r2
 800077e:	2203      	movs	r2, #3
 8000780:	701a      	strb	r2, [r3, #0]
                    // Send rest
                    CDC_Device_SendData(&VirtualSerial_CDC_Interface, &buffer[32761], length_encoded_cipher+7);
                } else {
                    
                }*/
                CDC_Device_SendData(&VirtualSerial_CDC_Interface, buffer, length_encoded_cipher+7);
 8000782:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000784:	3307      	adds	r3, #7
 8000786:	b29b      	uxth	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <main+0x4ec>)
 800078e:	f003 f8a5 	bl	80038dc <CDC_Device_SendData>
                
                
                //free(encrypted);
                
                //free(encoded_cipher);
                free(key);
 8000792:	6938      	ldr	r0, [r7, #16]
 8000794:	f007 ff40 	bl	8008618 <free>
                free(decoded_nonce);
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	f007 ff3d 	bl	8008618 <free>
                free(encoded_nonce);
 800079e:	69b8      	ldr	r0, [r7, #24]
 80007a0:	f007 ff3a 	bl	8008618 <free>
            }
            free(decoded_length);
 80007a4:	69f8      	ldr	r0, [r7, #28]
 80007a6:	f007 ff37 	bl	8008618 <free>
            free(encoded_length);
 80007aa:	6a38      	ldr	r0, [r7, #32]
 80007ac:	f007 ff34 	bl	8008618 <free>
            
           
            
            read_state = READ_START;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            total_received_bytes = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	87fb      	strh	r3, [r7, #62]	; 0x3e

        }  

        CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <main+0x4ec>)
 80007bc:	f003 f80e 	bl	80037dc <CDC_Device_USBTask>
        received_bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 80007c0:	e5b8      	b.n	8000334 <main+0x4c>
        
    }
    
 80007c2:	4618      	mov	r0, r3
 80007c4:	3744      	adds	r7, #68	; 0x44
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd90      	pop	{r4, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000ffc4 	.word	0x2000ffc4
 80007d0:	55555556 	.word	0x55555556
 80007d4:	20000024 	.word	0x20000024

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0b      	blt.n	800081e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 021f 	and.w	r2, r3, #31
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <__NVIC_EnableIRQ+0x38>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	2001      	movs	r0, #1
 8000816:	fa00 f202 	lsl.w	r2, r0, r2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db0c      	blt.n	800085c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 021f 	and.w	r2, r3, #31
 8000848:	4907      	ldr	r1, [pc, #28]	; (8000868 <__NVIC_ClearPendingIRQ+0x38>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	3360      	adds	r3, #96	; 0x60
 8000858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0092      	lsls	r2, r2, #2
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b06      	cmp	r3, #6
 80008dc:	bf28      	it	cs
 80008de:	2306      	movcs	r3, #6
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3306      	adds	r3, #6
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <USB0_0_IRQHandler>:
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&USB_runtime);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USB0_0_IRQHandler+0x10>)
 800092e:	f001 fe5f 	bl	80025f0 <XMC_USBD_IRQHandler>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000044 	.word	0x20000044

0800093c <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  USBD_Initialize(&USB_runtime);
 8000940:	4811      	ldr	r0, [pc, #68]	; (8000988 <USB_Init+0x4c>)
 8000942:	f000 ff53 	bl	80017ec <USBD_Initialize>
	
  /* Interrupts configuration*/
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
 8000946:	f7ff ff47 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 800094a:	4603      	mov	r3, r0
 800094c:	2200      	movs	r2, #0
 800094e:	213f      	movs	r1, #63	; 0x3f
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ffb5 	bl	80008c0 <NVIC_EncodePriority>
 8000956:	4603      	mov	r3, r0
 8000958:	4619      	mov	r1, r3
 800095a:	206b      	movs	r0, #107	; 0x6b
 800095c:	f7ff ff86 	bl	800086c <__NVIC_SetPriority>
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8000960:	206b      	movs	r0, #107	; 0x6b
 8000962:	f7ff ff65 	bl	8000830 <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 8000966:	206b      	movs	r0, #107	; 0x6b
 8000968:	f7ff ff44 	bl	80007f4 <__NVIC_EnableIRQ>

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <USB_Init+0x50>)
 800096e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000972:	619a      	str	r2, [r3, #24]
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <USB_Init+0x50>)
 8000976:	2208      	movs	r2, #8
 8000978:	779a      	strb	r2, [r3, #30]
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <USB_Init+0x54>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4798      	blx	r3

  /* USB Connection*/
  USB_Attach();
	
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000044 	.word	0x20000044
 800098c:	20000024 	.word	0x20000024
 8000990:	20000e20 	.word	0x20000e20

08000994 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  if(device.IsConfigured)
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <EVENT_USB_Device_Reset+0x2c>)
 80009b6:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d008      	beq.n	80009d6 <EVENT_USB_Device_Reset+0x26>
  {
    USB_Init();
 80009c4:	f7ff ffba 	bl	800093c <USB_Init>
    device.IsConfigured=0;
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <EVENT_USB_Device_Reset+0x2c>)
 80009ca:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80009ce:	f36f 0300 	bfc	r3, #0, #1
 80009d2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
  }
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000e20 	.word	0x20000e20

080009e0 <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 80009e8:	2081      	movs	r0, #129	; 0x81
 80009ea:	f000 ff75 	bl	80018d8 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	490b      	ldr	r1, [pc, #44]	; (8000a20 <EVENT_USB_Device_ConfigurationChanged+0x40>)
 80009f2:	2082      	movs	r0, #130	; 0x82
 80009f4:	f000 ff70 	bl	80018d8 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	490a      	ldr	r1, [pc, #40]	; (8000a24 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 ff6b 	bl	80018d8 <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 8000a04:	f002 fea6 	bl	8003754 <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 8000a08:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 8000a0a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000ba0 	.word	0x20000ba0
 8000a20:	20000be0 	.word	0x20000be0
 8000a24:	20000b60 	.word	0x20000b60
 8000a28:	20000024 	.word	0x20000024
 8000a2c:	20000e20 	.word	0x20000e20

08000a30 <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <EVENT_USB_Device_ControlRequest+0x10>)
 8000a36:	f002 fd8d 	bl	8003554 <CDC_Device_ProcessControlRequest>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000024 	.word	0x20000024

08000a44 <EVENT_USB_Device_StartOfFrame>:

void EVENT_USB_Device_StartOfFrame(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	603a      	str	r2, [r7, #0]
 8000a7a:	80fb      	strh	r3, [r7, #6]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	727b      	strb	r3, [r7, #9]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	723b      	strb	r3, [r7, #8]

	const void* Address = NULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 8000a90:	2300      	movs	r3, #0
 8000a92:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType)
 8000a94:	7a7b      	ldrb	r3, [r7, #9]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d008      	beq.n	8000aac <CALLBACK_USB_GetDescriptor+0x3c>
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d00b      	beq.n	8000ab6 <CALLBACK_USB_GetDescriptor+0x46>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d121      	bne.n	8000ae6 <CALLBACK_USB_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <CALLBACK_USB_GetDescriptor+0x8c>)
 8000aa4:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 8000aa6:	2312      	movs	r3, #18
 8000aa8:	817b      	strh	r3, [r7, #10]
			break;
 8000aaa:	e01c      	b.n	8000ae6 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <CALLBACK_USB_GetDescriptor+0x90>)
 8000aae:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8000ab0:	233e      	movs	r3, #62	; 0x3e
 8000ab2:	817b      	strh	r3, [r7, #10]
			break;
 8000ab4:	e017      	b.n	8000ae6 <CALLBACK_USB_GetDescriptor+0x76>
		case DTYPE_String:
			switch (DescriptorNumber)
 8000ab6:	7a3b      	ldrb	r3, [r7, #8]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d009      	beq.n	8000ad0 <CALLBACK_USB_GetDescriptor+0x60>
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d00c      	beq.n	8000ada <CALLBACK_USB_GetDescriptor+0x6a>
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d000      	beq.n	8000ac6 <CALLBACK_USB_GetDescriptor+0x56>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 8000ac4:	e00e      	b.n	8000ae4 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &LanguageString;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <CALLBACK_USB_GetDescriptor+0x94>)
 8000ac8:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 8000aca:	2304      	movs	r3, #4
 8000acc:	817b      	strh	r3, [r7, #10]
					break;
 8000ace:	e009      	b.n	8000ae4 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ManufacturerString;
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <CALLBACK_USB_GetDescriptor+0x98>)
 8000ad2:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 8000ad4:	2358      	movs	r3, #88	; 0x58
 8000ad6:	817b      	strh	r3, [r7, #10]
					break;
 8000ad8:	e004      	b.n	8000ae4 <CALLBACK_USB_GetDescriptor+0x74>
					Address = &ProductString;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <CALLBACK_USB_GetDescriptor+0x9c>)
 8000adc:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	817b      	strh	r3, [r7, #10]
					break;
 8000ae2:	bf00      	nop
			break;
 8000ae4:	bf00      	nop
	}

	*DescriptorAddress = Address;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	601a      	str	r2, [r3, #0]
	return Size;
 8000aec:	897b      	ldrh	r3, [r7, #10]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	0800bc44 	.word	0x0800bc44
 8000b00:	0800bc58 	.word	0x0800bc58
 8000b04:	0800bc98 	.word	0x0800bc98
 8000b08:	0800bca0 	.word	0x0800bca0
 8000b0c:	0800bcfc 	.word	0x0800bcfc

08000b10 <Base64decode_len>:
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64
};

unsigned int Base64decode_len(const char *bufcoded)
{
 8000b10:	b490      	push	{r4, r7}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    unsigned int nbytesdecoded;
    register const unsigned char *bufin;
    register unsigned int nprbytes;

    bufin = (const unsigned char *) bufcoded;
 8000b18:	687c      	ldr	r4, [r7, #4]
    while (pr2six[*(bufin++)] <= 63);
 8000b1a:	bf00      	nop
 8000b1c:	4623      	mov	r3, r4
 8000b1e:	1c5c      	adds	r4, r3, #1
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <Base64decode_len+0x40>)
 8000b26:	5c9b      	ldrb	r3, [r3, r2]
 8000b28:	2b3f      	cmp	r3, #63	; 0x3f
 8000b2a:	d9f7      	bls.n	8000b1c <Base64decode_len+0xc>

    nprbytes = (bufin - (const unsigned char *) bufcoded) - 1;
 8000b2c:	4622      	mov	r2, r4
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	3b01      	subs	r3, #1
 8000b34:	461c      	mov	r4, r3
    nbytesdecoded = ((nprbytes + 3) / 4) * 3;
 8000b36:	1ce3      	adds	r3, r4, #3
 8000b38:	089a      	lsrs	r2, r3, #2
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]

    return nbytesdecoded + 1;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3301      	adds	r3, #1
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc90      	pop	{r4, r7}
 8000b4e:	4770      	bx	lr
 8000b50:	0800bd20 	.word	0x0800bd20

08000b54 <Base64decode>:

unsigned int Base64decode(char *bufplain, const char *bufcoded)
{
 8000b54:	b4f0      	push	{r4, r5, r6, r7}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
    unsigned int nbytesdecoded;
    register const unsigned char *bufin;
    register unsigned char *bufout;
    register unsigned int nprbytes;

    bufin = (const unsigned char *) bufcoded;
 8000b5e:	683c      	ldr	r4, [r7, #0]
    while (pr2six[*(bufin++)] <= 63);
 8000b60:	bf00      	nop
 8000b62:	4623      	mov	r3, r4
 8000b64:	1c5c      	adds	r4, r3, #1
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <Base64decode+0x160>)
 8000b6c:	5c9b      	ldrb	r3, [r3, r2]
 8000b6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b70:	d9f7      	bls.n	8000b62 <Base64decode+0xe>
    nprbytes = (bufin - (const unsigned char *) bufcoded) - 1;
 8000b72:	4622      	mov	r2, r4
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	461e      	mov	r6, r3
    nbytesdecoded = ((nprbytes + 3) / 4) * 3;
 8000b7c:	1cf3      	adds	r3, r6, #3
 8000b7e:	089a      	lsrs	r2, r3, #2
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    bufout = (unsigned char *) bufplain;
 8000b88:	687d      	ldr	r5, [r7, #4]
    bufin = (const unsigned char *) bufcoded;
 8000b8a:	683c      	ldr	r4, [r7, #0]

    while (nprbytes > 4) {
 8000b8c:	e03d      	b.n	8000c0a <Base64decode+0xb6>
    *(bufout++) =
        (unsigned char) (pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);
 8000b8e:	7823      	ldrb	r3, [r4, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <Base64decode+0x160>)
 8000b94:	5c9b      	ldrb	r3, [r3, r2]
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	1c63      	adds	r3, r4, #1
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <Base64decode+0x160>)
 8000ba2:	5c5b      	ldrb	r3, [r3, r1]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b25a      	sxtb	r2, r3
    *(bufout++) =
 8000bae:	462b      	mov	r3, r5
 8000bb0:	1c5d      	adds	r5, r3, #1
        (unsigned char) (pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);
 8000bb2:	b2d2      	uxtb	r2, r2
    *(bufout++) =
 8000bb4:	701a      	strb	r2, [r3, #0]
    *(bufout++) =
        (unsigned char) (pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);
 8000bb6:	1c63      	adds	r3, r4, #1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <Base64decode+0x160>)
 8000bbe:	5c9b      	ldrb	r3, [r3, r2]
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	b25a      	sxtb	r2, r3
 8000bc4:	1ca3      	adds	r3, r4, #2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <Base64decode+0x160>)
 8000bcc:	5c5b      	ldrb	r3, [r3, r1]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b25a      	sxtb	r2, r3
    *(bufout++) =
 8000bd8:	462b      	mov	r3, r5
 8000bda:	1c5d      	adds	r5, r3, #1
        (unsigned char) (pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);
 8000bdc:	b2d2      	uxtb	r2, r2
    *(bufout++) =
 8000bde:	701a      	strb	r2, [r3, #0]
    *(bufout++) =
        (unsigned char) (pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);
 8000be0:	1ca3      	adds	r3, r4, #2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <Base64decode+0x160>)
 8000be8:	5c9b      	ldrb	r3, [r3, r2]
 8000bea:	019b      	lsls	r3, r3, #6
 8000bec:	b25a      	sxtb	r2, r3
 8000bee:	1ce3      	adds	r3, r4, #3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <Base64decode+0x160>)
 8000bf6:	5c5b      	ldrb	r3, [r3, r1]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b25a      	sxtb	r2, r3
    *(bufout++) =
 8000bfe:	462b      	mov	r3, r5
 8000c00:	1c5d      	adds	r5, r3, #1
        (unsigned char) (pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);
 8000c02:	b2d2      	uxtb	r2, r2
    *(bufout++) =
 8000c04:	701a      	strb	r2, [r3, #0]
    bufin += 4;
 8000c06:	3404      	adds	r4, #4
    nprbytes -= 4;
 8000c08:	3e04      	subs	r6, #4
    while (nprbytes > 4) {
 8000c0a:	2e04      	cmp	r6, #4
 8000c0c:	d8bf      	bhi.n	8000b8e <Base64decode+0x3a>
    }

    /* Note: (nprbytes == 1) would be an error, so just ingore that case */
    if (nprbytes > 1) {
 8000c0e:	2e01      	cmp	r6, #1
 8000c10:	d913      	bls.n	8000c3a <Base64decode+0xe6>
    *(bufout++) =
        (unsigned char) (pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);
 8000c12:	7823      	ldrb	r3, [r4, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <Base64decode+0x160>)
 8000c18:	5c9b      	ldrb	r3, [r3, r2]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	1c63      	adds	r3, r4, #1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <Base64decode+0x160>)
 8000c26:	5c5b      	ldrb	r3, [r3, r1]
 8000c28:	091b      	lsrs	r3, r3, #4
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b25a      	sxtb	r2, r3
    *(bufout++) =
 8000c32:	462b      	mov	r3, r5
 8000c34:	1c5d      	adds	r5, r3, #1
        (unsigned char) (pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);
 8000c36:	b2d2      	uxtb	r2, r2
    *(bufout++) =
 8000c38:	701a      	strb	r2, [r3, #0]
    }
    if (nprbytes > 2) {
 8000c3a:	2e02      	cmp	r6, #2
 8000c3c:	d914      	bls.n	8000c68 <Base64decode+0x114>
    *(bufout++) =
        (unsigned char) (pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);
 8000c3e:	1c63      	adds	r3, r4, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <Base64decode+0x160>)
 8000c46:	5c9b      	ldrb	r3, [r3, r2]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	1ca3      	adds	r3, r4, #2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <Base64decode+0x160>)
 8000c54:	5c5b      	ldrb	r3, [r3, r1]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b25a      	sxtb	r2, r3
    *(bufout++) =
 8000c60:	462b      	mov	r3, r5
 8000c62:	1c5d      	adds	r5, r3, #1
        (unsigned char) (pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);
 8000c64:	b2d2      	uxtb	r2, r2
    *(bufout++) =
 8000c66:	701a      	strb	r2, [r3, #0]
    }
    if (nprbytes > 3) {
 8000c68:	2e03      	cmp	r6, #3
 8000c6a:	d912      	bls.n	8000c92 <Base64decode+0x13e>
    *(bufout++) =
        (unsigned char) (pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);
 8000c6c:	1ca3      	adds	r3, r4, #2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <Base64decode+0x160>)
 8000c74:	5c9b      	ldrb	r3, [r3, r2]
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	1ce3      	adds	r3, r4, #3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <Base64decode+0x160>)
 8000c82:	5c5b      	ldrb	r3, [r3, r1]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b25a      	sxtb	r2, r3
    *(bufout++) =
 8000c8a:	462b      	mov	r3, r5
 8000c8c:	1c5d      	adds	r5, r3, #1
        (unsigned char) (pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);
 8000c8e:	b2d2      	uxtb	r2, r2
    *(bufout++) =
 8000c90:	701a      	strb	r2, [r3, #0]
    }

    *(bufout++) = '\0';
 8000c92:	462b      	mov	r3, r5
 8000c94:	1c5d      	adds	r5, r3, #1
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
    nbytesdecoded -= (4 - nprbytes) & 3;
 8000c9a:	4273      	negs	r3, r6
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	60fb      	str	r3, [r7, #12]
    return nbytesdecoded;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bcf0      	pop	{r4, r5, r6, r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	0800bd20 	.word	0x0800bd20

08000cb8 <Base64encode_len>:

static const char basis_64[] =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

unsigned int Base64encode_len(unsigned int len)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
    return ((len + 2) / 3 * 4) + 1;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <Base64encode_len+0x24>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	085b      	lsrs	r3, r3, #1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	3301      	adds	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	aaaaaaab 	.word	0xaaaaaaab

08000ce0 <Base64encode>:

unsigned int Base64encode(char *encoded, const char *string, unsigned int len)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
    unsigned int i;
    char *p;

    p = encoded;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len - 2; i += 3) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e048      	b.n	8000d88 <Base64encode+0xa8>
    *p++ = basis_64[(string[i] >> 2) & 0x3F];
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	1c59      	adds	r1, r3, #1
 8000d0a:	6139      	str	r1, [r7, #16]
 8000d0c:	494e      	ldr	r1, [pc, #312]	; (8000e48 <Base64encode+0x168>)
 8000d0e:	5c8a      	ldrb	r2, [r1, r2]
 8000d10:	701a      	strb	r2, [r3, #0]
    *p++ = basis_64[((string[i] & 0x3) << 4) |
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
                    ((unsigned int) (string[i + 1] & 0xF0) >> 4)];
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	3201      	adds	r2, #1
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	440a      	add	r2, r1
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	0912      	lsrs	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
    *p++ = basis_64[((string[i] & 0x3) << 4) |
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1c59      	adds	r1, r3, #1
 8000d34:	6139      	str	r1, [r7, #16]
 8000d36:	4944      	ldr	r1, [pc, #272]	; (8000e48 <Base64encode+0x168>)
 8000d38:	5c8a      	ldrb	r2, [r1, r2]
 8000d3a:	701a      	strb	r2, [r3, #0]
    *p++ = basis_64[((string[i + 1] & 0xF) << 2) |
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	4413      	add	r3, r2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	f003 033c 	and.w	r3, r3, #60	; 0x3c
                    ((unsigned int) (string[i + 2] & 0xC0) >> 6)];
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	3202      	adds	r2, #2
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	440a      	add	r2, r1
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	0992      	lsrs	r2, r2, #6
 8000d58:	b2d2      	uxtb	r2, r2
    *p++ = basis_64[((string[i + 1] & 0xF) << 2) |
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1c59      	adds	r1, r3, #1
 8000d60:	6139      	str	r1, [r7, #16]
 8000d62:	4939      	ldr	r1, [pc, #228]	; (8000e48 <Base64encode+0x168>)
 8000d64:	5c8a      	ldrb	r2, [r1, r2]
 8000d66:	701a      	strb	r2, [r3, #0]
    *p++ = basis_64[string[i + 2] & 0x3F];
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1c59      	adds	r1, r3, #1
 8000d7a:	6139      	str	r1, [r7, #16]
 8000d7c:	4932      	ldr	r1, [pc, #200]	; (8000e48 <Base64encode+0x168>)
 8000d7e:	5c8a      	ldrb	r2, [r1, r2]
 8000d80:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len - 2; i += 3) {
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3303      	adds	r3, #3
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d3b1      	bcc.n	8000cf6 <Base64encode+0x16>
    }
    if (i < len) {
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d24d      	bcs.n	8000e36 <Base64encode+0x156>
    *p++ = basis_64[(string[i] >> 2) & 0x3F];
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1c59      	adds	r1, r3, #1
 8000dae:	6139      	str	r1, [r7, #16]
 8000db0:	4925      	ldr	r1, [pc, #148]	; (8000e48 <Base64encode+0x168>)
 8000db2:	5c8a      	ldrb	r2, [r1, r2]
 8000db4:	701a      	strb	r2, [r3, #0]
    if (i == (len - 1)) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d112      	bne.n	8000de6 <Base64encode+0x106>
        *p++ = basis_64[((string[i] & 0x3) << 4)];
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1c59      	adds	r1, r3, #1
 8000dd2:	6139      	str	r1, [r7, #16]
 8000dd4:	491c      	ldr	r1, [pc, #112]	; (8000e48 <Base64encode+0x168>)
 8000dd6:	5c8a      	ldrb	r2, [r1, r2]
 8000dd8:	701a      	strb	r2, [r3, #0]
        *p++ = '=';
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	613a      	str	r2, [r7, #16]
 8000de0:	223d      	movs	r2, #61	; 0x3d
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	e022      	b.n	8000e2c <Base64encode+0x14c>
    }
    else {
        *p++ = basis_64[((string[i] & 0x3) << 4) |
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4413      	add	r3, r2
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	f003 0330 	and.w	r3, r3, #48	; 0x30
                        ((unsigned int) (string[i + 1] & 0xF0) >> 4)];
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	3201      	adds	r2, #1
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	440a      	add	r2, r1
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	0912      	lsrs	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
        *p++ = basis_64[((string[i] & 0x3) << 4) |
 8000e02:	431a      	orrs	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1c59      	adds	r1, r3, #1
 8000e08:	6139      	str	r1, [r7, #16]
 8000e0a:	490f      	ldr	r1, [pc, #60]	; (8000e48 <Base64encode+0x168>)
 8000e0c:	5c8a      	ldrb	r2, [r1, r2]
 8000e0e:	701a      	strb	r2, [r3, #0]
        *p++ = basis_64[((string[i + 1] & 0xF) << 2)];
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1c59      	adds	r1, r3, #1
 8000e24:	6139      	str	r1, [r7, #16]
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <Base64encode+0x168>)
 8000e28:	5c8a      	ldrb	r2, [r1, r2]
 8000e2a:	701a      	strb	r2, [r3, #0]
    }
    *p++ = '=';
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	613a      	str	r2, [r7, #16]
 8000e32:	223d      	movs	r2, #61	; 0x3d
 8000e34:	701a      	strb	r2, [r3, #0]
    }

    //*p++ = '\0';
    return p - encoded;
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	1ad3      	subs	r3, r2, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	0800be20 	.word	0x0800be20

08000e4c <randombytes_dilbert_random_buf>:
# define SSIZE_MAX (SIZE_MAX / 2 - 1)
#endif

static void
randombytes_dilbert_random_buf(void * const buf, const size_t size)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  memset(buf, 9, size);
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	2109      	movs	r1, #9
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f007 ff86 	bl	8008d6c <memset>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <randombytes_dilbert_random>:

static uint32_t
randombytes_dilbert_random(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* From http://dilbert.com/strip/2001-10-25 we know that 9 is a very random 
   * number. This implementation is only for testing,
   * ! DO NOT USE IN REAL-WORLD APPLICATIONS ! */
  return 9;
 8000e6c:	2309      	movs	r3, #9
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <randombytes_dilbert_implementation_name>:

static const char *
randombytes_dilbert_implementation_name(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
    return "Dilbert";
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <randombytes_dilbert_implementation_name+0x10>)
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	0800be64 	.word	0x0800be64

08000e8c <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <USBD_HandleEP0_Stall+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	2101      	movs	r1, #1
 8000e98:	2080      	movs	r0, #128	; 0x80
 8000e9a:	4798      	blx	r3
	device.EP0_State = IDLE;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <USBD_HandleEP0_Stall+0x28>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <USBD_HandleEP0_Stall+0x28>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	2118      	movs	r1, #24
 8000eac:	2000      	movs	r0, #0
 8000eae:	4798      	blx	r3
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000e20 	.word	0x20000e20

08000eb8 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
	uint16_t status = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	813b      	strh	r3, [r7, #8]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 8000ec6:	4bab      	ldr	r3, [pc, #684]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000ec8:	885b      	ldrh	r3, [r3, #2]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	74fb      	strb	r3, [r7, #19]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 8000ece:	f7ff fdaf 	bl	8000a30 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 8000ed2:	4ba9      	ldr	r3, [pc, #676]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8000ed4:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000ed8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 81fd 	beq.w	80012de <USB_Device_ProcessControlRequest+0x426>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8000ee4:	4ba3      	ldr	r3, [pc, #652]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	2b0c      	cmp	r3, #12
 8000eea:	f200 81ea 	bhi.w	80012c2 <USB_Device_ProcessControlRequest+0x40a>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <USB_Device_ProcessControlRequest+0x3c>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	0800106b 	.word	0x0800106b
 8000ef8:	08000f29 	.word	0x08000f29
 8000efc:	080012c3 	.word	0x080012c3
 8000f00:	080011f7 	.word	0x080011f7
 8000f04:	080012c3 	.word	0x080012c3
 8000f08:	0800114f 	.word	0x0800114f
 8000f0c:	08000fcf 	.word	0x08000fcf
 8000f10:	080011bd 	.word	0x080011bd
 8000f14:	08000fbf 	.word	0x08000fbf
 8000f18:	08001185 	.word	0x08001185
 8000f1c:	08001033 	.word	0x08001033
 8000f20:	080011c3 	.word	0x080011c3
 8000f24:	080012bd 	.word	0x080012bd
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000f28:	4b92      	ldr	r3, [pc, #584]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d133      	bne.n	8000f9c <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8000f34:	4b8f      	ldr	r3, [pc, #572]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000f40:	4b8e      	ldr	r3, [pc, #568]	; (800117c <USB_Device_ProcessControlRequest+0x2c4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d004      	beq.n	8000f54 <USB_Device_ProcessControlRequest+0x9c>
 8000f4a:	4b8a      	ldr	r3, [pc, #552]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d120      	bne.n	8000f96 <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 8000f54:	897b      	ldrh	r3, [r7, #10]
 8000f56:	4a88      	ldr	r2, [pc, #544]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8000f58:	212c      	movs	r1, #44	; 0x2c
 8000f5a:	fb01 f303 	mul.w	r3, r1, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	7a1b      	ldrb	r3, [r3, #8]
 8000f62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f66:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d114      	bne.n	8000f96 <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 8000f6c:	897b      	ldrh	r3, [r7, #10]
 8000f6e:	4a82      	ldr	r2, [pc, #520]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8000f70:	212c      	movs	r1, #44	; 0x2c
 8000f72:	fb01 f303 	mul.w	r3, r1, r3
 8000f76:	441a      	add	r2, r3
 8000f78:	7a13      	ldrb	r3, [r2, #8]
 8000f7a:	f36f 0382 	bfc	r3, #2, #1
 8000f7e:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8000f80:	4b7d      	ldr	r3, [pc, #500]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	4a7b      	ldr	r2, [pc, #492]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000f88:	8892      	ldrh	r2, [r2, #4]
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4610      	mov	r0, r2
 8000f92:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 8000f94:	e19b      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
				USBD_HandleEP0_Stall();
 8000f96:	f7ff ff79 	bl	8000e8c <USBD_HandleEP0_Stall>
			break;
 8000f9a:	e198      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000f9c:	4b75      	ldr	r3, [pc, #468]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d107      	bne.n	8000fb8 <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 8000fa8:	4a73      	ldr	r2, [pc, #460]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8000faa:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000fae:	f36f 0382 	bfc	r3, #2, #1
 8000fb2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 8000fb6:	e18a      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		USBD_HandleEP0_Stall();
 8000fb8:	f7ff ff68 	bl	8000e8c <USBD_HandleEP0_Stall>
		break;
 8000fbc:	e187      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 8000fbe:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	496e      	ldr	r1, [pc, #440]	; (8001180 <USB_Device_ProcessControlRequest+0x2c8>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	4798      	blx	r3
		break;
 8000fcc:	e17f      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000fd0:	885b      	ldrh	r3, [r3, #2]
 8000fd2:	b298      	uxth	r0, r3
 8000fd4:	4b67      	ldr	r3, [pc, #412]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000fd6:	889b      	ldrh	r3, [r3, #4]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	1d3a      	adds	r2, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fd46 	bl	8000a70 <CALLBACK_USB_GetDescriptor>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	617b      	str	r3, [r7, #20]
		if (length==0)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <USB_Device_ProcessControlRequest+0x13c>
			USBD_HandleEP0_Stall();
 8000fee:	f7ff ff4d 	bl	8000e8c <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 8000ff2:	e16c      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
			length = length < USB_ControlRequest.wLength ?
 8000ff4:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8000ff6:	88db      	ldrh	r3, [r3, #6]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	bf28      	it	cs
 8001002:	4613      	movcs	r3, r2
 8001004:	617b      	str	r3, [r7, #20]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 8001006:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	2000      	movs	r0, #0
 8001012:	4798      	blx	r3
 8001014:	4603      	mov	r3, r0
 8001016:	60fb      	str	r3, [r7, #12]
			device.Endpoints[0].InDataLeft = length - ret;
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	4a56      	ldr	r2, [pc, #344]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8001020:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	461a      	mov	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	461a      	mov	r2, r3
 800102c:	4b52      	ldr	r3, [pc, #328]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8001030:	e14d      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8001032:	4b52      	ldr	r3, [pc, #328]	; (800117c <USB_Device_ProcessControlRequest+0x2c4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b04      	cmp	r3, #4
 800103a:	d10d      	bne.n	8001058 <USB_Device_ProcessControlRequest+0x1a0>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 8001044:	8892      	ldrh	r2, [r2, #4]
 8001046:	b292      	uxth	r2, r2
 8001048:	f502 729c 	add.w	r2, r2, #312	; 0x138
 800104c:	494a      	ldr	r1, [pc, #296]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 800104e:	4411      	add	r1, r2
 8001050:	2201      	movs	r2, #1
 8001052:	2000      	movs	r0, #0
 8001054:	4798      	blx	r3
			break;
 8001056:	e13a      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <USB_Device_ProcessControlRequest+0x2c4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b03      	cmp	r3, #3
 8001060:	f040 8132 	bne.w	80012c8 <USB_Device_ProcessControlRequest+0x410>
			USBD_HandleEP0_Stall();
 8001064:	f7ff ff12 	bl	8000e8c <USBD_HandleEP0_Stall>
			break;
 8001068:	e131      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 800106a:	4b42      	ldr	r3, [pc, #264]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11b      	bne.n	80010ae <USB_Device_ProcessControlRequest+0x1f6>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8001078:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800107c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8001088:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800108c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f107 0108 	add.w	r1, r7, #8
 80010a6:	2202      	movs	r2, #2
 80010a8:	2000      	movs	r0, #0
 80010aa:	4798      	blx	r3
			break;
 80010ac:	e10f      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10f      	bne.n	80010da <USB_Device_ProcessControlRequest+0x222>
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <USB_Device_ProcessControlRequest+0x2c4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d10a      	bne.n	80010da <USB_Device_ProcessControlRequest+0x222>
			status = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f107 0108 	add.w	r1, r7, #8
 80010d2:	2202      	movs	r2, #2
 80010d4:	2000      	movs	r0, #0
 80010d6:	4798      	blx	r3
			break;
 80010d8:	e0f9      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <USB_Device_ProcessControlRequest+0x290>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <USB_Device_ProcessControlRequest+0x2c4>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d004      	beq.n	8001106 <USB_Device_ProcessControlRequest+0x24e>
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <USB_Device_ProcessControlRequest+0x2bc>)
 80010fe:	889b      	ldrh	r3, [r3, #4]
 8001100:	b29b      	uxth	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d120      	bne.n	8001148 <USB_Device_ProcessControlRequest+0x290>
					device.Endpoints[Index].IsConfigured==1) {
 8001106:	897b      	ldrh	r3, [r7, #10]
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 800110a:	212c      	movs	r1, #44	; 0x2c
 800110c:	fb01 f303 	mul.w	r3, r1, r3
 8001110:	4413      	add	r3, r2
 8001112:	7a1b      	ldrb	r3, [r3, #8]
 8001114:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001118:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 800111a:	2b01      	cmp	r3, #1
 800111c:	d114      	bne.n	8001148 <USB_Device_ProcessControlRequest+0x290>
				status = device.Endpoints[Index].IsHalted;
 800111e:	897b      	ldrh	r3, [r7, #10]
 8001120:	4a15      	ldr	r2, [pc, #84]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8001122:	212c      	movs	r1, #44	; 0x2c
 8001124:	fb01 f303 	mul.w	r3, r1, r3
 8001128:	4413      	add	r3, r2
 800112a:	7a1b      	ldrb	r3, [r3, #8]
 800112c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	813b      	strh	r3, [r7, #8]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f107 0108 	add.w	r1, r7, #8
 8001140:	2202      	movs	r2, #2
 8001142:	2000      	movs	r0, #0
 8001144:	4798      	blx	r3
				break;
 8001146:	e0c2      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 8001148:	f7ff fea0 	bl	8000e8c <USBD_HandleEP0_Stall>
		break;
 800114c:	e0bf      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetAddress:
		if (Value == 0)
 800114e:	7cfb      	ldrb	r3, [r7, #19]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <USB_Device_ProcessControlRequest+0x2a4>
			USB_DeviceState = DEVICE_STATE_Default;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <USB_Device_ProcessControlRequest+0x2c4>)
 8001156:	2202      	movs	r2, #2
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e002      	b.n	8001162 <USB_Device_ProcessControlRequest+0x2aa>
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <USB_Device_ProcessControlRequest+0x2c4>)
 800115e:	2203      	movs	r2, #3
 8001160:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <USB_Device_ProcessControlRequest+0x2c0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	7cfa      	ldrb	r2, [r7, #19]
 800116a:	2100      	movs	r1, #0
 800116c:	4610      	mov	r0, r2
 800116e:	4798      	blx	r3
		break;
 8001170:	e0ad      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
 8001172:	bf00      	nop
 8001174:	20001170 	.word	0x20001170
 8001178:	20000e20 	.word	0x20000e20
 800117c:	2000116d 	.word	0x2000116d
 8001180:	20000f59 	.word	0x20000f59

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8001184:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 8001186:	7cfb      	ldrb	r3, [r7, #19]
 8001188:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 800118c:	f7ff fc28 	bl	80009e0 <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 8001190:	7cfb      	ldrb	r3, [r7, #19]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <USB_Device_ProcessControlRequest+0x2e6>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8001196:	4b55      	ldr	r3, [pc, #340]	; (80012ec <USB_Device_ProcessControlRequest+0x434>)
 8001198:	2203      	movs	r2, #3
 800119a:	701a      	strb	r2, [r3, #0]
			break;
 800119c:	e097      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 800119e:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 80011a0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <USB_Device_ProcessControlRequest+0x2fe>
			USB_DeviceState = DEVICE_STATE_Configured;
 80011ae:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <USB_Device_ProcessControlRequest+0x434>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 80011b4:	e08b      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
			USBD_HandleEP0_Stall();
 80011b6:	f7ff fe69 	bl	8000e8c <USBD_HandleEP0_Stall>
		break;
 80011ba:	e088      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 80011bc:	f7ff fe66 	bl	8000e8c <USBD_HandleEP0_Stall>
		break;
 80011c0:	e085      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80011c2:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <USB_Device_ProcessControlRequest+0x434>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d10c      	bne.n	80011e6 <USB_Device_ProcessControlRequest+0x32e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <USB_Device_ProcessControlRequest+0x438>)
 80011ce:	885b      	ldrh	r3, [r3, #2]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <USB_Device_ProcessControlRequest+0x438>)
 80011d4:	889b      	ldrh	r3, [r3, #4]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 80011e4:	e073      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <USB_Device_ProcessControlRequest+0x434>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d16d      	bne.n	80012cc <USB_Device_ProcessControlRequest+0x414>
			USBD_HandleEP0_Stall();
 80011f0:	f7ff fe4c 	bl	8000e8c <USBD_HandleEP0_Stall>
			break;
 80011f4:	e06b      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 80011f6:	7cfb      	ldrb	r3, [r7, #19]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d102      	bne.n	8001202 <USB_Device_ProcessControlRequest+0x34a>
			USBD_HandleEP0_Stall();
 80011fc:	f7ff fe46 	bl	8000e8c <USBD_HandleEP0_Stall>
			break;
 8001200:	e065      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <USB_Device_ProcessControlRequest+0x434>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b04      	cmp	r3, #4
 800120a:	d138      	bne.n	800127e <USB_Device_ProcessControlRequest+0x3c6>
			switch (Value) {
 800120c:	7cfb      	ldrb	r3, [r7, #19]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <USB_Device_ProcessControlRequest+0x370>
 8001212:	2b01      	cmp	r3, #1
 8001214:	d000      	beq.n	8001218 <USB_Device_ProcessControlRequest+0x360>
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
			}
			break;
 8001216:	e05a      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
				device.RemoteWakeUp = 1;
 8001218:	4a33      	ldr	r2, [pc, #204]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 800121a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8001226:	e029      	b.n	800127c <USB_Device_ProcessControlRequest+0x3c4>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <USB_Device_ProcessControlRequest+0x438>)
 800122a:	889b      	ldrh	r3, [r3, #4]
 800122c:	b29b      	uxth	r3, r3
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	817b      	strh	r3, [r7, #10]
				if (device.Endpoints[Index].IsConfigured == 0)
 8001234:	897b      	ldrh	r3, [r7, #10]
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 8001238:	212c      	movs	r1, #44	; 0x2c
 800123a:	fb01 f303 	mul.w	r3, r1, r3
 800123e:	4413      	add	r3, r2
 8001240:	7a1b      	ldrb	r3, [r3, #8]
 8001242:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <USB_Device_ProcessControlRequest+0x39a>
					USBD_HandleEP0_Stall();
 800124c:	f7ff fe1e 	bl	8000e8c <USBD_HandleEP0_Stall>
				break;
 8001250:	e013      	b.n	800127a <USB_Device_ProcessControlRequest+0x3c2>
					device.Endpoints[Index].IsHalted = 1;
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 8001256:	212c      	movs	r1, #44	; 0x2c
 8001258:	fb01 f303 	mul.w	r3, r1, r3
 800125c:	441a      	add	r2, r3
 800125e:	7a13      	ldrb	r3, [r2, #8]
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <USB_Device_ProcessControlRequest+0x438>)
 800126e:	8892      	ldrh	r2, [r2, #4]
 8001270:	b292      	uxth	r2, r2
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	2101      	movs	r1, #1
 8001276:	4610      	mov	r0, r2
 8001278:	4798      	blx	r3
				break;
 800127a:	bf00      	nop
			break;
 800127c:	e027      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <USB_Device_ProcessControlRequest+0x434>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d116      	bne.n	80012b6 <USB_Device_ProcessControlRequest+0x3fe>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8001288:	7cfb      	ldrb	r3, [r7, #19]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d113      	bne.n	80012b6 <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <USB_Device_ProcessControlRequest+0x438>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 8001296:	2b02      	cmp	r3, #2
 8001298:	d10d      	bne.n	80012b6 <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <USB_Device_ProcessControlRequest+0x438>)
 800129c:	889b      	ldrh	r3, [r3, #4]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d107      	bne.n	80012b6 <USB_Device_ProcessControlRequest+0x3fe>
				device.Endpoints[0].IsHalted = 1;
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 80012a8:	7a13      	ldrb	r3, [r2, #8]
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 80012b0:	f7ff fdec 	bl	8000e8c <USBD_HandleEP0_Stall>
				break;
 80012b4:	e00b      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 80012b6:	f7ff fde9 	bl	8000e8c <USBD_HandleEP0_Stall>
		break;
 80012ba:	e008      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 80012bc:	f7ff fde6 	bl	8000e8c <USBD_HandleEP0_Stall>
		break;
 80012c0:	e005      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>

	default:
		USBD_HandleEP0_Stall();
 80012c2:	f7ff fde3 	bl	8000e8c <USBD_HandleEP0_Stall>
 80012c6:	e002      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		break;
 80012c8:	bf00      	nop
 80012ca:	e000      	b.n	80012ce <USB_Device_ProcessControlRequest+0x416>
		break;
 80012cc:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 80012ce:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <USB_Device_ProcessControlRequest+0x430>)
 80012d0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80012d4:	f36f 0341 	bfc	r3, #1, #1
 80012d8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 80012dc:	e000      	b.n	80012e0 <USB_Device_ProcessControlRequest+0x428>
		return;
 80012de:	bf00      	nop
}
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000e20 	.word	0x20000e20
 80012ec:	2000116d 	.word	0x2000116d
 80012f0:	20001170 	.word	0x20001170

080012f4 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <USBD_HandleEP0_IN+0x48>)
 80012fa:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d109      	bne.n	8001316 <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <USBD_HandleEP0_IN+0x48>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	2000      	movs	r0, #0
 800130c:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <USBD_HandleEP0_IN+0x48>)
 8001310:	2205      	movs	r2, #5
 8001312:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <USBD_HandleEP0_IN+0x48>)
 8001318:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800131c:	2b03      	cmp	r3, #3
 800131e:	d10b      	bne.n	8001338 <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <USBD_HandleEP0_IN+0x48>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <USBD_HandleEP0_IN+0x48>)
 8001328:	7912      	ldrb	r2, [r2, #4]
 800132a:	2118      	movs	r1, #24
 800132c:	4610      	mov	r0, r2
 800132e:	4798      	blx	r3
		device.EP0_State = IDLE;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <USBD_HandleEP0_IN+0x48>)
 8001332:	2201      	movs	r2, #1
 8001334:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000e20 	.word	0x20000e20

08001340 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <USBD_HandleEP0_OUT+0x50>)
 8001346:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800134a:	2b04      	cmp	r3, #4
 800134c:	d10c      	bne.n	8001368 <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 800134e:	f7ff fdb3 	bl	8000eb8 <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <USBD_HandleEP0_OUT+0x50>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <USBD_HandleEP0_OUT+0x50>)
 8001362:	2203      	movs	r2, #3
 8001364:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <USBD_HandleEP0_OUT+0x50>)
 800136a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800136e:	2b05      	cmp	r3, #5
 8001370:	d10b      	bne.n	800138a <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <USBD_HandleEP0_OUT+0x50>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <USBD_HandleEP0_OUT+0x50>)
 800137a:	7912      	ldrb	r2, [r2, #4]
 800137c:	2118      	movs	r1, #24
 800137e:	4610      	mov	r0, r2
 8001380:	4798      	blx	r3
		device.EP0_State = IDLE;
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <USBD_HandleEP0_OUT+0x50>)
 8001384:	2201      	movs	r2, #1
 8001386:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000e20 	.word	0x20000e20

08001394 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <USBD_HandleEP0_SETUP+0x8c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2208      	movs	r2, #8
 80013a2:	4920      	ldr	r1, [pc, #128]	; (8001424 <USBD_HandleEP0_SETUP+0x90>)
 80013a4:	2000      	movs	r0, #0
 80013a6:	4798      	blx	r3
 80013a8:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <USBD_HandleEP0_SETUP+0x8c>)
 80013ac:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d12c      	bne.n	8001418 <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <USBD_HandleEP0_SETUP+0x90>)
 80013c0:	88db      	ldrh	r3, [r3, #6]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10d      	bne.n	80013e4 <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <USBD_HandleEP0_SETUP+0x8c>)
 80013ca:	2203      	movs	r2, #3
 80013cc:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 80013d0:	f7ff fd72 	bl	8000eb8 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <USBD_HandleEP0_SETUP+0x8c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2000      	movs	r0, #0
 80013e0:	4798      	blx	r3
 80013e2:	e01a      	b.n	800141a <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <USBD_HandleEP0_SETUP+0x90>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da06      	bge.n	80013fc <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <USBD_HandleEP0_SETUP+0x8c>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 80013f6:	f7ff fd5f 	bl	8000eb8 <USB_Device_ProcessControlRequest>
 80013fa:	e00e      	b.n	800141a <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <USBD_HandleEP0_SETUP+0x8c>)
 80013fe:	2204      	movs	r2, #4
 8001400:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <USBD_HandleEP0_SETUP+0x8c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <USBD_HandleEP0_SETUP+0x90>)
 800140c:	88d2      	ldrh	r2, [r2, #6]
 800140e:	b292      	uxth	r2, r2
 8001410:	4611      	mov	r1, r2
 8001412:	2000      	movs	r0, #0
 8001414:	4798      	blx	r3
 8001416:	e000      	b.n	800141a <USBD_HandleEP0_SETUP+0x86>
		return;
 8001418:	bf00      	nop
		}
	}
}
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000e20 	.word	0x20000e20
 8001424:	20001170 	.word	0x20001170

08001428 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b09      	cmp	r3, #9
 8001436:	f200 80fd 	bhi.w	8001634 <USBD_SignalDeviceEventHandler+0x20c>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <USBD_SignalDeviceEventHandler+0x18>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001597 	.word	0x08001597
 8001444:	08001585 	.word	0x08001585
 8001448:	08001573 	.word	0x08001573
 800144c:	08001579 	.word	0x08001579
 8001450:	08001469 	.word	0x08001469
 8001454:	08001635 	.word	0x08001635
 8001458:	0800161d 	.word	0x0800161d
 800145c:	0800160d 	.word	0x0800160d
 8001460:	08001635 	.word	0x08001635
 8001464:	0800156d 	.word	0x0800156d
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8001468:	4b74      	ldr	r3, [pc, #464]	; (800163c <USBD_SignalDeviceEventHandler+0x214>)
 800146a:	2202      	movs	r2, #2
 800146c:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 800146e:	4b74      	ldr	r3, [pc, #464]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001470:	2201      	movs	r2, #1
 8001472:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8001476:	4a72      	ldr	r2, [pc, #456]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001478:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800147c:	f36f 0382 	bfc	r3, #2, #1
 8001480:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e050      	b.n	800152c <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 800148a:	4a6d      	ldr	r2, [pc, #436]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	441a      	add	r2, r3
 8001496:	8913      	ldrh	r3, [r2, #8]
 8001498:	f36f 1304 	bfc	r3, #4, #1
 800149c:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 800149e:	4a68      	ldr	r2, [pc, #416]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	212c      	movs	r1, #44	; 0x2c
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	441a      	add	r2, r3
 80014aa:	8913      	ldrh	r3, [r2, #8]
 80014ac:	f36f 03c3 	bfc	r3, #3, #1
 80014b0:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 80014b2:	4a63      	ldr	r2, [pc, #396]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	212c      	movs	r1, #44	; 0x2c
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	441a      	add	r2, r3
 80014be:	7a13      	ldrb	r3, [r2, #8]
 80014c0:	f36f 0382 	bfc	r3, #2, #1
 80014c4:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02c      	beq.n	8001526 <USBD_SignalDeviceEventHandler+0xfe>
 80014cc:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	212c      	movs	r1, #44	; 0x2c
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	7a1b      	ldrb	r3, [r3, #8]
 80014da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 80014e4:	4b56      	ldr	r3, [pc, #344]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4955      	ldr	r1, [pc, #340]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	202c      	movs	r0, #44	; 0x2c
 80014f0:	fb00 f202 	mul.w	r2, r0, r2
 80014f4:	440a      	add	r2, r1
 80014f6:	3204      	adds	r2, #4
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	4610      	mov	r0, r2
 80014fc:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 80014fe:	4a50      	ldr	r2, [pc, #320]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	441a      	add	r2, r3
 800150a:	7a13      	ldrb	r3, [r2, #8]
 800150c:	f36f 0300 	bfc	r3, #0, #1
 8001510:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 8001512:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	212c      	movs	r1, #44	; 0x2c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	441a      	add	r2, r3
 800151e:	7a13      	ldrb	r3, [r2, #8]
 8001520:	f36f 0341 	bfc	r3, #1, #1
 8001524:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b06      	cmp	r3, #6
 8001530:	ddab      	ble.n	800148a <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e009      	b.n	8001554 <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 8001540:	4a3f      	ldr	r2, [pc, #252]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	ddf2      	ble.n	8001540 <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	4a37      	ldr	r2, [pc, #220]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001562:	7912      	ldrb	r2, [r2, #4]
 8001564:	2118      	movs	r1, #24
 8001566:	4610      	mov	r0, r2
 8001568:	4798      	blx	r3
		break;
 800156a:	e064      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 800156c:	f7ff fa6a 	bl	8000a44 <EVENT_USB_Device_StartOfFrame>
		break;
 8001570:	e061      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 8001572:	f7ff fa0f 	bl	8000994 <EVENT_USB_Device_Connect>
		break;
 8001576:	e05e      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <USBD_SignalDeviceEventHandler+0x214>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 800157e:	f7ff fa10 	bl	80009a2 <EVENT_USB_Device_Disconnect>
		break;
 8001582:	e058      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <USBD_SignalDeviceEventHandler+0x214>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	2000      	movs	r0, #0
 8001592:	4798      	blx	r3
		 break;
 8001594:	e04f      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <USBD_SignalDeviceEventHandler+0x214>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 800159c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015a0:	2100      	movs	r1, #0
 80015a2:	4827      	ldr	r0, [pc, #156]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015a4:	f007 fbe2 	bl	8008d6c <memset>
		 device.Driver = &Driver_USBD0;
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015aa:	4a26      	ldr	r2, [pc, #152]	; (8001644 <USBD_SignalDeviceEventHandler+0x21c>)
 80015ac:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015b8:	4a23      	ldr	r2, [pc, #140]	; (8001648 <USBD_SignalDeviceEventHandler+0x220>)
 80015ba:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015c6:	4a21      	ldr	r2, [pc, #132]	; (800164c <USBD_SignalDeviceEventHandler+0x224>)
 80015c8:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d0:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015d4:	7913      	ldrb	r3, [r2, #4]
 80015d6:	f36f 13c7 	bfc	r3, #7, #1
 80015da:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015de:	7a13      	ldrb	r3, [r2, #8]
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015e8:	7a13      	ldrb	r3, [r2, #8]
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 80015f0:	4a13      	ldr	r2, [pc, #76]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015f2:	8913      	ldrh	r3, [r2, #8]
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	f361 138c 	bfi	r3, r1, #6, #7
 80015fa:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	2240      	movs	r2, #64	; 0x40
 8001604:	2100      	movs	r1, #0
 8001606:	2000      	movs	r0, #0
 8001608:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 800160a:	e014      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 800160e:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <USBD_SignalDeviceEventHandler+0x214>)
 8001614:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 8001616:	f7ff fa1c 	bl	8000a52 <EVENT_USB_Device_WakeUp>
		break;
 800161a:	e00c      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <USBD_SignalDeviceEventHandler+0x214>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <USBD_SignalDeviceEventHandler+0x218>)
 8001624:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <USBD_SignalDeviceEventHandler+0x214>)
 800162a:	2205      	movs	r2, #5
 800162c:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 800162e:	f7ff fa17 	bl	8000a60 <EVENT_USB_Device_Suspend>
		break;
 8001632:	e000      	b.n	8001636 <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8001634:	bf00      	nop
	}
}
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000116d 	.word	0x2000116d
 8001640:	20000e20 	.word	0x20000e20
 8001644:	0800be6c 	.word	0x0800be6c
 8001648:	20000c20 	.word	0x20000c20
 800164c:	20000d20 	.word	0x20000d20

08001650 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	222c      	movs	r2, #44	; 0x2c
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 800166e:	4413      	add	r3, r2
 8001670:	3304      	adds	r3, #4
 8001672:	617b      	str	r3, [r7, #20]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8001674:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 8001676:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800167a:	74fb      	strb	r3, [r7, #19]
	temp_dir = device.CurrentDirection;
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 800167e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8001682:	74bb      	strb	r3, [r7, #18]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 800168e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 800169c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d013      	beq.n	80016ce <USBD_SignalEndpointEvent_Handler+0x7e>
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d03a      	beq.n	8001720 <USBD_SignalEndpointEvent_Handler+0xd0>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 808e 	bne.w	80017cc <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	8893      	ldrh	r3, [r2, #4]
 80016b4:	f36f 03c3 	bfc	r3, #3, #1
 80016b8:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 80016bc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d000      	beq.n	80016c6 <USBD_SignalEndpointEvent_Handler+0x76>
		case 0:
			USBD_HandleEP0_SETUP();
			break;
		default:
			break;
 80016c4:	e002      	b.n	80016cc <USBD_SignalEndpointEvent_Handler+0x7c>
			USBD_HandleEP0_SETUP();
 80016c6:	f7ff fe65 	bl	8001394 <USBD_HandleEP0_SETUP>
			break;
 80016ca:	bf00      	nop
		}
		break;
 80016cc:	e07e      	b.n	80017cc <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	8893      	ldrh	r3, [r2, #4]
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d110      	bne.n	8001702 <USBD_SignalEndpointEvent_Handler+0xb2>
			ep->OutOffset = 0; /* clear offset, new data is there */
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	7810      	ldrb	r0, [r2, #0]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	6911      	ldr	r1, [r2, #16]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	6952      	ldr	r2, [r2, #20]
 80016f8:	4798      	blx	r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	8893      	ldrh	r3, [r2, #4]
 8001706:	f36f 03c3 	bfc	r3, #3, #1
 800170a:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 800170e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001712:	2b00      	cmp	r3, #0
 8001714:	d000      	beq.n	8001718 <USBD_SignalEndpointEvent_Handler+0xc8>
		case 0:
			USBD_HandleEP0_OUT();
			break;
		default:
			break;
 8001716:	e002      	b.n	800171e <USBD_SignalEndpointEvent_Handler+0xce>
			USBD_HandleEP0_OUT();
 8001718:	f7ff fe12 	bl	8001340 <USBD_HandleEP0_OUT>
			break;
 800171c:	bf00      	nop
		}
		break;
 800171e:	e055      	b.n	80017cc <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2b00      	cmp	r3, #0
 8001726:	d017      	beq.n	8001758 <USBD_SignalEndpointEvent_Handler+0x108>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	7810      	ldrb	r0, [r2, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800173a:	4798      	blx	r3
 800173c:	60f8      	str	r0, [r7, #12]
			ep->InDataLeft -= data_count;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad2      	subs	r2, r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	441a      	add	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 8001756:	e041      	b.n	80017dc <USBD_SignalEndpointEvent_Handler+0x18c>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d120      	bne.n	80017a8 <USBD_SignalEndpointEvent_Handler+0x158>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01c      	beq.n	80017a8 <USBD_SignalEndpointEvent_Handler+0x158>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <USBD_SignalEndpointEvent_Handler+0x198>)
 8001774:	88d2      	ldrh	r2, [r2, #6]
 8001776:	b292      	uxth	r2, r2
 8001778:	4293      	cmp	r3, r2
 800177a:	d015      	beq.n	80017a8 <USBD_SignalEndpointEvent_Handler+0x158>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	8892      	ldrh	r2, [r2, #4]
 8001784:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	fbb3 f1f2 	udiv	r1, r3, r2
 800178e:	fb02 f201 	mul.w	r2, r2, r1
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <USBD_SignalEndpointEvent_Handler+0x158>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	7810      	ldrb	r0, [r2, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	8893      	ldrh	r3, [r2, #4]
 80017b2:	f36f 1304 	bfc	r3, #4, #1
 80017b6:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 80017ba:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d000      	beq.n	80017c4 <USBD_SignalEndpointEvent_Handler+0x174>
		case 0:
			USBD_HandleEP0_IN();
			break;
		default:
			break;
 80017c2:	e002      	b.n	80017ca <USBD_SignalEndpointEvent_Handler+0x17a>
			USBD_HandleEP0_IN();
 80017c4:	f7ff fd96 	bl	80012f4 <USBD_HandleEP0_IN>
			break;
 80017c8:	bf00      	nop
		}
		break;
 80017ca:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 80017ce:	7cfb      	ldrb	r3, [r7, #19]
 80017d0:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <USBD_SignalEndpointEvent_Handler+0x194>)
 80017d6:	7cbb      	ldrb	r3, [r7, #18]
 80017d8:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000e20 	.word	0x20000e20
 80017e8:	20001170 	.word	0x20001170

080017ec <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 80017f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017fc:	2100      	movs	r1, #0
 80017fe:	4829      	ldr	r0, [pc, #164]	; (80018a4 <USBD_Initialize+0xb8>)
 8001800:	f007 fab4 	bl	8008d6c <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <USBD_Initialize+0xbc>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <USBD_Initialize+0xb8>)
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <USBD_Initialize+0xc0>)
 800180e:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <USBD_Initialize+0xb8>)
 8001812:	2201      	movs	r2, #1
 8001814:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <USBD_Initialize+0xb8>)
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <USBD_Initialize+0xc4>)
 800181c:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <USBD_Initialize+0xb8>)
 8001820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <USBD_Initialize+0xb8>)
 8001828:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <USBD_Initialize+0xc8>)
 800182a:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <USBD_Initialize+0xb8>)
 800182e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001832:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <USBD_Initialize+0xb8>)
 8001836:	7913      	ldrb	r3, [r2, #4]
 8001838:	f36f 13c7 	bfc	r3, #7, #1
 800183c:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <USBD_Initialize+0xb8>)
 8001840:	7a13      	ldrb	r3, [r2, #8]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 8001848:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <USBD_Initialize+0xb8>)
 800184a:	7a13      	ldrb	r3, [r2, #8]
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <USBD_Initialize+0xb8>)
 8001854:	8913      	ldrh	r3, [r2, #8]
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	f361 138c 	bfi	r3, r1, #6, #7
 800185c:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <USBD_Initialize+0xb8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
 8001868:	4603      	mov	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <USBD_Initialize+0x8c>
		return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001876:	e011      	b.n	800189c <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <USBD_Initialize+0xb8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	2100      	movs	r1, #0
 8001882:	2000      	movs	r0, #0
 8001884:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <USBD_Initialize+0xb8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4798      	blx	r3
		return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001898:	e000      	b.n	800189c <USBD_Initialize+0xb0>
	}

	return 0;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000e20 	.word	0x20000e20
 80018a8:	2000116d 	.word	0x2000116d
 80018ac:	0800be6c 	.word	0x0800be6c
 80018b0:	20000c20 	.word	0x20000c20
 80018b4:	20000d20 	.word	0x20000d20

080018b8 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <USB_IsEnumDone+0x1c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	4798      	blx	r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <USB_IsEnumDone+0x16>
		return 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <USB_IsEnumDone+0x18>
	else
		return 0;
 80018ce:	2300      	movs	r3, #0
 }
 80018d0:	4618      	mov	r0, r3
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000e20 	.word	0x20000e20

080018d8 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	4613      	mov	r3, r2
 80018e6:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	da12      	bge.n	800191e <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	4a15      	ldr	r2, [pc, #84]	; (8001950 <USBD_SetEndpointBuffer+0x78>)
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3320      	adds	r3, #32
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	88ba      	ldrh	r2, [r7, #4]
 800190e:	4910      	ldr	r1, [pc, #64]	; (8001950 <USBD_SetEndpointBuffer+0x78>)
 8001910:	202c      	movs	r0, #44	; 0x2c
 8001912:	fb00 f303 	mul.w	r3, r0, r3
 8001916:	440b      	add	r3, r1
 8001918:	3324      	adds	r3, #36	; 0x24
 800191a:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 800191c:	e011      	b.n	8001942 <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <USBD_SetEndpointBuffer+0x78>)
 8001922:	212c      	movs	r1, #44	; 0x2c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3314      	adds	r3, #20
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	88ba      	ldrh	r2, [r7, #4]
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <USBD_SetEndpointBuffer+0x78>)
 8001936:	202c      	movs	r0, #44	; 0x2c
 8001938:	fb00 f303 	mul.w	r3, r0, r3
 800193c:	440b      	add	r3, r1
 800193e:	3318      	adds	r3, #24
 8001940:	601a      	str	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000e20 	.word	0x20000e20

08001954 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e01c      	b.n	80019a0 <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <XMC_USBD_lDeviceActive+0x64>)
 800196a:	2134      	movs	r1, #52	; 0x34
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10b      	bne.n	8001996 <XMC_USBD_lDeviceActive+0x42>
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <XMC_USBD_lDeviceActive+0x64>)
 8001982:	2134      	movs	r1, #52	; 0x34
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 8001996:	2301      	movs	r3, #1
 8001998:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	3301      	adds	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7b1b      	ldrb	r3, [r3, #12]
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3dd      	bcc.n	8001966 <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000f64 	.word	0x20000f64

080019bc <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2234      	movs	r2, #52	; 0x34
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <XMC_USBD_lReadFifo+0xe4>)
 80019d0:	4413      	add	r3, r2
 80019d2:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 80019d4:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <XMC_USBD_lReadFifo+0xe4>)
 80019d6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 80019dc:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <XMC_USBD_lReadFifo+0xe4>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3370      	adds	r3, #112	; 0x70
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 80019f8:	7b7b      	ldrb	r3, [r7, #13]
 80019fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d047      	beq.n	8001a94 <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d043      	beq.n	8001a94 <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e00a      	b.n	8001a28 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d3f0      	bcc.n	8001a12 <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d021      	beq.n	8001a7c <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	e015      	b.n	8001a70 <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	22ff      	movs	r2, #255	; 0xff
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	fa22 f003 	lsr.w	r0, r2, r3
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	440b      	add	r3, r1
 8001a64:	4413      	add	r3, r2
 8001a66:	b2c2      	uxtb	r2, r0
 8001a68:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	4413      	add	r3, r2
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8e3      	bhi.n	8001a44 <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	441a      	add	r2, r3
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	441a      	add	r2, r3
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001a94:	bf00      	nop
 8001a96:	372c      	adds	r7, #44	; 0x2c
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	20000f64 	.word	0x20000f64

08001aa4 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <XMC_USBD_lWriteFifo+0xa0>)
 8001ab8:	3378      	adds	r3, #120	; 0x78
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <XMC_USBD_lWriteFifo+0xa0>)
 8001acc:	336a      	adds	r3, #106	; 0x6a
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e023      	b.n	8001b36 <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3303      	adds	r3, #3
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8001af6:	893b      	ldrh	r3, [r7, #8]
 8001af8:	461a      	mov	r2, r3
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d904      	bls.n	8001b0a <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8001b00:	893b      	ldrh	r3, [r7, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e00c      	b.n	8001b2a <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	601a      	str	r2, [r3, #0]
      i++;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	1d1a      	adds	r2, r3, #4
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3ee      	bcc.n	8001b10 <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	617b      	str	r3, [r7, #20]
  }
  return result;
 8001b36:	697b      	ldr	r3, [r7, #20]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3724      	adds	r7, #36	; 0x24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000f64 	.word	0x20000f64

08001b48 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f043 0320 	orr.w	r3, r3, #32
 8001b5c:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f362 138a 	bfi	r3, r2, #6, #5
 8001b6c:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <XMC_USBD_lFlushTXFifo+0x78>)
 8001b70:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e002      	b.n	8001b84 <XMC_USBD_lFlushTXFifo+0x3c>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3301      	adds	r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b8a:	d3f8      	bcc.n	8001b7e <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <XMC_USBD_lFlushTXFifo+0x78>)
 8001b8e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f4      	bne.n	8001b8c <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8001ba6:	bf00      	nop
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60fa      	str	r2, [r7, #12]
 8001bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb2:	d3f9      	bcc.n	8001ba8 <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20000f64 	.word	0x20000f64

08001bc4 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f043 0310 	orr.w	r3, r3, #16
 8001bd4:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <XMC_USBD_lFlushRXFifo+0x64>)
 8001bd8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	e002      	b.n	8001bec <XMC_USBD_lFlushRXFifo+0x28>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3301      	adds	r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bf2:	d3f8      	bcc.n	8001be6 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <XMC_USBD_lFlushRXFifo+0x64>)
 8001bf6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ea      	bne.n	8001be0 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8001c0e:	bf00      	nop
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1a:	d3f9      	bcc.n	8001c10 <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	20000f64 	.word	0x20000f64

08001c2c <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 8001c32:	2301      	movs	r3, #1
 8001c34:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001c3e:	e005      	b.n	8001c4c <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	80fb      	strh	r3, [r7, #6]
    i++;
 8001c46:	797b      	ldrb	r3, [r7, #5]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001c4c:	797b      	ldrb	r3, [r7, #5]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d807      	bhi.n	8001c62 <XMC_USBD_lAssignTXFifo+0x36>
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001c54:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ee      	bne.n	8001c40 <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001c64:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001c74:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001c80:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8001c84:	797b      	ldrb	r3, [r7, #5]
 8001c86:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8001c88:	793b      	ldrb	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000f64 	.word	0x20000f64

08001c9c <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <XMC_USBD_lUnassignFifo+0x34>)
 8001ca8:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <XMC_USBD_lUnassignFifo+0x34>)
 8001cc0:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	20000f64 	.word	0x20000f64

08001cd4 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6892      	ldr	r2, [r2, #8]
 8001cee:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d909      	bls.n	8001d0a <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6892      	ldr	r2, [r2, #8]
 8001cfe:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001d02:	441a      	add	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
 8001d08:	e003      	b.n	8001d12 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d118      	bne.n	8001d52 <XMC_USBD_lStartReadXfer+0x7e>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	7893      	ldrb	r3, [r2, #2]
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	f361 03c4 	bfi	r3, r1, #3, #2
 8001d30:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	78d3      	ldrb	r3, [r2, #3]
 8001d36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d3a:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d44:	b2d9      	uxtb	r1, r3
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	7813      	ldrb	r3, [r2, #0]
 8001d4a:	f361 0306 	bfi	r3, r1, #0, #7
 8001d4e:	7013      	strb	r3, [r2, #0]
 8001d50:	e032      	b.n	8001db8 <XMC_USBD_lStartReadXfer+0xe4>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <XMC_USBD_lStartReadXfer+0x9a>
    {
      data.b.xfersize = 0U;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f36f 0312 	bfc	r3, #0, #19
 8001d60:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8001d62:	8a7b      	ldrh	r3, [r7, #18]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f362 03cc 	bfi	r3, r2, #3, #10
 8001d6a:	827b      	strh	r3, [r7, #18]
 8001d6c:	e024      	b.n	8001db8 <XMC_USBD_lStartReadXfer+0xe4>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6852      	ldr	r2, [r2, #4]
 8001d7c:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b01      	subs	r3, #1
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6852      	ldr	r2, [r2, #4]
 8001d8a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	8a7b      	ldrh	r3, [r7, #18]
 8001d9c:	f362 03cc 	bfi	r3, r2, #3, #10
 8001da0:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f362 0312 	bfi	r3, r2, #0, #19
 8001db6:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001db8:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <XMC_USBD_lStartReadXfer+0x170>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	7b5b      	ldrb	r3, [r3, #13]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <XMC_USBD_lStartReadXfer+0x10a>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <XMC_USBD_lStartReadXfer+0x174>)
 8001dd2:	3370      	adds	r3, #112	; 0x70
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	460a      	mov	r2, r1
 8001ddc:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <XMC_USBD_lStartReadXfer+0x174>)
 8001dea:	3370      	adds	r3, #112	; 0x70
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <XMC_USBD_lStartReadXfer+0x174>)
 8001e02:	3370      	adds	r3, #112	; 0x70
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <XMC_USBD_lStartReadXfer+0x174>)
 8001e2a:	3370      	adds	r3, #112	; 0x70
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000f60 	.word	0x20000f60
 8001e48:	20000f64 	.word	0x20000f64

08001e4c <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <XMC_USBD_lStartWriteXfer+0x190>)
 8001e64:	336a      	adds	r3, #106	; 0x6a
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6892      	ldr	r2, [r2, #8]
 8001e7c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d204      	bcs.n	8001e8e <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e8c:	e008      	b.n	8001ea0 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6892      	ldr	r2, [r2, #8]
 8001e96:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001e9a:	441a      	add	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f36f 0312 	bfc	r3, #0, #19
 8001eae:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f362 03cc 	bfi	r3, r2, #3, #10
 8001eb8:	81fb      	strh	r3, [r7, #14]
 8001eba:	e06b      	b.n	8001f94 <XMC_USBD_lStartWriteXfer+0x148>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d110      	bne.n	8001eec <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f362 03cc 	bfi	r3, r2, #3, #10
 8001ed2:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f362 0312 	bfi	r3, r2, #0, #19
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e02a      	b.n	8001f42 <XMC_USBD_lStartWriteXfer+0xf6>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f362 0312 	bfi	r3, r2, #0, #19
 8001f00:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6852      	ldr	r2, [r2, #4]
 8001f2a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001f2e:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	f362 03cc 	bfi	r3, r2, #3, #10
 8001f40:	81fb      	strh	r3, [r7, #14]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <XMC_USBD_lStartWriteXfer+0x194>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	7b5b      	ldrb	r3, [r3, #13]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <XMC_USBD_lStartWriteXfer+0x190>)
 8001f5c:	336a      	adds	r3, #106	; 0x6a
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	460a      	mov	r2, r1
 8001f64:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <XMC_USBD_lStartWriteXfer+0x194>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	7b5b      	ldrb	r3, [r3, #13]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d111      	bne.n	8001f94 <XMC_USBD_lStartWriteXfer+0x148>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <XMC_USBD_lStartWriteXfer+0x190>)
 8001f72:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	2301      	movs	r3, #1
 8001f86:	fa03 f202 	lsl.w	r2, r3, r2
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <XMC_USBD_lStartWriteXfer+0x190>)
 8001f8c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f90:	430a      	orrs	r2, r1
 8001f92:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <XMC_USBD_lStartWriteXfer+0x190>)
 8001fa0:	336a      	adds	r3, #106	; 0x6a
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb0:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <XMC_USBD_lStartWriteXfer+0x190>)
 8001fc6:	336a      	adds	r3, #106	; 0x6a
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	20000f64 	.word	0x20000f64
 8001fe0:	20000f60 	.word	0x20000f60

08001fe4 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 8001fee:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 8001ff6:	7d3b      	ldrb	r3, [r7, #20]
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002000:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	e01a      	b.n	8002044 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 800200e:	4a48      	ldr	r2, [pc, #288]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	3370      	adds	r3, #112	; 0x70
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 800201e:	7efb      	ldrb	r3, [r7, #27]
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 8002026:	7ebb      	ldrb	r3, [r7, #26]
 8002028:	f36f 1345 	bfc	r3, #5, #1
 800202c:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 800202e:	4a40      	ldr	r2, [pc, #256]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3370      	adds	r3, #112	; 0x70
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b06      	cmp	r3, #6
 8002048:	d9e1      	bls.n	800200e <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 800204c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8002058:	2310      	movs	r3, #16
 800205a:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 800205c:	2340      	movs	r3, #64	; 0x40
 800205e:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8002060:	4b33      	ldr	r3, [pc, #204]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002062:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e011      	b.n	8002094 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3304      	adds	r3, #4
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	089a      	lsrs	r2, r3, #2
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 800207a:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b01      	subs	r3, #1
 8002082:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002086:	3340      	adds	r3, #64	; 0x40
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3301      	adds	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d9ea      	bls.n	8002070 <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 800209a:	2010      	movs	r0, #16
 800209c:	f7ff fd54 	bl	8001b48 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fd51 	bl	8001b48 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80020a6:	f7ff fd8d 	bl	8001bc4 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 80020ae:	7b3b      	ldrb	r3, [r7, #12]
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 80020c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 80020c8:	200f      	movs	r0, #15
 80020ca:	f000 fbfd 	bl	80028c8 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 80020ce:	200f      	movs	r0, #15
 80020d0:	f000 fc12 	bl	80028f8 <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 80020d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 80020de:	893b      	ldrh	r3, [r7, #8]
 80020e0:	f36f 130a 	bfc	r3, #4, #7
 80020e4:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 80020e8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7b5b      	ldrb	r3, [r3, #13]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d104      	bne.n	8002102 <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 80020fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80020fe:	2200      	movs	r2, #0
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002104:	6853      	ldr	r3, [r2, #4]
 8002106:	f36f 1304 	bfc	r3, #4, #1
 800210a:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 800210c:	4a08      	ldr	r2, [pc, #32]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 800210e:	6853      	ldr	r3, [r2, #4]
 8002110:	f36f 03c3 	bfc	r3, #3, #1
 8002114:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <XMC_USBD_lHandleUSBReset+0x14c>)
 8002118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800211c:	2004      	movs	r0, #4
 800211e:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8002120:	2004      	movs	r0, #4
 8002122:	f000 fb25 	bl	8002770 <XMC_USBD_ClearEvent>
}
 8002126:	bf00      	nop
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000f64 	.word	0x20000f64

08002134 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <XMC_USBD_lHandleOTGInt+0x44>)
 800213c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8002144:	793b      	ldrb	r3, [r7, #4]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00b      	beq.n	8002168 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <XMC_USBD_lHandleOTGInt+0x44>)
 8002152:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8002156:	f36f 0382 	bfc	r3, #2, #1
 800215a:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <XMC_USBD_lHandleOTGInt+0x44>)
 8002160:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002164:	2001      	movs	r0, #1
 8002166:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fb66 	bl	800283c <XMC_USBD_lClearEventOTG>

}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000f64 	.word	0x20000f64

0800217c <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <XMC_USBD_lHandleEnumDone+0x74>)
 8002184:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 800218c:	88bb      	ldrh	r3, [r7, #4]
 800218e:	f36f 030a 	bfc	r3, #0, #11
 8002192:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <XMC_USBD_lHandleEnumDone+0x74>)
 8002196:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 800219e:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <XMC_USBD_lHandleEnumDone+0x74>)
 80021a0:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 80021ac:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <XMC_USBD_lHandleEnumDone+0x74>)
 80021ae:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <XMC_USBD_lHandleEnumDone+0x74>)
 80021bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021c0:	2002      	movs	r0, #2
 80021c2:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <XMC_USBD_lHandleEnumDone+0x74>)
 80021c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 80021ce:	787b      	ldrb	r3, [r7, #1]
 80021d0:	2209      	movs	r2, #9
 80021d2:	f362 0385 	bfi	r3, r2, #2, #4
 80021d6:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <XMC_USBD_lHandleEnumDone+0x74>)
 80021da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 80021e2:	200b      	movs	r0, #11
 80021e4:	f000 fac4 	bl	8002770 <XMC_USBD_ClearEvent>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000f64 	.word	0x20000f64

080021f4 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 80021fe:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8002206:	4b69      	ldr	r3, [pc, #420]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002208:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8002210:	4b66      	ldr	r3, [pc, #408]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002212:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 800221a:	8bfa      	ldrh	r2, [r7, #30]
 800221c:	8b7b      	ldrh	r3, [r7, #26]
 800221e:	4013      	ands	r3, r2
 8002220:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 800222c:	e0ae      	b.n	800238c <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 800222e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002234:	fa42 f303 	asr.w	r3, r2, r3
 8002238:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 800223a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8002242:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 809c 	beq.w	8002382 <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 800224a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800224e:	2234      	movs	r2, #52	; 0x34
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	4a55      	ldr	r2, [pc, #340]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002256:	4413      	add	r3, r2
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 800225a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800225e:	4a53      	ldr	r2, [pc, #332]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 8002260:	3370      	adds	r3, #112	; 0x70
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7b5b      	ldrb	r3, [r3, #13]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d108      	bne.n	800228a <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8002278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800227c:	4a4b      	ldr	r2, [pc, #300]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 800227e:	3370      	adds	r3, #112	; 0x70
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 800228a:	7c3b      	ldrb	r3, [r7, #16]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d033      	beq.n	80022fe <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	7913      	ldrb	r3, [r2, #4]
 800229a:	f36f 1345 	bfc	r3, #5, #1
 800229e:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7b5b      	ldrb	r3, [r3, #13]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10e      	bne.n	80022c6 <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	78db      	ldrb	r3, [r3, #3]
 80022ae:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80022b6:	4613      	mov	r3, r2
 80022b8:	075b      	lsls	r3, r3, #29
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	f103 0218 	add.w	r2, r3, #24
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7b5b      	ldrb	r3, [r3, #13]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d106      	bne.n	80022dc <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	441a      	add	r2, r3
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 80022dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022de:	6853      	ldr	r3, [r2, #4]
 80022e0:	f36f 1304 	bfc	r3, #4, #1
 80022e4:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 80022e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022ec:	2100      	movs	r1, #0
 80022ee:	2000      	movs	r0, #0
 80022f0:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 80022f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022f6:	4619      	mov	r1, r3
 80022f8:	2008      	movs	r0, #8
 80022fa:	f000 facd 	bl	8002898 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 80022fe:	7c3b      	ldrb	r3, [r7, #16]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d034      	beq.n	8002374 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7b5b      	ldrb	r3, [r3, #13]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d115      	bne.n	800233e <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	441a      	add	r2, r3
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	441a      	add	r2, r3
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	429a      	cmp	r2, r3
 8002348:	d111      	bne.n	800236e <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	6853      	ldr	r3, [r2, #4]
 8002356:	f36f 1304 	bfc	r3, #4, #1
 800235a:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <XMC_USBD_lHandleOEPInt+0x1b8>)
 800235e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002362:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002366:	2101      	movs	r1, #1
 8002368:	4610      	mov	r0, r2
 800236a:	4798      	blx	r3
 800236c:	e002      	b.n	8002374 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 800236e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002370:	f7ff fcb0 	bl	8001cd4 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fa8b 	bl	8002898 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8002382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002386:	3301      	adds	r3, #1
 8002388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 800238c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800238e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002392:	fa42 f303 	asr.w	r3, r2, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f af49 	bne.w	800222e <XMC_USBD_lHandleOEPInt+0x3a>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 800239c:	200d      	movs	r0, #13
 800239e:	f000 f9e7 	bl	8002770 <XMC_USBD_ClearEvent>
}
 80023a2:	bf00      	nop
 80023a4:	3730      	adds	r7, #48	; 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000f64 	.word	0x20000f64

080023b0 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 80023b8:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 80023ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 80023c2:	4b69      	ldr	r3, [pc, #420]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 80023c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 80023d0:	8abb      	ldrh	r3, [r7, #20]
 80023d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 80023da:	e0b6      	b.n	800254a <XMC_USBD_lHandleIEPInt+0x19a>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 80023dc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80023de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e2:	fa42 f303 	asr.w	r3, r2, r3
 80023e6:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 80023e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 80023f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80a4 	beq.w	8002540 <XMC_USBD_lHandleIEPInt+0x190>
    {
      ep = &xmc_device.ep[ep_num];
 80023f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023fc:	2234      	movs	r2, #52	; 0x34
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a59      	ldr	r2, [pc, #356]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8002404:	4413      	add	r3, r2
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8002408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240c:	4a56      	ldr	r2, [pc, #344]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800240e:	336a      	adds	r3, #106	; 0x6a
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800241a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 800242c:	01db      	lsls	r3, r3, #7
 800242e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7b5b      	ldrb	r3, [r3, #13]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <XMC_USBD_lHandleIEPInt+0xa4>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8002444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002448:	4a47      	ldr	r2, [pc, #284]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800244a:	336a      	adds	r3, #106	; 0x6a
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7b5b      	ldrb	r3, [r3, #13]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d115      	bne.n	8002488 <XMC_USBD_lHandleIEPInt+0xd8>
      {
        if (diepint.b.emptyintr)
 800245c:	7b3b      	ldrb	r3, [r7, #12]
 800245e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00f      	beq.n	8002488 <XMC_USBD_lHandleIEPInt+0xd8>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8002468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800246a:	f7ff fb1b 	bl	8001aa4 <XMC_USBD_lWriteFifo>
 800246e:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	441a      	add	r2, r3
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	441a      	add	r2, r3
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8002488:	7b3b      	ldrb	r3, [r7, #12]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d04e      	beq.n	8002532 <XMC_USBD_lHandleIEPInt+0x182>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7b5b      	ldrb	r3, [r3, #13]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11d      	bne.n	80024d8 <XMC_USBD_lHandleIEPInt+0x128>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 800249c:	897a      	ldrh	r2, [r7, #10]
 800249e:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80024a2:	4013      	ands	r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <XMC_USBD_lHandleIEPInt+0x128>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <XMC_USBD_lHandleIEPInt+0x128>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	441a      	add	r2, r3
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	441a      	add	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d123      	bne.n	800252c <XMC_USBD_lHandleIEPInt+0x17c>
        {
          ep->inInUse = 0U;
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	6853      	ldr	r3, [r2, #4]
 80024e8:	f36f 03c3 	bfc	r3, #3, #1
 80024ec:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7b5b      	ldrb	r3, [r3, #13]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d10e      	bne.n	8002514 <XMC_USBD_lHandleIEPInt+0x164>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 80024f8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80024fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002502:	2201      	movs	r2, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43da      	mvns	r2, r3
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800250c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8002510:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8002516:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800251a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800251e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	2102      	movs	r1, #2
 8002526:	4610      	mov	r0, r2
 8002528:	4798      	blx	r3
 800252a:	e002      	b.n	8002532 <XMC_USBD_lHandleIEPInt+0x182>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 800252c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800252e:	f7ff fc8d 	bl	8001e4c <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f994 	bl	8002868 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8002540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002544:	3301      	adds	r3, #1
 8002546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 800254a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800254c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002550:	fa42 f303 	asr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f af41 	bne.w	80023dc <XMC_USBD_lHandleIEPInt+0x2c>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 800255a:	200e      	movs	r0, #14
 800255c:	f000 f908 	bl	8002770 <XMC_USBD_ClearEvent>
}
 8002560:	bf00      	nop
 8002562:	3730      	adds	r7, #48	; 0x30
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000f64 	.word	0x20000f64

0800256c <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <XMC_USBD_lHandleRxFLvl+0x80>)
 8002574:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	2b05      	cmp	r3, #5
 8002588:	d82a      	bhi.n	80025e0 <XMC_USBD_lHandleRxFLvl+0x74>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <XMC_USBD_lHandleRxFLvl+0x24>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080025a9 	.word	0x080025a9
 8002598:	080025e1 	.word	0x080025e1
 800259c:	080025e1 	.word	0x080025e1
 80025a0:	080025e1 	.word	0x080025e1
 80025a4:	080025c5 	.word	0x080025c5
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80025a8:	793b      	ldrb	r3, [r7, #4]
 80025aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	88bb      	ldrh	r3, [r7, #4]
 80025b4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7ff f9fd 	bl	80019bc <XMC_USBD_lReadFifo>
      break;
 80025c2:	e00e      	b.n	80025e2 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80025c4:	793b      	ldrb	r3, [r7, #4]
 80025c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	88bb      	ldrh	r3, [r7, #4]
 80025d0:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7ff f9ef 	bl	80019bc <XMC_USBD_lReadFifo>
      break;
 80025de:	e000      	b.n	80025e2 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 80025e0:	bf00      	nop
	}
  /* no need to clear */
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000f64 	.word	0x20000f64

080025f0 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 80025fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8002602:	4b4e      	ldr	r3, [pc, #312]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 8002604:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8002610:	7a3b      	ldrb	r3, [r7, #8]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 800261e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002622:	2009      	movs	r0, #9
 8002624:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8002626:	2009      	movs	r0, #9
 8002628:	f000 f8a2 	bl	8002770 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7b5b      	ldrb	r3, [r3, #13]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d119      	bne.n	8002668 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8002634:	7a3b      	ldrb	r3, [r7, #8]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8002640:	7b3b      	ldrb	r3, [r7, #12]
 8002642:	f36f 1304 	bfc	r3, #4, #1
 8002646:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8002648:	4b3c      	ldr	r3, [pc, #240]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 800264a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8002652:	f7ff ff8b 	bl	800256c <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8002656:	7b3b      	ldrb	r3, [r7, #12]
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 8002660:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8002668:	7a7b      	ldrb	r3, [r7, #9]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8002674:	200a      	movs	r0, #10
 8002676:	f000 f87b 	bl	8002770 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 800267a:	7a7b      	ldrb	r3, [r7, #9]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 8002688:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800268c:	2006      	movs	r0, #6
 800268e:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8002690:	2006      	movs	r0, #6
 8002692:	f000 f86d 	bl	8002770 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8002696:	7afb      	ldrb	r3, [r7, #11]
 8002698:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 80026a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a8:	2008      	movs	r0, #8
 80026aa:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80026ac:	2008      	movs	r0, #8
 80026ae:	f000 f85f 	bl	8002770 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 80026be:	4a1f      	ldr	r2, [pc, #124]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 80026c0:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <XMC_USBD_IRQHandler+0x14c>)
 80026ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026d2:	2000      	movs	r0, #0
 80026d4:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 f84a 	bl	8002770 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 80026dc:	7a7b      	ldrb	r3, [r7, #9]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fc7b 	bl	8001fe4 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 80026ee:	7a7b      	ldrb	r3, [r7, #9]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 80026fa:	f7ff fd3f 	bl	800217c <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 80026fe:	7abb      	ldrb	r3, [r7, #10]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fe50 	bl	80023b0 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8002710:	7abb      	ldrb	r3, [r7, #10]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff fd69 	bl	80021f4 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 8002722:	7a3b      	ldrb	r3, [r7, #8]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 800272e:	f7ff fd01 	bl	8002134 <XMC_USBD_lHandleOTGInt>
  }

}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000f64 	.word	0x20000f64

08002740 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <XMC_USBD_Enable+0x14>)
 8002746:	f002 fa55 	bl	8004bf4 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 800274a:	f002 fe39 	bl	80053c0 <XMC_SCU_POWER_EnableUsb>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000080 	.word	0x20000080

08002758 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 800275c:	4803      	ldr	r0, [pc, #12]	; (800276c <XMC_USBD_Disable+0x14>)
 800275e:	f002 fa2b 	bl	8004bb8 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8002762:	f002 fe3b 	bl	80053dc <XMC_SCU_POWER_DisableUsb>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000080 	.word	0x20000080

08002770 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  switch(event)
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b0d      	cmp	r3, #13
 8002782:	d84c      	bhi.n	800281e <XMC_USBD_ClearEvent+0xae>
 8002784:	a201      	add	r2, pc, #4	; (adr r2, 800278c <XMC_USBD_ClearEvent+0x1c>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027c5 	.word	0x080027c5
 8002790:	0800281f 	.word	0x0800281f
 8002794:	0800281f 	.word	0x0800281f
 8002798:	0800281f 	.word	0x0800281f
 800279c:	080027cf 	.word	0x080027cf
 80027a0:	0800281f 	.word	0x0800281f
 80027a4:	080027d9 	.word	0x080027d9
 80027a8:	080027e3 	.word	0x080027e3
 80027ac:	080027ed 	.word	0x080027ed
 80027b0:	080027f7 	.word	0x080027f7
 80027b4:	08002801 	.word	0x08002801
 80027b8:	0800280b 	.word	0x0800280b
 80027bc:	0800281f 	.word	0x0800281f
 80027c0:	08002815 	.word	0x08002815
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ca:	73fb      	strb	r3, [r7, #15]
	  break;
 80027cc:	e028      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	737b      	strb	r3, [r7, #13]
	  break;
 80027d6:	e023      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 80027d8:	7b7b      	ldrb	r3, [r7, #13]
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	737b      	strb	r3, [r7, #13]
	  break;
 80027e0:	e01e      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	73fb      	strb	r3, [r7, #15]
	  break;
 80027ea:	e019      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f2:	73fb      	strb	r3, [r7, #15]
	  break;
 80027f4:	e014      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 80027f6:	7b3b      	ldrb	r3, [r7, #12]
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	733b      	strb	r3, [r7, #12]
	  break;
 80027fe:	e00f      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8002800:	7b7b      	ldrb	r3, [r7, #13]
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	737b      	strb	r3, [r7, #13]
	  break;
 8002808:	e00a      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	737b      	strb	r3, [r7, #13]
	  break;
 8002812:	e005      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8002814:	7bbb      	ldrb	r3, [r7, #14]
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	73bb      	strb	r3, [r7, #14]
	  break;
 800281c:	e000      	b.n	8002820 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 800281e:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <XMC_USBD_ClearEvent+0xc8>)
 8002822:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	615a      	str	r2, [r3, #20]
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000f64 	.word	0x20000f64

0800283c <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <XMC_USBD_lClearEventOTG+0x28>)
 800284e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000f64 	.word	0x20000f64

08002868 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	4a06      	ldr	r2, [pc, #24]	; (8002894 <XMC_USBD_ClearEventINEP+0x2c>)
 800287c:	336a      	adds	r3, #106	; 0x6a
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	609a      	str	r2, [r3, #8]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000f64 	.word	0x20000f64

08002898 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <XMC_USBD_ClearEventOUTEP+0x2c>)
 80028ac:	3370      	adds	r3, #112	; 0x70
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	20000f64 	.word	0x20000f64

080028c8 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <XMC_USBD_EnableEventOUTEP+0x2c>)
 80028d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028da:	6959      	ldr	r1, [r3, #20]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <XMC_USBD_EnableEventOUTEP+0x2c>)
 80028e0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80028e4:	430a      	orrs	r2, r1
 80028e6:	615a      	str	r2, [r3, #20]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	20000f64 	.word	0x20000f64

080028f8 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <XMC_USBD_EnableEventINEP+0x2c>)
 8002906:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800290a:	6919      	ldr	r1, [r3, #16]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <XMC_USBD_EnableEventINEP+0x2c>)
 8002910:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002914:	430a      	orrs	r2, r1
 8002916:	611a      	str	r2, [r3, #16]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20000f64 	.word	0x20000f64

08002928 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8002932:	793b      	ldrb	r3, [r7, #4]
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 800293a:	793b      	ldrb	r3, [r7, #4]
 800293c:	f043 0308 	orr.w	r3, r3, #8
 8002940:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 8002942:	793b      	ldrb	r3, [r7, #4]
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 800294a:	793b      	ldrb	r3, [r7, #4]
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 8002952:	793b      	ldrb	r3, [r7, #4]
 8002954:	f36f 1345 	bfc	r3, #5, #1
 8002958:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 800295a:	797b      	ldrb	r3, [r7, #5]
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8002962:	793b      	ldrb	r3, [r7, #4]
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 800296a:	793b      	ldrb	r3, [r7, #4]
 800296c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002970:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8002972:	793b      	ldrb	r3, [r7, #4]
 8002974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002978:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f36f 235f 	bfc	r3, #9, #23
 8002980:	607b      	str	r3, [r7, #4]
  return cap;
 8002982:	687b      	ldr	r3, [r7, #4]
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 8002998:	f7ff fed2 	bl	8002740 <XMC_USBD_Enable>
  
  usbd_init = obj;
 800299c:	4a87      	ldr	r2, [pc, #540]	; (8002bbc <XMC_USBD_Init+0x22c>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	e00c      	b.n	80029c2 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80029a8:	4a85      	ldr	r2, [pc, #532]	; (8002bc0 <XMC_USBD_Init+0x230>)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2140      	movs	r1, #64	; 0x40
 80029ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80029b2:	4a84      	ldr	r2, [pc, #528]	; (8002bc4 <XMC_USBD_Init+0x234>)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	2140      	movs	r1, #64	; 0x40
 80029b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3301      	adds	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d9ef      	bls.n	80029a8 <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80029c8:	f44f 7202 	mov.w	r2, #520	; 0x208
 80029cc:	2100      	movs	r1, #0
 80029ce:	487e      	ldr	r0, [pc, #504]	; (8002bc8 <XMC_USBD_Init+0x238>)
 80029d0:	f006 f9cc 	bl	8008d6c <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a7b      	ldr	r2, [pc, #492]	; (8002bc8 <XMC_USBD_Init+0x238>)
 80029da:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4a79      	ldr	r2, [pc, #484]	; (8002bc8 <XMC_USBD_Init+0x238>)
 80029e4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <XMC_USBD_Init+0x238>)
 80029f4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fe:	4a72      	ldr	r2, [pc, #456]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002a00:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
 8002a08:	e00c      	b.n	8002a24 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	3348      	adds	r3, #72	; 0x48
 8002a0e:	015b      	lsls	r3, r3, #5
 8002a10:	6a3a      	ldr	r2, [r7, #32]
 8002a12:	441a      	add	r2, r3
 8002a14:	496c      	ldr	r1, [pc, #432]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	336a      	adds	r3, #106	; 0x6a
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	3301      	adds	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d9ef      	bls.n	8002a0a <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e00d      	b.n	8002a4c <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	3358      	adds	r3, #88	; 0x58
 8002a34:	015b      	lsls	r3, r3, #5
 8002a36:	6a3a      	ldr	r2, [r7, #32]
 8002a38:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8002a3a:	4963      	ldr	r1, [pc, #396]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	3370      	adds	r3, #112	; 0x70
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	3301      	adds	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d9ee      	bls.n	8002a30 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	e00c      	b.n	8002a72 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	031b      	lsls	r3, r3, #12
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8002a62:	4959      	ldr	r1, [pc, #356]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	3378      	adds	r3, #120	; 0x78
 8002a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	3301      	adds	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d9ef      	bls.n	8002a58 <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002a7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8002a82:	7f3b      	ldrb	r3, [r7, #28]
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8002a8a:	7f3b      	ldrb	r3, [r7, #28]
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a90:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7b5b      	ldrb	r3, [r3, #13]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8002a9a:	7f3b      	ldrb	r3, [r7, #28]
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	773b      	strb	r3, [r7, #28]
 8002aa2:	e003      	b.n	8002aac <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8002aa4:	7f3b      	ldrb	r3, [r7, #28]
 8002aa6:	f36f 1345 	bfc	r3, #5, #1
 8002aaa:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002aae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8002ab6:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002ab8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8002ac0:	7efb      	ldrb	r3, [r7, #27]
 8002ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac6:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8002ac8:	7e7b      	ldrb	r3, [r7, #25]
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002ad2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002adc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8002ae4:	7d3b      	ldrb	r3, [r7, #20]
 8002ae6:	f043 0303 	orr.w	r3, r3, #3
 8002aea:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8002aec:	7dbb      	ldrb	r3, [r7, #22]
 8002aee:	f36f 13c7 	bfc	r3, #7, #1
 8002af2:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002af6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8002afe:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002b00:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8002b08:	7c3b      	ldrb	r3, [r7, #16]
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002b12:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8002b1a:	2010      	movs	r0, #16
 8002b1c:	f7ff f814 	bl	8001b48 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8002b20:	f7ff f850 	bl	8001bc4 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002b26:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8002b2e:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002b30:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b38:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 8002b3e:	7b3b      	ldrb	r3, [r7, #12]
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 8002b46:	7b3b      	ldrb	r3, [r7, #12]
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b54:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 8002b56:	7b7b      	ldrb	r3, [r7, #13]
 8002b58:	f043 0310 	orr.w	r3, r3, #16
 8002b5c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 8002b5e:	7b7b      	ldrb	r3, [r7, #13]
 8002b60:	f043 0320 	orr.w	r3, r3, #32
 8002b64:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 8002b66:	7b7b      	ldrb	r3, [r7, #13]
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 8002b6e:	7b7b      	ldrb	r3, [r7, #13]
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7c:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 8002b7e:	7b3b      	ldrb	r3, [r7, #12]
 8002b80:	f043 0308 	orr.w	r3, r3, #8
 8002b84:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7b5b      	ldrb	r3, [r3, #13]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d103      	bne.n	8002b96 <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8002b8e:	7b3b      	ldrb	r3, [r7, #12]
 8002b90:	f043 0310 	orr.w	r3, r3, #16
 8002b94:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8002b9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <XMC_USBD_Init+0x238>)
 8002ba8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3728      	adds	r7, #40	; 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000f60 	.word	0x20000f60
 8002bc0:	20000a98 	.word	0x20000a98
 8002bc4:	20000ab4 	.word	0x20000ab4
 8002bc8:	20000f64 	.word	0x20000f64

08002bcc <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <XMC_USBD_Uninitialize+0x38>)
 8002bd4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002bdc:	793b      	ldrb	r3, [r7, #4]
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <XMC_USBD_Uninitialize+0x38>)
 8002be6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8002bee:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4803      	ldr	r0, [pc, #12]	; (8002c04 <XMC_USBD_Uninitialize+0x38>)
 8002bf6:	f006 f8b9 	bl	8008d6c <memset>
  return XMC_USBD_STATUS_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000f64 	.word	0x20000f64

08002c08 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <XMC_USBD_DeviceConnect+0x30>)
 8002c10:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8002c18:	793b      	ldrb	r3, [r7, #4]
 8002c1a:	f36f 0341 	bfc	r3, #1, #1
 8002c1e:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <XMC_USBD_DeviceConnect+0x30>)
 8002c22:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	20000f64 	.word	0x20000f64

08002c3c <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <XMC_USBD_DeviceDisconnect+0x30>)
 8002c44:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002c4c:	793b      	ldrb	r3, [r7, #4]
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <XMC_USBD_DeviceDisconnect+0x30>)
 8002c56:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	20000f64 	.word	0x20000f64

08002c70 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 8002c7c:	7b3b      	ldrb	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f362 03c4 	bfi	r3, r2, #3, #2
 8002c84:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <XMC_USBD_DeviceGetState+0x60>)
 8002c88:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002c8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	7b3b      	ldrb	r3, [r7, #12]
 8002c94:	f362 0341 	bfi	r3, r2, #1, #1
 8002c98:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fe5a 	bl	8001954 <XMC_USBD_lDeviceActive>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	7b3b      	ldrb	r3, [r7, #12]
 8002caa:	f362 0382 	bfi	r3, r2, #2, #1
 8002cae:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <XMC_USBD_DeviceGetState+0x60>)
 8002cb2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002cb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	7b3b      	ldrb	r3, [r7, #12]
 8002cbe:	f362 0300 	bfi	r3, r2, #0, #1
 8002cc2:	733b      	strb	r3, [r7, #12]
  return state;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000f64 	.word	0x20000f64

08002cd4 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	2234      	movs	r2, #52	; 0x34
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <XMC_USBD_EndpointReadStart+0x84>)
 8002cee:	4413      	add	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <XMC_USBD_EndpointReadStart+0x3a>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	791b      	ldrb	r3, [r3, #4]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e01c      	b.n	8002d4e <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d902      	bls.n	8002d24 <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8002d44:	68b8      	ldr	r0, [r7, #8]
 8002d46:	f7fe ffc5 	bl	8001cd4 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000f64 	.word	0x20000f64

08002d5c <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2234      	movs	r2, #52	; 0x34
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <XMC_USBD_EndpointRead+0x74>)
 8002d74:	4413      	add	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d902      	bls.n	8002d88 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4413      	add	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4619      	mov	r1, r3
 8002d96:	68b8      	ldr	r0, [r7, #8]
 8002d98:	f005 feea 	bl	8008b70 <memcpy>
  ep->outBytesAvailable -= length;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1ad2      	subs	r2, r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	441a      	add	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	619a      	str	r2, [r3, #24]
 8002dbc:	e002      	b.n	8002dc4 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8002dc4:	687b      	ldr	r3, [r7, #4]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000f64 	.word	0x20000f64

08002dd4 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	2234      	movs	r2, #52	; 0x34
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <XMC_USBD_EndpointWrite+0xa0>)
 8002df0:	4413      	add	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e030      	b.n	8002e6a <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e026      	b.n	8002e6a <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d902      	bls.n	8002e2c <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f005 fe9b 	bl	8008b70 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2200      	movs	r2, #0
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	6853      	ldr	r3, [r2, #4]
 8002e58:	f043 0308 	orr.w	r3, r3, #8
 8002e5c:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8002e5e:	6938      	ldr	r0, [r7, #16]
 8002e60:	f7fe fff4 	bl	8001e4c <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	617b      	str	r3, [r7, #20]
  }
  return result;
 8002e6a:	697b      	ldr	r3, [r7, #20]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000f64 	.word	0x20000f64

08002e78 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	460a      	mov	r2, r1
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <XMC_USBD_DeviceSetAddress+0x48>)
 8002e8a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10c      	bne.n	8002eb2 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	89bb      	ldrh	r3, [r7, #12]
 8002ea2:	f362 130a 	bfi	r3, r2, #4, #7
 8002ea6:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <XMC_USBD_DeviceSetAddress+0x48>)
 8002eaa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	20000f64 	.word	0x20000f64

08002ec4 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	460a      	mov	r2, r1
 8002ece:	71fb      	strb	r3, [r7, #7]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	2234      	movs	r2, #52	; 0x34
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	4a4a      	ldr	r2, [pc, #296]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  if (stall)
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d040      	beq.n	8002f6e <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da1a      	bge.n	8002f2a <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4a43      	ldr	r2, [pc, #268]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002f00:	336a      	adds	r3, #106	; 0x6a
 8002f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002f0a:	7abb      	ldrb	r3, [r7, #10]
 8002f0c:	f043 0320 	orr.w	r3, r3, #32
 8002f10:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	4a3b      	ldr	r2, [pc, #236]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002f1e:	336a      	adds	r3, #106	; 0x6a
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e01b      	b.n	8002f62 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4a35      	ldr	r2, [pc, #212]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002f36:	3370      	adds	r3, #112	; 0x70
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002f42:	7abb      	ldrb	r3, [r7, #10]
 8002f44:	f043 0320 	orr.w	r3, r3, #32
 8002f48:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4a2d      	ldr	r2, [pc, #180]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002f56:	3370      	adds	r3, #112	; 0x70
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	7913      	ldrb	r3, [r2, #4]
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	7113      	strb	r3, [r2, #4]
 8002f6c:	e047      	b.n	8002ffe <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da1e      	bge.n	8002fb4 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002f82:	336a      	adds	r3, #106	; 0x6a
 8002f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002f8c:	7abb      	ldrb	r3, [r7, #10]
 8002f8e:	f36f 1345 	bfc	r3, #5, #1
 8002f92:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f043 0310 	orr.w	r3, r3, #16
 8002f9a:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4a19      	ldr	r2, [pc, #100]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002fa8:	336a      	adds	r3, #106	; 0x6a
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e01f      	b.n	8002ff4 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002fc0:	3370      	adds	r3, #112	; 0x70
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002fcc:	7abb      	ldrb	r3, [r7, #10]
 8002fce:	f36f 1345 	bfc	r3, #5, #1
 8002fd2:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	f043 0310 	orr.w	r3, r3, #16
 8002fda:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <XMC_USBD_EndpointStall+0x148>)
 8002fe8:	3370      	adds	r3, #112	; 0x70
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	7913      	ldrb	r3, [r2, #4]
 8002ff8:	f36f 1345 	bfc	r3, #5, #1
 8002ffc:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	20000f64 	.word	0x20000f64

08003010 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2234      	movs	r2, #52	; 0x34
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <XMC_USBD_EndpointAbort+0x84>)
 8003028:	4413      	add	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6853      	ldr	r3, [r2, #4]
 800303e:	f36f 03c3 	bfc	r3, #3, #1
 8003042:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	6853      	ldr	r3, [r2, #4]
 8003056:	f36f 1304 	bfc	r3, #4, #1
 800305a:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	7913      	ldrb	r3, [r2, #4]
 8003060:	f36f 1345 	bfc	r3, #5, #1
 8003064:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000f64 	.word	0x20000f64

08003098 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
 80030a2:	460b      	mov	r3, r1
 80030a4:	71bb      	strb	r3, [r7, #6]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80030aa:	4bb0      	ldr	r3, [pc, #704]	; (800336c <XMC_USBD_EndpointConfigure+0x2d4>)
 80030ac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	2234      	movs	r2, #52	; 0x34
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	4aaa      	ldr	r2, [pc, #680]	; (800336c <XMC_USBD_EndpointConfigure+0x2d4>)
 80030c2:	4413      	add	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 80030c6:	2234      	movs	r2, #52	; 0x34
 80030c8:	2100      	movs	r1, #0
 80030ca:	6978      	ldr	r0, [r7, #20]
 80030cc:	f005 fe4e 	bl	8008d6c <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	7913      	ldrb	r3, [r2, #4]
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 80030e0:	88bb      	ldrh	r3, [r7, #4]
 80030e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e6:	b2d9      	uxtb	r1, r3
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	6853      	ldr	r3, [r2, #4]
 80030ec:	f361 23d1 	bfi	r3, r1, #11, #7
 80030f0:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <XMC_USBD_EndpointConfigure+0x72>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6893      	ldr	r3, [r2, #8]
 80030fe:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8003102:	f361 0312 	bfi	r3, r1, #0, #19
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	e005      	b.n	8003116 <XMC_USBD_EndpointConfigure+0x7e>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6893      	ldr	r3, [r2, #8]
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	f361 0312 	bfi	r3, r1, #0, #19
 8003114:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800311e:	b2db      	uxtb	r3, r3
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	4a93      	ldr	r2, [pc, #588]	; (8003370 <XMC_USBD_EndpointConfigure+0x2d8>)
 8003124:	441a      	add	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003132:	b2db      	uxtb	r3, r3
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	4a8f      	ldr	r2, [pc, #572]	; (8003374 <XMC_USBD_EndpointConfigure+0x2dc>)
 8003138:	441a      	add	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	4b8b      	ldr	r3, [pc, #556]	; (8003378 <XMC_USBD_EndpointConfigure+0x2e0>)
 800314c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	4b86      	ldr	r3, [pc, #536]	; (800337c <XMC_USBD_EndpointConfigure+0x2e4>)
 8003162:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <XMC_USBD_EndpointConfigure+0xe6>
 8003178:	79bb      	ldrb	r3, [r7, #6]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d179      	bne.n	8003272 <XMC_USBD_EndpointConfigure+0x1da>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003186:	b2db      	uxtb	r3, r3
 8003188:	4a78      	ldr	r2, [pc, #480]	; (800336c <XMC_USBD_EndpointConfigure+0x2d4>)
 800318a:	336a      	adds	r3, #106	; 0x6a
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8003194:	7b7b      	ldrb	r3, [r7, #13]
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800319c:	79bb      	ldrb	r3, [r7, #6]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	7bbb      	ldrb	r3, [r7, #14]
 80031a6:	f362 0383 	bfi	r3, r2, #2, #2
 80031aa:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80031ac:	79bb      	ldrb	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d123      	bne.n	80031fa <XMC_USBD_EndpointConfigure+0x162>
    {
			switch(ep_max_packet_size)
 80031b2:	88bb      	ldrh	r3, [r7, #4]
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d014      	beq.n	80031e2 <XMC_USBD_EndpointConfigure+0x14a>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	dc02      	bgt.n	80031c2 <XMC_USBD_EndpointConfigure+0x12a>
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d016      	beq.n	80031ee <XMC_USBD_EndpointConfigure+0x156>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 80031c0:	e023      	b.n	800320a <XMC_USBD_EndpointConfigure+0x172>
			switch(ep_max_packet_size)
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d007      	beq.n	80031d6 <XMC_USBD_EndpointConfigure+0x13e>
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d000      	beq.n	80031cc <XMC_USBD_EndpointConfigure+0x134>
				break;
 80031ca:	e01e      	b.n	800320a <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x0U;
 80031cc:	89bb      	ldrh	r3, [r7, #12]
 80031ce:	f36f 030a 	bfc	r3, #0, #11
 80031d2:	81bb      	strh	r3, [r7, #12]
				break;
 80031d4:	e019      	b.n	800320a <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x1U;
 80031d6:	89bb      	ldrh	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f362 030a 	bfi	r3, r2, #0, #11
 80031de:	81bb      	strh	r3, [r7, #12]
				break;
 80031e0:	e013      	b.n	800320a <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x2U;
 80031e2:	89bb      	ldrh	r3, [r7, #12]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f362 030a 	bfi	r3, r2, #0, #11
 80031ea:	81bb      	strh	r3, [r7, #12]
				break;
 80031ec:	e00d      	b.n	800320a <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x3U;
 80031ee:	89bb      	ldrh	r3, [r7, #12]
 80031f0:	2203      	movs	r2, #3
 80031f2:	f362 030a 	bfi	r3, r2, #0, #11
 80031f6:	81bb      	strh	r3, [r7, #12]
				break;
 80031f8:	e007      	b.n	800320a <XMC_USBD_EndpointConfigure+0x172>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80031fa:	88bb      	ldrh	r3, [r7, #4]
 80031fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003200:	b29a      	uxth	r2, r3
 8003202:	89bb      	ldrh	r3, [r7, #12]
 8003204:	f362 030a 	bfi	r3, r2, #0, #11
 8003208:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	f36f 1345 	bfc	r3, #5, #1
 8003218:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 800321a:	f7fe fd07 	bl	8001c2c <XMC_USBD_lAssignTXFifo>
 800321e:	4603      	mov	r3, r0
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	b2d9      	uxtb	r1, r3
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	8893      	ldrh	r3, [r2, #4]
 800322a:	f361 1389 	bfi	r3, r1, #6, #4
 800322e:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	889b      	ldrh	r3, [r3, #4]
 8003234:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8003238:	b2da      	uxtb	r2, r3
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	f362 1389 	bfi	r3, r2, #6, #4
 8003240:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4a47      	ldr	r2, [pc, #284]	; (800336c <XMC_USBD_EndpointConfigure+0x2d4>)
 800324e:	336a      	adds	r3, #106	; 0x6a
 8003250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8003258:	8a3a      	ldrh	r2, [r7, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	2301      	movs	r3, #1
 8003268:	408b      	lsls	r3, r1
 800326a:	b29b      	uxth	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <XMC_USBD_EndpointConfigure+0x1ee>
 8003280:	79bb      	ldrb	r3, [r7, #6]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d167      	bne.n	8003356 <XMC_USBD_EndpointConfigure+0x2be>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800328e:	b2db      	uxtb	r3, r3
 8003290:	4a36      	ldr	r2, [pc, #216]	; (800336c <XMC_USBD_EndpointConfigure+0x2d4>)
 8003292:	3370      	adds	r3, #112	; 0x70
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 800329e:	7a7b      	ldrb	r3, [r7, #9]
 80032a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a4:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80032a6:	79bb      	ldrb	r3, [r7, #6]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	7abb      	ldrb	r3, [r7, #10]
 80032b0:	f362 0383 	bfi	r3, r2, #2, #2
 80032b4:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80032b6:	79bb      	ldrb	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d123      	bne.n	8003304 <XMC_USBD_EndpointConfigure+0x26c>
		{
			switch(ep_max_packet_size)
 80032bc:	88bb      	ldrh	r3, [r7, #4]
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d014      	beq.n	80032ec <XMC_USBD_EndpointConfigure+0x254>
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	dc02      	bgt.n	80032cc <XMC_USBD_EndpointConfigure+0x234>
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d016      	beq.n	80032f8 <XMC_USBD_EndpointConfigure+0x260>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 80032ca:	e023      	b.n	8003314 <XMC_USBD_EndpointConfigure+0x27c>
			switch(ep_max_packet_size)
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d007      	beq.n	80032e0 <XMC_USBD_EndpointConfigure+0x248>
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d000      	beq.n	80032d6 <XMC_USBD_EndpointConfigure+0x23e>
					break;
 80032d4:	e01e      	b.n	8003314 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x0U;
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	f36f 030a 	bfc	r3, #0, #11
 80032dc:	813b      	strh	r3, [r7, #8]
					break;
 80032de:	e019      	b.n	8003314 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x1U;
 80032e0:	893b      	ldrh	r3, [r7, #8]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f362 030a 	bfi	r3, r2, #0, #11
 80032e8:	813b      	strh	r3, [r7, #8]
					break;
 80032ea:	e013      	b.n	8003314 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x2U;
 80032ec:	893b      	ldrh	r3, [r7, #8]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f362 030a 	bfi	r3, r2, #0, #11
 80032f4:	813b      	strh	r3, [r7, #8]
					break;
 80032f6:	e00d      	b.n	8003314 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x3U;
 80032f8:	893b      	ldrh	r3, [r7, #8]
 80032fa:	2203      	movs	r2, #3
 80032fc:	f362 030a 	bfi	r3, r2, #0, #11
 8003300:	813b      	strh	r3, [r7, #8]
					break;
 8003302:	e007      	b.n	8003314 <XMC_USBD_EndpointConfigure+0x27c>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8003304:	88bb      	ldrh	r3, [r7, #4]
 8003306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330a:	b29a      	uxth	r2, r3
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	f362 030a 	bfi	r3, r2, #0, #11
 8003312:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8003314:	7afb      	ldrb	r3, [r7, #11]
 8003316:	f043 0310 	orr.w	r3, r3, #16
 800331a:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 800331c:	7abb      	ldrb	r3, [r7, #10]
 800331e:	f36f 1345 	bfc	r3, #5, #1
 8003322:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <XMC_USBD_EndpointConfigure+0x2d4>)
 8003330:	3370      	adds	r3, #112	; 0x70
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 800333c:	8a7a      	ldrh	r2, [r7, #18]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	2301      	movs	r3, #1
 800334c:	408b      	lsls	r3, r1
 800334e:	b29b      	uxth	r3, r3
 8003350:	4313      	orrs	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <XMC_USBD_EndpointConfigure+0x2d4>)
 8003358:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000f64 	.word	0x20000f64
 8003370:	30000700 	.word	0x30000700
 8003374:	30000000 	.word	0x30000000
 8003378:	20000ab4 	.word	0x20000ab4
 800337c:	20000a98 	.word	0x20000a98

08003380 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2234      	movs	r2, #52	; 0x34
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003398:	4413      	add	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80033a0:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <XMC_USBD_EndpointUnconfigure+0x168>)
 80033a2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	2301      	movs	r3, #1
 80033b8:	4093      	lsls	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	791b      	ldrb	r3, [r3, #4]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e085      	b.n	80034dc <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 80033d0:	7c7b      	ldrb	r3, [r7, #17]
 80033d2:	f36f 13c7 	bfc	r3, #7, #1
 80033d6:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033de:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	f043 0308 	orr.w	r3, r3, #8
 80033e6:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 80033e8:	7cbb      	ldrb	r3, [r7, #18]
 80033ea:	f36f 1345 	bfc	r3, #5, #1
 80033ee:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	7913      	ldrb	r3, [r2, #4]
 80033f4:	f36f 0382 	bfc	r3, #2, #1
 80033f8:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	7913      	ldrb	r3, [r2, #4]
 80033fe:	f36f 1345 	bfc	r3, #5, #1
 8003402:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	6853      	ldr	r3, [r2, #4]
 8003408:	f36f 1304 	bfc	r3, #4, #1
 800340c:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	6853      	ldr	r3, [r2, #4]
 8003412:	f36f 03c3 	bfc	r3, #3, #1
 8003416:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <XMC_USBD_EndpointUnconfigure+0xb4>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	791b      	ldrb	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d112      	bne.n	800345a <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003440:	336a      	adds	r3, #106	; 0x6a
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 800344a:	89ba      	ldrh	r2, [r7, #12]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	b29b      	uxth	r3, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <XMC_USBD_EndpointUnconfigure+0xf6>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	791b      	ldrb	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d123      	bne.n	80034be <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003482:	3370      	adds	r3, #112	; 0x70
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 800348e:	89fa      	ldrh	r2, [r7, #14]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	b29b      	uxth	r3, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800349e:	4b13      	ldr	r3, [pc, #76]	; (80034ec <XMC_USBD_EndpointUnconfigure+0x16c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	7b5b      	ldrb	r3, [r3, #13]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10a      	bne.n	80034be <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <XMC_USBD_EndpointUnconfigure+0x168>)
 80034aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80034ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	43da      	mvns	r2, r3
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <XMC_USBD_EndpointUnconfigure+0x168>)
 80034b6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80034ba:	400a      	ands	r2, r1
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <XMC_USBD_EndpointUnconfigure+0x168>)
 80034c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	889b      	ldrh	r3, [r3, #4]
 80034cc:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fbe2 	bl	8001c9c <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 80034dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000f64 	.word	0x20000f64
 80034ec:	20000f60 	.word	0x20000f60

080034f0 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <XMC_USBD_GetFrameNumber+0x28>)
 80034f8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8003506:	b29b      	uxth	r3, r3
 8003508:	80fb      	strh	r3, [r7, #6]
  return result;
 800350a:	88fb      	ldrh	r3, [r7, #6]
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	20000f64 	.word	0x20000f64

0800351c <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <XMC_USBD_IsEnumDone+0x34>)
 8003522:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <XMC_USBD_IsEnumDone+0x28>
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <XMC_USBD_IsEnumDone+0x34>)
 8003532:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <XMC_USBD_IsEnumDone+0x28>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <XMC_USBD_IsEnumDone+0x2a>
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000f64 	.word	0x20000f64

08003554 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 800355c:	4b7a      	ldr	r3, [pc, #488]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 800355e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003562:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 8003572:	f083 0301 	eor.w	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 80d4 	bne.w	8003726 <CDC_Device_ProcessControlRequest+0x1d2>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 800357e:	4b73      	ldr	r3, [pc, #460]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 8003580:	889b      	ldrh	r3, [r3, #4]
 8003582:	b29a      	uxth	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	429a      	cmp	r2, r3
 800358c:	f040 80cd 	bne.w	800372a <CDC_Device_ProcessControlRequest+0x1d6>
	  return;

	switch (USB_ControlRequest.bRequest)
 8003590:	4b6e      	ldr	r3, [pc, #440]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	3b20      	subs	r3, #32
 8003596:	2b03      	cmp	r3, #3
 8003598:	f200 80d2 	bhi.w	8003740 <CDC_Device_ProcessControlRequest+0x1ec>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <CDC_Device_ProcessControlRequest+0x50>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	08003645 	.word	0x08003645
 80035a8:	080035b5 	.word	0x080035b5
 80035ac:	080036d5 	.word	0x080036d5
 80035b0:	080036fd 	.word	0x080036fd
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80035b4:	4b65      	ldr	r3, [pc, #404]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2ba1      	cmp	r3, #161	; 0xa1
 80035ba:	f040 80b8 	bne.w	800372e <CDC_Device_ProcessControlRequest+0x1da>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 80035be:	4a62      	ldr	r2, [pc, #392]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 80035c0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80035c4:	f36f 0341 	bfc	r3, #1, #1
 80035c8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 80035cc:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80035ce:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 80035d0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80035d4:	461a      	mov	r2, r3
 80035d6:	232c      	movs	r3, #44	; 0x2c
 80035d8:	fb03 f302 	mul.w	r3, r3, r2
 80035dc:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]
		return ep->InInUse == 0 && ep->IsEnabled;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <CDC_Device_ProcessControlRequest+0xb0>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	791b      	ldrb	r3, [r3, #4]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <CDC_Device_ProcessControlRequest+0xb0>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <CDC_Device_ProcessControlRequest+0xb2>
 8003604:	2300      	movs	r3, #0
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1db      	bne.n	80035ce <CDC_Device_ProcessControlRequest+0x7a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fe10 	bl	8004240 <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7f1b      	ldrb	r3, [r3, #28]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fd9f 	bl	8004168 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7f5b      	ldrb	r3, [r3, #29]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fd9a 	bl	8004168 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7f9b      	ldrb	r3, [r3, #30]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd95 	bl	8004168 <Endpoint_Write_8>

				Endpoint_ClearIN();
 800363e:	f000 fce9 	bl	8004014 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 8003642:	e074      	b.n	800372e <CDC_Device_ProcessControlRequest+0x1da>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b21      	cmp	r3, #33	; 0x21
 800364a:	d172      	bne.n	8003732 <CDC_Device_ProcessControlRequest+0x1de>
		device.IsSetupRecieved = 0;
 800364c:	4a3e      	ldr	r2, [pc, #248]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 800364e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003652:	f36f 0341 	bfc	r3, #1, #1
 8003656:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 800365a:	e004      	b.n	8003666 <CDC_Device_ProcessControlRequest+0x112>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <CDC_Device_ProcessControlRequest+0x1fc>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d067      	beq.n	8003736 <CDC_Device_ProcessControlRequest+0x1e2>
	 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 8003668:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800366c:	461a      	mov	r2, r3
 800366e:	232c      	movs	r3, #44	; 0x2c
 8003670:	fb03 f302 	mul.w	r3, r3, r2
 8003674:	4a34      	ldr	r2, [pc, #208]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	60bb      	str	r3, [r7, #8]
		return ep->IsOutRecieved;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
				while (!(Endpoint_IsOUTReceived()))
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e0      	bne.n	800365c <CDC_Device_ProcessControlRequest+0x108>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 800369a:	f000 fe05 	bl	80042a8 <Endpoint_Read_32_LE>
 800369e:	4602      	mov	r2, r0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	619a      	str	r2, [r3, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 80036a4:	f000 fd94 	bl	80041d0 <Endpoint_Read_8>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	771a      	strb	r2, [r3, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80036b0:	f000 fd8e 	bl	80041d0 <Endpoint_Read_8>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	775a      	strb	r2, [r3, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80036bc:	f000 fd88 	bl	80041d0 <Endpoint_Read_8>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	779a      	strb	r2, [r3, #30]

				Endpoint_ClearOUT();
 80036c8:	f000 fc58 	bl	8003f7c <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fb1b 	bl	8003d08 <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
 80036d2:	e02e      	b.n	8003732 <CDC_Device_ProcessControlRequest+0x1de>
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b21      	cmp	r3, #33	; 0x21
 80036da:	d12e      	bne.n	800373a <CDC_Device_ProcessControlRequest+0x1e6>
		device.IsSetupRecieved = 0;
 80036dc:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 80036de:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80036e2:	f36f 0341 	bfc	r3, #1, #1
 80036e6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 80036ec:	885b      	ldrh	r3, [r3, #2]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	829a      	strh	r2, [r3, #20]

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb11 	bl	8003d1c <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
 80036fa:	e01e      	b.n	800373a <CDC_Device_ProcessControlRequest+0x1e6>
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b21      	cmp	r3, #33	; 0x21
 8003702:	d11c      	bne.n	800373e <CDC_Device_ProcessControlRequest+0x1ea>
 8003704:	4a10      	ldr	r2, [pc, #64]	; (8003748 <CDC_Device_ProcessControlRequest+0x1f4>)
 8003706:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800370a:	f36f 0341 	bfc	r3, #1, #1
 800370e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <CDC_Device_ProcessControlRequest+0x1f8>)
 8003714:	885b      	ldrh	r3, [r3, #2]
 8003716:	b29b      	uxth	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb07 	bl	8003d30 <EVENT_CDC_Device_BreakSent>
			}

			break;
 8003722:	bf00      	nop
 8003724:	e00b      	b.n	800373e <CDC_Device_ProcessControlRequest+0x1ea>
	  return;
 8003726:	bf00      	nop
 8003728:	e00a      	b.n	8003740 <CDC_Device_ProcessControlRequest+0x1ec>
	  return;
 800372a:	bf00      	nop
 800372c:	e008      	b.n	8003740 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 800372e:	bf00      	nop
 8003730:	e006      	b.n	8003740 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 8003732:	bf00      	nop
 8003734:	e004      	b.n	8003740 <CDC_Device_ProcessControlRequest+0x1ec>
					  return;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <CDC_Device_ProcessControlRequest+0x1ec>
			break;
 800373e:	bf00      	nop
	}
}
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000e20 	.word	0x20000e20
 800374c:	20001170 	.word	0x20001170
 8003750:	2000116d 	.word	0x2000116d

08003754 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3314      	adds	r3, #20
 8003760:	220c      	movs	r2, #12
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f005 fb01 	bl	8008d6c <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	719a      	strb	r2, [r3, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	731a      	strb	r2, [r3, #12]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	749a      	strb	r2, [r3, #18]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3302      	adds	r3, #2
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fdc8 	bl	8004318 <Endpoint_ConfigureEndpointTable>
 8003788:	4603      	mov	r3, r0
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <CDC_Device_ConfigureEndpoints+0x44>
	  return false;
 8003794:	2300      	movs	r3, #0
 8003796:	e01c      	b.n	80037d2 <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3308      	adds	r3, #8
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fdba 	bl	8004318 <Endpoint_ConfigureEndpointTable>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f083 0301 	eor.w	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <CDC_Device_ConfigureEndpoints+0x60>
	  return false;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e00e      	b.n	80037d2 <CDC_Device_ConfigureEndpoints+0x7e>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	330e      	adds	r3, #14
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fdac 	bl	8004318 <Endpoint_ConfigureEndpointTable>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f083 0301 	eor.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <CDC_Device_ConfigureEndpoints+0x7c>
	  return false;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <CDC_Device_ConfigureEndpoints+0x7e>

	return true;
 80037d0:	2301      	movs	r3, #1
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <CDC_Device_USBTask+0x90>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d139      	bne.n	8003862 <CDC_Device_USBTask+0x86>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d035      	beq.n	8003862 <CDC_Device_USBTask+0x86>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	789b      	ldrb	r3, [r3, #2]
 80037fa:	72fb      	strb	r3, [r7, #11]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	b2da      	uxtb	r2, r3
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <CDC_Device_USBTask+0x94>)
 8003806:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <CDC_Device_USBTask+0x94>)
 8003814:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <CDC_Device_USBTask+0x94>)
 800381a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800381e:	461a      	mov	r2, r3
 8003820:	232c      	movs	r3, #44	; 0x2c
 8003822:	fb03 f302 	mul.w	r3, r3, r2
 8003826:	4a12      	ldr	r2, [pc, #72]	; (8003870 <CDC_Device_USBTask+0x94>)
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	60fb      	str	r3, [r7, #12]
		return ep->InInUse == 0 && ep->IsEnabled;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <CDC_Device_USBTask+0x72>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	791b      	ldrb	r3, [r3, #4]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <CDC_Device_USBTask+0x72>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <CDC_Device_USBTask+0x74>
 800384e:	2300      	movs	r3, #0
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	b2db      	uxtb	r3, r3

	if (Endpoint_IsINReady())
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <CDC_Device_USBTask+0x88>
	  CDC_Device_Flush(CDCInterfaceInfo);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8b2 	bl	80039c4 <CDC_Device_Flush>
 8003860:	e000      	b.n	8003864 <CDC_Device_USBTask+0x88>
	  return;
 8003862:	bf00      	nop
	#endif
}
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000116d 	.word	0x2000116d
 8003870:	20000e20 	.word	0x20000e20

08003874 <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <CDC_Device_SendString+0x60>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b04      	cmp	r3, #4
 8003886:	d103      	bne.n	8003890 <CDC_Device_SendString+0x1c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <CDC_Device_SendString+0x20>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003890:	2302      	movs	r3, #2
 8003892:	e01b      	b.n	80038cc <CDC_Device_SendString+0x58>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	789b      	ldrb	r3, [r3, #2]
 8003898:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <CDC_Device_SendString+0x64>)
 80038a4:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <CDC_Device_SendString+0x64>)
 80038b2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 80038b6:	6838      	ldr	r0, [r7, #0]
 80038b8:	f005 fba2 	bl	8009000 <strlen>
 80038bc:	4603      	mov	r3, r0
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2200      	movs	r2, #0
 80038c2:	4619      	mov	r1, r3
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f002 fa2b 	bl	8005d20 <Endpoint_Write_Stream_LE>
 80038ca:	4603      	mov	r3, r0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	2000116d 	.word	0x2000116d
 80038d8:	20000e20 	.word	0x20000e20

080038dc <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <CDC_Device_SendData+0x5c>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d103      	bne.n	80038fc <CDC_Device_SendData+0x20>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <CDC_Device_SendData+0x24>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80038fc:	2302      	movs	r3, #2
 80038fe:	e017      	b.n	8003930 <CDC_Device_SendData+0x54>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	789b      	ldrb	r3, [r3, #2]
 8003904:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <CDC_Device_SendData+0x60>)
 8003910:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800391a:	b2da      	uxtb	r2, r3
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <CDC_Device_SendData+0x60>)
 800391e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2200      	movs	r2, #0
 8003926:	4619      	mov	r1, r3
 8003928:	68b8      	ldr	r0, [r7, #8]
 800392a:	f002 f9f9 	bl	8005d20 <Endpoint_Write_Stream_LE>
 800392e:	4603      	mov	r3, r0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000116d 	.word	0x2000116d
 800393c:	20000e20 	.word	0x20000e20

08003940 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <CDC_Device_SendByte+0x7c>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b04      	cmp	r3, #4
 8003954:	d103      	bne.n	800395e <CDC_Device_SendByte+0x1e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <CDC_Device_SendByte+0x22>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800395e:	2302      	movs	r3, #2
 8003960:	e028      	b.n	80039b4 <CDC_Device_SendByte+0x74>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	73bb      	strb	r3, [r7, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003968:	7bbb      	ldrb	r3, [r7, #14]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	b2da      	uxtb	r2, r3
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <CDC_Device_SendByte+0x80>)
 8003972:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <CDC_Device_SendByte+0x80>)
 8003980:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8003984:	f000 fbbe 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 8003988:	4603      	mov	r3, r0
 800398a:	f083 0301 	eor.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <CDC_Device_SendByte+0x6a>
	{
		Endpoint_ClearIN();
 8003994:	f000 fb3e 	bl	8004014 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8003998:	f000 fa5e 	bl	8003e58 <Endpoint_WaitUntilReady>
 800399c:	4603      	mov	r3, r0
 800399e:	73fb      	strb	r3, [r7, #15]
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <CDC_Device_SendByte+0x6a>
		  return ErrorCode;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	e004      	b.n	80039b4 <CDC_Device_SendByte+0x74>
	}

	Endpoint_Write_8(Data);
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fbdb 	bl	8004168 <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2000116d 	.word	0x2000116d
 80039c0:	20000e20 	.word	0x20000e20

080039c4 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <CDC_Device_Flush+0xc4>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d103      	bne.n	80039de <CDC_Device_Flush+0x1a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <CDC_Device_Flush+0x1e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80039de:	2302      	movs	r3, #2
 80039e0:	e04e      	b.n	8003a80 <CDC_Device_Flush+0xbc>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	789b      	ldrb	r3, [r3, #2]
 80039e6:	73fb      	strb	r3, [r7, #15]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <CDC_Device_Flush+0xc8>)
 80039f2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <CDC_Device_Flush+0xc8>)
 8003a00:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <CDC_Device_Flush+0xc8>)
 8003a06:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	232c      	movs	r3, #44	; 0x2c
 8003a0e:	fb03 f302 	mul.w	r3, r3, r2
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <CDC_Device_Flush+0xc8>)
 8003a14:	4413      	add	r3, r2
 8003a16:	3304      	adds	r3, #4
 8003a18:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <CDC_Device_Flush+0x6c>
			return ep->InBytesAvailable;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	e002      	b.n	8003a36 <CDC_Device_Flush+0x72>
		else
			return ep->OutBytesAvailable;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	b29b      	uxth	r3, r3

	if (!(Endpoint_BytesInEndpoint()))
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <CDC_Device_Flush+0x7a>
	  return ENDPOINT_READYWAIT_NoError;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e020      	b.n	8003a80 <CDC_Device_Flush+0xbc>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 8003a3e:	f000 fb61 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f083 0301 	eor.w	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	75fb      	strb	r3, [r7, #23]
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]

	Endpoint_ClearIN();
 8003a5e:	f000 fad9 	bl	8004014 <Endpoint_ClearIN>

	if (BankFull)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <CDC_Device_Flush+0xba>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8003a68:	f000 f9f6 	bl	8003e58 <Endpoint_WaitUntilReady>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75bb      	strb	r3, [r7, #22]
 8003a70:	7dbb      	ldrb	r3, [r7, #22]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <CDC_Device_Flush+0xb6>
		  return ErrorCode;
 8003a76:	7dbb      	ldrb	r3, [r7, #22]
 8003a78:	e002      	b.n	8003a80 <CDC_Device_Flush+0xbc>

		Endpoint_ClearIN();
 8003a7a:	f000 facb 	bl	8004014 <Endpoint_ClearIN>
	}

	return ENDPOINT_READYWAIT_NoError;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2000116d 	.word	0x2000116d
 8003a8c:	20000e20 	.word	0x20000e20

08003a90 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003a98:	4b38      	ldr	r3, [pc, #224]	; (8003b7c <CDC_Device_BytesReceived+0xec>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d103      	bne.n	8003aaa <CDC_Device_BytesReceived+0x1a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <CDC_Device_BytesReceived+0x1e>
	  return 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e061      	b.n	8003b72 <CDC_Device_BytesReceived+0xe2>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7a1b      	ldrb	r3, [r3, #8]
 8003ab2:	74fb      	strb	r3, [r7, #19]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003abe:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003acc:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003ad2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	232c      	movs	r3, #44	; 0x2c
 8003ada:	fb03 f302 	mul.w	r3, r3, r2
 8003ade:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	617b      	str	r3, [r7, #20]
		return ep->IsOutRecieved;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d038      	beq.n	8003b70 <CDC_Device_BytesReceived+0xe0>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003b00:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b04:	461a      	mov	r2, r3
 8003b06:	232c      	movs	r3, #44	; 0x2c
 8003b08:	fb03 f302 	mul.w	r3, r3, r2
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003b0e:	4413      	add	r3, r2
 8003b10:	3304      	adds	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
		if (ep->Direction)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <CDC_Device_BytesReceived+0x9a>
			return ep->InBytesAvailable;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	e002      	b.n	8003b30 <CDC_Device_BytesReceived+0xa0>
			return ep->OutBytesAvailable;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	b29b      	uxth	r3, r3
	{
		if (!(Endpoint_BytesInEndpoint()))
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <CDC_Device_BytesReceived+0xac>
		{
			Endpoint_ClearOUT();
 8003b34:	f000 fa22 	bl	8003f7c <Endpoint_ClearOUT>
			return 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e01a      	b.n	8003b72 <CDC_Device_BytesReceived+0xe2>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003b3e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b42:	461a      	mov	r2, r3
 8003b44:	232c      	movs	r3, #44	; 0x2c
 8003b46:	fb03 f302 	mul.w	r3, r3, r2
 8003b4a:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <CDC_Device_BytesReceived+0xf0>)
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3304      	adds	r3, #4
 8003b50:	60bb      	str	r3, [r7, #8]
		if (ep->Direction)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <CDC_Device_BytesReceived+0xd8>
			return ep->InBytesAvailable;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	b29b      	uxth	r3, r3
		}
		else
		{
			return Endpoint_BytesInEndpoint();
 8003b66:	e004      	b.n	8003b72 <CDC_Device_BytesReceived+0xe2>
			return ep->OutBytesAvailable;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	e000      	b.n	8003b72 <CDC_Device_BytesReceived+0xe2>
		}
	}
	else
	{
		return 0;
 8003b70:	2300      	movs	r3, #0
	}
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000116d 	.word	0x2000116d
 8003b80:	20000e20 	.word	0x20000e20

08003b84 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003b8c:	4b3c      	ldr	r3, [pc, #240]	; (8003c80 <CDC_Device_ReceiveByte+0xfc>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d103      	bne.n	8003b9e <CDC_Device_ReceiveByte+0x1a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <CDC_Device_ReceiveByte+0x20>
	  return -1;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba2:	e068      	b.n	8003c76 <CDC_Device_ReceiveByte+0xf2>

	int16_t ReceivedByte = -1;
 8003ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ba8:	83fb      	strh	r3, [r7, #30]

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7a1b      	ldrb	r3, [r3, #8]
 8003bae:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003bba:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4b2f      	ldr	r3, [pc, #188]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003bc8:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003bce:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	232c      	movs	r3, #44	; 0x2c
 8003bd6:	fb03 f302 	mul.w	r3, r3, r2
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	61bb      	str	r3, [r7, #24]
		return ep->IsOutRecieved;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3

	if (Endpoint_IsOUTReceived())
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d03b      	beq.n	8003c72 <CDC_Device_ReceiveByte+0xee>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003bfc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003c00:	461a      	mov	r2, r3
 8003c02:	232c      	movs	r3, #44	; 0x2c
 8003c04:	fb03 f302 	mul.w	r3, r3, r2
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	613b      	str	r3, [r7, #16]
		if (ep->Direction)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <CDC_Device_ReceiveByte+0xa2>
			return ep->InBytesAvailable;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	e002      	b.n	8003c2c <CDC_Device_ReceiveByte+0xa8>
			return ep->OutBytesAvailable;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	b29b      	uxth	r3, r3
	{
		if (Endpoint_BytesInEndpoint())
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <CDC_Device_ReceiveByte+0xb4>
		  ReceivedByte = Endpoint_Read_8();
 8003c30:	f000 face 	bl	80041d0 <Endpoint_Read_8>
 8003c34:	4603      	mov	r3, r0
 8003c36:	83fb      	strh	r3, [r7, #30]
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003c3a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003c3e:	461a      	mov	r2, r3
 8003c40:	232c      	movs	r3, #44	; 0x2c
 8003c42:	fb03 f302 	mul.w	r3, r3, r2
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <CDC_Device_ReceiveByte+0x100>)
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
		if (ep->Direction)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <CDC_Device_ReceiveByte+0xe0>
			return ep->InBytesAvailable;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	e002      	b.n	8003c6a <CDC_Device_ReceiveByte+0xe6>
			return ep->OutBytesAvailable;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	b29b      	uxth	r3, r3

		if (!(Endpoint_BytesInEndpoint()))
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <CDC_Device_ReceiveByte+0xee>
		  Endpoint_ClearOUT();
 8003c6e:	f000 f985 	bl	8003f7c <Endpoint_ClearOUT>
	}

	return ReceivedByte;
 8003c72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000116d 	.word	0x2000116d
 8003c84:	20000e20 	.word	0x20000e20

08003c88 <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <CDC_Device_SendControlLineStateChange+0x74>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d12c      	bne.n	8003cf4 <CDC_Device_SendControlLineStateChange+0x6c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d028      	beq.n	8003cf4 <CDC_Device_SendControlLineStateChange+0x6c>
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7b9b      	ldrb	r3, [r3, #14]
 8003ca6:	75fb      	strb	r3, [r7, #23]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <CDC_Device_SendControlLineStateChange+0x78>)
 8003cb2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <CDC_Device_SendControlLineStateChange+0x78>)
 8003cc0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8003cc4:	4a0f      	ldr	r2, [pc, #60]	; (8003d04 <CDC_Device_SendControlLineStateChange+0x7c>)
 8003cc6:	f107 030c 	add.w	r3, r7, #12
 8003cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cce:	e883 0003 	stmia.w	r3, {r0, r1}
			.wValue        = CPU_TO_LE16(0),
			.wIndex        = CPU_TO_LE16(0),
			.wLength       = CPU_TO_LE16(sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost)),
		};

	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2108      	movs	r1, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f002 f820 	bl	8005d20 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3316      	adds	r3, #22
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f002 f819 	bl	8005d20 <Endpoint_Write_Stream_LE>
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
 8003cee:	f000 f991 	bl	8004014 <Endpoint_ClearIN>
 8003cf2:	e000      	b.n	8003cf6 <CDC_Device_SendControlLineStateChange+0x6e>
	  return;
 8003cf4:	bf00      	nop
}
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	2000116d 	.word	0x2000116d
 8003d00:	20000e20 	.word	0x20000e20
 8003d04:	0800beac 	.word	0x0800beac

08003d08 <EVENT_CDC_Device_LineEncodingChanged>:
	return ReceivedByte;
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <EVENT_CDC_Device_ControLineStateChanged>:

__WEAK void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <EVENT_CDC_Device_BreakSent>:

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 8003d4c:	f000 f802 	bl	8003d54 <USB_DeviceTask>
	#endif
}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <USB_DeviceTask+0x7c>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d030      	beq.n	8003dc6 <USB_DeviceTask+0x72>
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <USB_DeviceTask+0x80>)
 8003d66:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <USB_DeviceTask+0x80>)
 8003d6c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 8003d74:	71fb      	strb	r3, [r7, #7]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003d76:	2200      	movs	r2, #0
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <USB_DeviceTask+0x80>)
 8003d7a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <USB_DeviceTask+0x80>)
 8003d82:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <USB_DeviceTask+0x80>)
 8003d88:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003d8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <USB_DeviceTask+0x50>
	  USB_Device_ProcessControlRequest();
 8003da0:	f7fd f88a 	bl	8000eb8 <USB_Device_ProcessControlRequest>
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	71bb      	strb	r3, [r7, #6]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8003da8:	79bb      	ldrb	r3, [r7, #6]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <USB_DeviceTask+0x80>)
 8003db2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8003db6:	79bb      	ldrb	r3, [r7, #6]
 8003db8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <USB_DeviceTask+0x80>)
 8003dc0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 8003dc4:	e000      	b.n	8003dc8 <USB_DeviceTask+0x74>
	  return;
 8003dc6:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	2000116d 	.word	0x2000116d
 8003dd4:	20000e20 	.word	0x20000e20

08003dd8 <__NVIC_EnableIRQ>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db0b      	blt.n	8003e02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f003 021f 	and.w	r2, r3, #31
 8003df0:	4907      	ldr	r1, [pc, #28]	; (8003e10 <__NVIC_EnableIRQ+0x38>)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2001      	movs	r0, #1
 8003dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <__NVIC_DisableIRQ>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db10      	blt.n	8003e48 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	4909      	ldr	r1, [pc, #36]	; (8003e54 <__NVIC_DisableIRQ+0x40>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2001      	movs	r0, #1
 8003e36:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3a:	3320      	adds	r3, #32
 8003e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e44:	f3bf 8f6f 	isb	sy
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8003e5e:	2364      	movs	r3, #100	; 0x64
 8003e60:	75fb      	strb	r3, [r7, #23]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8003e62:	4b44      	ldr	r3, [pc, #272]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	4798      	blx	r3
 8003e6a:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8003e6c:	82bb      	strh	r3, [r7, #20]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003e70:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e74:	461a      	mov	r2, r3
 8003e76:	232c      	movs	r3, #44	; 0x2c
 8003e78:	fb03 f302 	mul.w	r3, r3, r2
 8003e7c:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e8c:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d122      	bne.n	8003ed8 <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003e92:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003e94:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e98:	461a      	mov	r2, r3
 8003e9a:	232c      	movs	r3, #44	; 0x2c
 8003e9c:	fb03 f302 	mul.w	r3, r3, r2
 8003ea0:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d108      	bne.n	8003ec8 <Endpoint_WaitUntilReady+0x70>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	791b      	ldrb	r3, [r3, #4]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <Endpoint_WaitUntilReady+0x70>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <Endpoint_WaitUntilReady+0x72>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01a      	beq.n	8003f0a <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e048      	b.n	8003f6a <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003eda:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ede:	461a      	mov	r2, r3
 8003ee0:	232c      	movs	r3, #44	; 0x2c
 8003ee2:	fb03 f302 	mul.w	r3, r3, r2
 8003ee6:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e02f      	b.n	8003f6a <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <Endpoint_WaitUntilReady+0x120>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	74fb      	strb	r3, [r7, #19]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8003f16:	2302      	movs	r3, #2
 8003f18:	e027      	b.n	8003f6a <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d101      	bne.n	8003f24 <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e022      	b.n	8003f6a <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003f26:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4a11      	ldr	r2, [pc, #68]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003f2e:	232c      	movs	r3, #44	; 0x2c
 8003f30:	fb03 f301 	mul.w	r3, r3, r1
 8003f34:	4413      	add	r3, r2
 8003f36:	7a1b      	ldrb	r3, [r3, #8]
 8003f38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f3c:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e011      	b.n	8003f6a <Endpoint_WaitUntilReady+0x112>
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <Endpoint_WaitUntilReady+0x11c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	4798      	blx	r3
 8003f4e:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8003f50:	823b      	strh	r3, [r7, #16]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8003f52:	8a3a      	ldrh	r2, [r7, #16]
 8003f54:	8abb      	ldrh	r3, [r7, #20]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d089      	beq.n	8003e6e <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 8003f5a:	8a3b      	ldrh	r3, [r7, #16]
 8003f5c:	82bb      	strh	r3, [r7, #20]

			if (!(TimeoutMSRem--))
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	1e5a      	subs	r2, r3, #1
 8003f62:	75fa      	strb	r2, [r7, #23]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d182      	bne.n	8003e6e <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 8003f68:	2304      	movs	r3, #4
		}
	}
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000e20 	.word	0x20000e20
 8003f78:	2000116d 	.word	0x2000116d

08003f7c <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003f82:	4b23      	ldr	r3, [pc, #140]	; (8004010 <Endpoint_ClearOUT+0x94>)
 8003f84:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003f88:	461a      	mov	r2, r3
 8003f8a:	232c      	movs	r3, #44	; 0x2c
 8003f8c:	fb03 f302 	mul.w	r3, r3, r2
 8003f90:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <Endpoint_ClearOUT+0x94>)
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02f      	beq.n	8004006 <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <Endpoint_ClearOUT+0x94>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	7810      	ldrb	r0, [r2, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6911      	ldr	r1, [r2, #16]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6952      	ldr	r2, [r2, #20]
 8003fb8:	4798      	blx	r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d118      	bne.n	8004008 <Endpoint_ClearOUT+0x8c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d114      	bne.n	8004008 <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	8893      	ldrh	r3, [r2, #4]
 8003fe2:	f043 0308 	orr.w	r3, r3, #8
 8003fe6:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	8893      	ldrh	r3, [r2, #4]
 8003fec:	f36f 1345 	bfc	r3, #5, #1
 8003ff0:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <Endpoint_ClearOUT+0x94>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	7810      	ldrb	r0, [r2, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6952      	ldr	r2, [r2, #20]
 8004000:	4611      	mov	r1, r2
 8004002:	4798      	blx	r3
 8004004:	e000      	b.n	8004008 <Endpoint_ClearOUT+0x8c>
		return;
 8004006:	bf00      	nop
				ep->OutBufferLength);
	}
}
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000e20 	.word	0x20000e20

08004014 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <Endpoint_ClearIN+0xe8>)
 800401c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004020:	461a      	mov	r2, r3
 8004022:	232c      	movs	r3, #44	; 0x2c
 8004024:	fb03 f302 	mul.w	r3, r3, r2
 8004028:	4a34      	ldr	r2, [pc, #208]	; (80040fc <Endpoint_ClearIN+0xe8>)
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d059      	beq.n	80040f2 <Endpoint_ClearIN+0xde>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	791b      	ldrb	r3, [r3, #4]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d052      	beq.n	80040f2 <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	8893      	ldrh	r3, [r2, #4]
 8004050:	f043 0310 	orr.w	r3, r3, #16
 8004054:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 800406c:	206b      	movs	r0, #107	; 0x6b
 800406e:	f7ff fed1 	bl	8003e14 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8004072:	4b22      	ldr	r3, [pc, #136]	; (80040fc <Endpoint_ClearIN+0xe8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004084:	4798      	blx	r3
 8004086:	6038      	str	r0, [r7, #0]
	ep->InDataBuffer += data_count;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 80040a0:	206b      	movs	r0, #107	; 0x6b
 80040a2:	f7ff fe99 	bl	8003dd8 <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <Endpoint_ClearIN+0xec>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d121      	bne.n	80040f4 <Endpoint_ClearIN+0xe0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01a      	beq.n	80040f4 <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 80040be:	bf00      	nop
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f8      	bne.n	80040c0 <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	8893      	ldrh	r3, [r2, #4]
 80040d2:	f043 0310 	orr.w	r3, r3, #16
 80040d6:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <Endpoint_ClearIN+0xe8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 80040e6:	2200      	movs	r2, #0
 80040e8:	4798      	blx	r3
	  zlp_flag = false;
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <Endpoint_ClearIN+0xec>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e000      	b.n	80040f4 <Endpoint_ClearIN+0xe0>
		return;
 80040f2:	bf00      	nop
	}
}
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000e20 	.word	0x20000e20
 8004100:	20000ad0 	.word	0x20000ad0

08004104 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <Endpoint_IsReadWriteAllowed+0x60>)
 800410c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004110:	461a      	mov	r2, r3
 8004112:	232c      	movs	r3, #44	; 0x2c
 8004114:	fb03 f302 	mul.w	r3, r3, r2
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <Endpoint_IsReadWriteAllowed+0x60>)
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8004120:	2300      	movs	r3, #0
 8004122:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	429a      	cmp	r2, r3
 800413c:	bf34      	ite	cc
 800413e:	2301      	movcc	r3, #1
 8004140:	2300      	movcs	r3, #0
 8004142:	71fb      	strb	r3, [r7, #7]
 8004144:	e006      	b.n	8004154 <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8004154:	79fb      	ldrb	r3, [r7, #7]
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000e20 	.word	0x20000e20

08004168 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8004172:	4b16      	ldr	r3, [pc, #88]	; (80041cc <Endpoint_Write_8+0x64>)
 8004174:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004178:	461a      	mov	r2, r3
 800417a:	232c      	movs	r3, #44	; 0x2c
 800417c:	fb03 f302 	mul.w	r3, r3, r2
 8004180:	4a12      	ldr	r2, [pc, #72]	; (80041cc <Endpoint_Write_8+0x64>)
 8004182:	4413      	add	r3, r2
 8004184:	3304      	adds	r3, #4
 8004186:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8004188:	2300      	movs	r3, #0
 800418a:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	429a      	cmp	r2, r3
 8004196:	d20d      	bcs.n	80041b4 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	619a      	str	r2, [r3, #24]

	      Success = true;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	f083 0301 	eor.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <Endpoint_Write_8+0x24>
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	20000e20 	.word	0x20000e20

080041d0 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <Endpoint_Read_8+0x6c>)
 80041d8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80041dc:	461a      	mov	r2, r3
 80041de:	232c      	movs	r3, #44	; 0x2c
 80041e0:	fb03 f302 	mul.w	r3, r3, r2
 80041e4:	4a15      	ldr	r2, [pc, #84]	; (800423c <Endpoint_Read_8+0x6c>)
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	603b      	str	r3, [r7, #0]
	bool Success = false;
 80041ec:	2300      	movs	r3, #0
 80041ee:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	71bb      	strb	r3, [r7, #6]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d012      	beq.n	8004222 <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	71bb      	strb	r3, [r7, #6]
          EndPoint->OutOffset++;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	609a      	str	r2, [r3, #8]
		  Success = true;
 800421e:	2301      	movs	r3, #1
 8004220:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f083 0301 	eor.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e2      	bne.n	80041f4 <Endpoint_Read_8+0x24>
	 return data;
 800422e:	79bb      	ldrb	r3, [r7, #6]
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000e20 	.word	0x20000e20

08004240 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <Endpoint_Write_32_LE+0x64>)
 800424a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800424e:	461a      	mov	r2, r3
 8004250:	232c      	movs	r3, #44	; 0x2c
 8004252:	fb03 f302 	mul.w	r3, r3, r2
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <Endpoint_Write_32_LE+0x64>)
 8004258:	4413      	add	r3, r2
 800425a:	3304      	adds	r3, #4
 800425c:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	3b03      	subs	r3, #3
 800426c:	429a      	cmp	r2, r3
 800426e:	d20d      	bcs.n	800428c <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	4413      	add	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	619a      	str	r2, [r3, #24]

			Success = true;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e4      	bne.n	8004262 <Endpoint_Write_32_LE+0x22>
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000e20 	.word	0x20000e20

080042a8 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80042ae:	4b19      	ldr	r3, [pc, #100]	; (8004314 <Endpoint_Read_32_LE+0x6c>)
 80042b0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80042b4:	461a      	mov	r2, r3
 80042b6:	232c      	movs	r3, #44	; 0x2c
 80042b8:	fb03 f302 	mul.w	r3, r3, r2
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <Endpoint_Read_32_LE+0x6c>)
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	607b      	str	r3, [r7, #4]
	bool Success = false;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d912      	bls.n	80042fa <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	1f1a      	subs	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	609a      	str	r2, [r3, #8]

			Success = true;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	f083 0301 	eor.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e2      	bne.n	80042cc <Endpoint_Read_32_LE+0x24>
	return data;
 8004306:	68bb      	ldr	r3, [r7, #8]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000e20 	.word	0x20000e20

08004318 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e091      	b.n	800444e <Endpoint_ConfigureEndpointTable+0x136>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8004342:	4b48      	ldr	r3, [pc, #288]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69dc      	ldr	r4, [r3, #28]
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	7818      	ldrb	r0, [r3, #0]
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	4613      	mov	r3, r2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4413      	add	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	461a      	mov	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	7919      	ldrb	r1, [r3, #4]
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	885b      	ldrh	r3, [r3, #2]
 800437e:	461a      	mov	r2, r3
 8004380:	47a0      	blx	r4
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 8004388:	2300      	movs	r3, #0
 800438a:	e066      	b.n	800445a <Endpoint_ConfigureEndpointTable+0x142>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	441a      	add	r2, r3
 800439c:	7bbb      	ldrb	r3, [r7, #14]
 800439e:	7810      	ldrb	r0, [r2, #0]
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043a2:	212c      	movs	r1, #44	; 0x2c
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	4602      	mov	r2, r0
 80043ae:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4413      	add	r3, r2
 80043c0:	885a      	ldrh	r2, [r3, #2]
 80043c2:	7bbb      	ldrb	r3, [r7, #14]
 80043c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043c8:	b2d1      	uxtb	r1, r2
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043cc:	202c      	movs	r0, #44	; 0x2c
 80043ce:	fb00 f303 	mul.w	r3, r0, r3
 80043d2:	441a      	add	r2, r3
 80043d4:	8913      	ldrh	r3, [r2, #8]
 80043d6:	f361 138c 	bfi	r3, r1, #6, #7
 80043da:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 80043dc:	7bbb      	ldrb	r3, [r7, #14]
 80043de:	4a21      	ldr	r2, [pc, #132]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	441a      	add	r2, r3
 80043e8:	7a13      	ldrb	r3, [r2, #8]
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 80043f0:	7bbb      	ldrb	r3, [r7, #14]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	441a      	add	r2, r3
 80043fc:	7a13      	ldrb	r3, [r2, #8]
 80043fe:	f043 0302 	orr.w	r3, r3, #2
 8004402:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b25b      	sxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	db15      	blt.n	8004448 <Endpoint_ConfigureEndpointTable+0x130>
			device.Driver->EndpointReadStart(Table[i].Address,
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	7818      	ldrb	r0, [r3, #0]
 8004434:	7bbb      	ldrb	r3, [r7, #14]
 8004436:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3318      	adds	r3, #24
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4619      	mov	r1, r3
 8004446:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	3301      	adds	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	429a      	cmp	r2, r3
 8004454:	f4ff af69 	bcc.w	800432a <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8004458:	2301      	movs	r3, #1
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bd90      	pop	{r4, r7, pc}
 8004462:	bf00      	nop
 8004464:	20000e20 	.word	0x20000e20

08004468 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	50004600 	.word	0x50004600

08004484 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	50004600 	.word	0x50004600

080044a0 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	b2db      	uxtb	r3, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	50004600 	.word	0x50004600

080044c0 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	2000ffc0 	.word	0x2000ffc0
 80044e4:	50004600 	.word	0x50004600

080044e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	2000ffc0 	.word	0x2000ffc0

08004500 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <XMC_SCU_GetMirrorStatus+0x14>)
 8004506:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	50004000 	.word	0x50004000

08004518 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8004520:	f002 f88a 	bl	8006638 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <XMC_SCU_lDelay+0x40>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0c      	ldr	r2, [pc, #48]	; (800455c <XMC_SCU_lDelay+0x44>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0c9a      	lsrs	r2, r3, #18
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e003      	b.n	8004546 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800453e:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3301      	adds	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d3f7      	bcc.n	800453e <XMC_SCU_lDelay+0x26>
  }
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	2000ffc0 	.word	0x2000ffc0
 800455c:	431bde83 	.word	0x431bde83

08004560 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	4904      	ldr	r1, [pc, #16]	; (8004580 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	50004074 	.word	0x50004074

08004584 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	43db      	mvns	r3, r3
 8004594:	4904      	ldr	r1, [pc, #16]	; (80045a8 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8004596:	4013      	ands	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	50004074 	.word	0x50004074

080045ac <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	4904      	ldr	r1, [pc, #16]	; (80045cc <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4313      	orrs	r3, r2
 80045be:	610b      	str	r3, [r1, #16]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	50004074 	.word	0x50004074

080045d0 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80045d6:	685b      	ldr	r3, [r3, #4]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	50004074 	.word	0x50004074

080045e8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60d3      	str	r3, [r2, #12]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	50004074 	.word	0x50004074

08004608 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <XMC_SCU_GetBootMode+0x18>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	50004000 	.word	0x50004000

08004624 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 800462e:	4a04      	ldr	r2, [pc, #16]	; (8004640 <XMC_SCU_SetBootMode+0x1c>)
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	6113      	str	r3, [r2, #16]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	50004000 	.word	0x50004000

08004644 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 800464c:	4a05      	ldr	r2, [pc, #20]	; (8004664 <XMC_SCU_ReadGPR+0x20>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	330a      	adds	r3, #10
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	685b      	ldr	r3, [r3, #4]
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	50004000 	.word	0x50004000

08004668 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8004672:	4a06      	ldr	r2, [pc, #24]	; (800468c <XMC_SCU_WriteGPR+0x24>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	330a      	adds	r3, #10
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	605a      	str	r2, [r3, #4]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	50004000 	.word	0x50004000

08004690 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3328      	adds	r3, #40	; 0x28
 80046a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046a4:	2101      	movs	r1, #1
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	4905      	ldr	r1, [pc, #20]	; (80046c4 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3328      	adds	r3, #40	; 0x28
 80046b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	50004000 	.word	0x50004000

080046c8 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 80046d2:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3328      	adds	r3, #40	; 0x28
 80046d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046dc:	2101      	movs	r1, #1
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	4906      	ldr	r1, [pc, #24]	; (8004700 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 80046e8:	401a      	ands	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3328      	adds	r3, #40	; 0x28
 80046ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	50004000 	.word	0x50004000

08004704 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8004716:	4313      	orrs	r3, r2
 8004718:	4a05      	ldr	r2, [pc, #20]	; (8004730 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 800471a:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 800471e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	50004000 	.word	0x50004000

08004734 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <XMC_SCU_EnableTemperatureSensor+0x20>)
 800473a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	50004000 	.word	0x50004000

08004758 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <XMC_SCU_DisableTemperatureSensor+0x20>)
 800475e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004762:	4a05      	ldr	r2, [pc, #20]	; (8004778 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	50004000 	.word	0x50004000

0800477c <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8004782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	50004000 	.word	0x50004000

080047a4 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 80047a8:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	50004000 	.word	0x50004000

080047cc <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80047d6:	f7ff ffd1 	bl	800477c <XMC_SCU_IsTemperatureSensorEnabled>
 80047da:	4603      	mov	r3, r0
 80047dc:	f083 0301 	eor.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 80047ea:	f000 f831 	bl	8004850 <XMC_SCU_IsTemperatureSensorBusy>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8004808:	79fb      	ldrb	r3, [r7, #7]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	50004000 	.word	0x50004000

08004818 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 800481e:	f7ff ffad 	bl	800477c <XMC_SCU_IsTemperatureSensorEnabled>
 8004822:	4603      	mov	r3, r0
 8004824:	f083 0301 	eor.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 800482e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	e005      	b.n	8004842 <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004840:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8004842:	687b      	ldr	r3, [r7, #4]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	50004000 	.word	0x50004000

08004850 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	50004000 	.word	0x50004000

08004878 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800488a:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8004894:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800489c:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <XMC_SCU_WriteToRetentionMemory+0x48>)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80048a4:	bf00      	nop
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <XMC_SCU_WriteToRetentionMemory+0x48>)
 80048a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80048ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f8      	bne.n	80048a6 <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	50004000 	.word	0x50004000

080048c4 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80048d4:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80048de:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80048e6:	bf00      	nop
 80048e8:	4b07      	ldr	r3, [pc, #28]	; (8004908 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80048ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80048ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f8      	bne.n	80048e8 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80048f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	50004000 	.word	0x50004000

0800490c <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b085      	sub	sp, #20
 8004910:	af02      	add	r7, sp, #8
 8004912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8004914:	2000      	movs	r0, #0
 8004916:	f000 faf1 	bl	8004efc <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800491a:	f000 fd7f 	bl	800541c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	79db      	ldrb	r3, [r3, #7]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8004926:	f000 ff77 	bl	8005818 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800492a:	bf00      	nop
 800492c:	f000 ff62 	bl	80057f4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8004930:	4603      	mov	r3, r0
 8004932:	f083 0301 	eor.w	r3, r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f7      	bne.n	800492c <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	7a5b      	ldrb	r3, [r3, #9]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fb6f 	bl	8005024 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8004946:	bf00      	nop
 8004948:	f7ff fdda 	bl	8004500 <XMC_SCU_GetMirrorStatus>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1fa      	bne.n	8004948 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7a1b      	ldrb	r3, [r3, #8]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fd0c 	bl	8005374 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7c1b      	ldrb	r3, [r3, #16]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fb7f 	bl	8005064 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7c5b      	ldrb	r3, [r3, #17]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fba6 	bl	80050bc <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	7c9b      	ldrb	r3, [r3, #18]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fb8b 	bl	8005090 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7cdb      	ldrb	r3, [r3, #19]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fbb2 	bl	80050e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	799b      	ldrb	r3, [r3, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800498c:	f000 ffd8 	bl	8005940 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8004990:	bf00      	nop
 8004992:	f000 fffd 	bl	8005990 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8004996:	4603      	mov	r3, r0
 8004998:	f083 0301 	eor.w	r3, r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f7      	bne.n	8004992 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	78db      	ldrb	r3, [r3, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80049aa:	f001 f855 	bl	8005a58 <XMC_SCU_CLOCK_DisableSystemPll>
 80049ae:	e011      	b.n	80049d4 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80049b0:	f001 f840 	bl	8005a34 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8898      	ldrh	r0, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80049c0:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80049c6:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4623      	mov	r3, r4
 80049d0:	f001 f854 	bl	8005a7c <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d103      	bne.n	80049e6 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80049de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80049e2:	f000 fa8b 	bl	8004efc <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80049e6:	f001 fe27 	bl	8006638 <SystemCoreClockUpdate>
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}
	...

080049f4 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <XMC_SCU_TRAP_Enable+0x24>)
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	4904      	ldr	r1, [pc, #16]	; (8004a18 <XMC_SCU_TRAP_Enable+0x24>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	50004160 	.word	0x50004160

08004a1c <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <XMC_SCU_TRAP_Disable+0x20>)
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	4904      	ldr	r1, [pc, #16]	; (8004a3c <XMC_SCU_TRAP_Disable+0x20>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	608b      	str	r3, [r1, #8]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	50004160 	.word	0x50004160

08004a40 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <XMC_SCU_TRAP_GetStatus+0x14>)
 8004a46:	685b      	ldr	r3, [r3, #4]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	50004160 	.word	0x50004160

08004a58 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8004a60:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <XMC_SCU_TRAP_Trigger+0x1c>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6113      	str	r3, [r2, #16]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	50004160 	.word	0x50004160

08004a78 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60d3      	str	r3, [r2, #12]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	50004160 	.word	0x50004160

08004a98 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	614b      	str	r3, [r1, #20]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	5000413c 	.word	0x5000413c

08004abc <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <XMC_SCU_PARITY_GetStatus+0x14>)
 8004ac2:	695b      	ldr	r3, [r3, #20]
} 
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	5000413c 	.word	0x5000413c

08004ad4 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <XMC_SCU_PARITY_Enable+0x20>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4904      	ldr	r1, [pc, #16]	; (8004af4 <XMC_SCU_PARITY_Enable+0x20>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	600b      	str	r3, [r1, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	5000413c 	.word	0x5000413c

08004af8 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <XMC_SCU_PARITY_Disable+0x24>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	4904      	ldr	r1, [pc, #16]	; (8004b1c <XMC_SCU_PARITY_Disable+0x24>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	5000413c 	.word	0x5000413c

08004b20 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4904      	ldr	r1, [pc, #16]	; (8004b40 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	5000413c 	.word	0x5000413c

08004b44 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	4904      	ldr	r1, [pc, #16]	; (8004b68 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	5000413c 	.word	0x5000413c

08004b6c <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	614b      	str	r3, [r1, #20]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	50004074 	.word	0x50004074

08004b90 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	614b      	str	r3, [r1, #20]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	50004074 	.word	0x50004074

08004bb8 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	0f1b      	lsrs	r3, r3, #28
 8004bc4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bcc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8004bdc:	4413      	add	r3, r2
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	50004410 	.word	0x50004410

08004bf4 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	0f1b      	lsrs	r3, r3, #28
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c08:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8004c18:	4413      	add	r3, r2
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	601a      	str	r2, [r3, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	50004414 	.word	0x50004414

08004c30 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0f1b      	lsrs	r3, r3, #28
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c44:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8004c54:	4413      	add	r3, r2
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	5000440c 	.word	0x5000440c

08004c78 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8004c7e:	f000 f839 	bl	8004cf4 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8004c82:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c98:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e01f      	b.n	8004ce4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cca:	3301      	adds	r3, #1
 8004ccc:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	fb02 f203 	mul.w	r2, r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	50004710 	.word	0x50004710

08004cf4 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 8004d06:	f001 fd01 	bl	800670c <OSCHP_GetFrequency>
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	e001      	b.n	8004d12 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8004d10:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 8004d12:	687b      	ldr	r3, [r7, #4]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	50004710 	.word	0x50004710
 8004d20:	016e3600 	.word	0x016e3600

08004d24 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8004d2a:	f001 fcef 	bl	800670c <OSCHP_GetFrequency>
 8004d2e:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8004d30:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d46:	3301      	adds	r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	0e1b      	lsrs	r3, r3, #24
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	3301      	adds	r3, #1
 8004d56:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	fb02 f203 	mul.w	r2, r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	50004710 	.word	0x50004710

08004d78 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8004d82:	f7ff fb9d 	bl	80044c0 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8004d86:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	50004600 	.word	0x50004600

08004da4 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 8004dae:	f7ff fb5b 	bl	8004468 <XMC_SCU_CLOCK_GetUsbClockSource>
 8004db2:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dba:	d103      	bne.n	8004dc4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004dbc:	f7ff ff5c 	bl	8004c78 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	e005      	b.n	8004dd0 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8004dca:	f7ff ffab 	bl	8004d24 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8004dce:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8004dd8:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	50004600 	.word	0x50004600

08004dec <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004df2:	f7ff ff41 	bl	8004c78 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004df6:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8004e00:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	50004600 	.word	0x50004600

08004e14 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8004e1e:	f7ff fb31 	bl	8004484 <XMC_SCU_CLOCK_GetWdtClockSource>
 8004e22:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e2a:	d103      	bne.n	8004e34 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004e2c:	f7ff ff24 	bl	8004c78 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	e00c      	b.n	8004e4e <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	e006      	b.n	8004e4e <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e46:	d102      	bne.n	8004e4e <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8004e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4c:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8004e54:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	016e3600 	.word	0x016e3600
 8004e68:	50004600 	.word	0x50004600

08004e6c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8004e76:	f7ff fb13 	bl	80044a0 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d10d      	bne.n	8004ea0 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8004e84:	f7ff fef8 	bl	8004c78 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8004e88:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8004e94:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	e016      	b.n	8004ece <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8004ea6:	f7ff fb0b 	bl	80044c0 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	e00f      	b.n	8004ece <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d10c      	bne.n	8004ece <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8004eb4:	f7ff ff36 	bl	8004d24 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8004eb8:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	0c1b      	lsrs	r3, r3, #16
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8004ec4:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 8004ece:	687b      	ldr	r3, [r7, #4]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	50004600 	.word	0x50004600

08004edc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8004ee0:	f7ff fb02 	bl	80044e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8004ee4:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8004ee6:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	50004600 	.word	0x50004600

08004efc <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f0c:	4904      	ldr	r1, [pc, #16]	; (8004f20 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	50004600 	.word	0x50004600

08004f24 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f34:	4904      	ldr	r1, [pc, #16]	; (8004f48 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	50004600 	.word	0x50004600

08004f4c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f5c:	4904      	ldr	r1, [pc, #16]	; (8004f70 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	50004600 	.word	0x50004600

08004f74 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8004f86:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8004f88:	4904      	ldr	r1, [pc, #16]	; (8004f9c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	50004600 	.word	0x50004600

08004fa0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d108      	bne.n	8004fc2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8004fc0:	e007      	b.n	8004fd2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4a06      	ldr	r2, [pc, #24]	; (8004fe0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	60d3      	str	r3, [r2, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	50004710 	.word	0x50004710

08004fe4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8004fee:	bf00      	nop
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8004ff2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f8      	bne.n	8004ff0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8005006:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8005008:	4905      	ldr	r1, [pc, #20]	; (8005020 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	60cb      	str	r3, [r1, #12]
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	50004000 	.word	0x50004000
 8005020:	50004300 	.word	0x50004300

08005024 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800502e:	bf00      	nop
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8005032:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f8      	bne.n	8005030 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8005046:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8005048:	4905      	ldr	r1, [pc, #20]	; (8005060 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	60cb      	str	r3, [r1, #12]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	50004000 	.word	0x50004000
 8005060:	50004300 	.word	0x50004300

08005064 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8005078:	4904      	ldr	r1, [pc, #16]	; (800508c <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800507a:	4313      	orrs	r3, r2
 800507c:	60cb      	str	r3, [r1, #12]
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	50004600 	.word	0x50004600

08005090 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80050a4:	4904      	ldr	r1, [pc, #16]	; (80050b8 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	620b      	str	r3, [r1, #32]
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	50004600 	.word	0x50004600

080050bc <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80050d0:	4904      	ldr	r1, [pc, #16]	; (80050e4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	610b      	str	r3, [r1, #16]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	50004600 	.word	0x50004600

080050e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80050fc:	4904      	ldr	r1, [pc, #16]	; (8005110 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	614b      	str	r3, [r1, #20]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	50004600 	.word	0x50004600

08005114 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8005128:	4904      	ldr	r1, [pc, #16]	; (800513c <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 800512a:	4313      	orrs	r3, r2
 800512c:	618b      	str	r3, [r1, #24]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	50004600 	.word	0x50004600

08005140 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8005154:	4904      	ldr	r1, [pc, #16]	; (8005168 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8005156:	4313      	orrs	r3, r2
 8005158:	61cb      	str	r3, [r1, #28]
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	50004600 	.word	0x50004600

0800516c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8005182:	4313      	orrs	r3, r2
 8005184:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	50004600 	.word	0x50004600

08005198 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80051a0:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80051a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	50004600 	.word	0x50004600

080051c8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80051d2:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	6053      	str	r3, [r2, #4]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	50004600 	.word	0x50004600

080051e8 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 80051f2:	4a04      	ldr	r2, [pc, #16]	; (8005204 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	6093      	str	r3, [r2, #8]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	50004600 	.word	0x50004600

08005208 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf14      	ite	ne
 800521e:	2301      	movne	r3, #1
 8005220:	2300      	moveq	r3, #0
 8005222:	b2db      	uxtb	r3, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	50004600 	.word	0x50004600

08005234 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8005238:	4b08      	ldr	r3, [pc, #32]	; (800525c <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005260 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 800524a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800524e:	ee17 3a90 	vmov	r3, s15
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	50004200 	.word	0x50004200
 8005260:	3bbe0ded 	.word	0x3bbe0ded

08005264 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8005268:	4b09      	ldr	r3, [pc, #36]	; (8005290 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	b2db      	uxtb	r3, r3
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005278:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005294 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 800527c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005280:	ee17 3a90 	vmov	r3, s15
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	50004200 	.word	0x50004200
 8005294:	3cb851ec 	.word	0x3cb851ec

08005298 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	f023 0302 	bic.w	r3, r3, #2
 80052aa:	6153      	str	r3, [r2, #20]
}
 80052ac:	bf00      	nop
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	50004710 	.word	0x50004710

080052bc <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	4a05      	ldr	r2, [pc, #20]	; (80052dc <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ca:	f043 0302 	orr.w	r3, r3, #2
 80052ce:	6153      	str	r3, [r2, #20]
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	50004710 	.word	0x50004710

080052e0 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80052ea:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	4a19      	ldr	r2, [pc, #100]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80052f6:	4b17      	ldr	r3, [pc, #92]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4a16      	ldr	r2, [pc, #88]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80052fc:	f043 0310 	orr.w	r3, r3, #16
 8005300:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	3b01      	subs	r3, #1
 8005306:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3b01      	subs	r3, #1
 800530c:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800530e:	4911      	ldr	r1, [pc, #68]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005310:	4313      	orrs	r3, r2
 8005312:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800531a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	4a0b      	ldr	r2, [pc, #44]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005326:	f023 0310 	bic.w	r3, r3, #16
 800532a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	4a08      	ldr	r2, [pc, #32]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8005332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005336:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8005338:	bf00      	nop
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f9      	beq.n	800533a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	50004710 	.word	0x50004710

08005358 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 800535e:	4a04      	ldr	r2, [pc, #16]	; (8005370 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8005360:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8005362:	bf00      	nop
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	50004710 	.word	0x50004710
 8005370:	00010003 	.word	0x00010003

08005374 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800537e:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005388:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d10e      	bne.n	80053ae <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a09      	ldr	r2, [pc, #36]	; (80053bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8005396:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800539a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 800539c:	2064      	movs	r0, #100	; 0x64
 800539e:	f7ff f8bb 	bl	8004518 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4a05      	ldr	r2, [pc, #20]	; (80053bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80053a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ac:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80053ae:	2064      	movs	r0, #100	; 0x64
 80053b0:	f7ff f8b2 	bl	8004518 <XMC_SCU_lDelay>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	50004710 	.word	0x50004710

080053c0 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <XMC_SCU_POWER_EnableUsb+0x18>)
 80053c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053ca:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	50004200 	.word	0x50004200

080053dc <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <XMC_SCU_POWER_DisableUsb+0x18>)
 80053e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053e6:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 80053e8:	bf00      	nop
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	50004200 	.word	0x50004200

080053f8 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
}
 800540e:	4618      	mov	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	50004710 	.word	0x50004710

0800541c <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800542e:	2201      	movs	r2, #1
 8005430:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8005432:	bf00      	nop
 8005434:	4b0d      	ldr	r3, [pc, #52]	; (800546c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f9      	beq.n	8005434 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 800544c:	4b08      	ldr	r3, [pc, #32]	; (8005470 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800544e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005452:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8005454:	bf00      	nop
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f9      	bne.n	8005456 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8005462:	bf00      	nop
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	50004200 	.word	0x50004200
 8005470:	50004400 	.word	0x50004400

08005474 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 800547a:	2201      	movs	r2, #1
 800547c:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8005480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005484:	605a      	str	r2, [r3, #4]
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	50004200 	.word	0x50004200
 8005494:	50004400 	.word	0x50004400

08005498 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 80054b8:	2300      	movs	r3, #0
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	b2db      	uxtb	r3, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	50004200 	.word	0x50004200
 80054d0:	50004400 	.word	0x50004400

080054d4 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 80054d8:	bf00      	nop
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 80054dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f8      	bne.n	80054da <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	4a05      	ldr	r2, [pc, #20]	; (8005504 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	6153      	str	r3, [r2, #20]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	50004000 	.word	0x50004000
 8005504:	50004300 	.word	0x50004300

08005508 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 800550c:	bf00      	nop
 800550e:	4b09      	ldr	r3, [pc, #36]	; (8005534 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8005510:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f8      	bne.n	800550e <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	4a05      	ldr	r2, [pc, #20]	; (8005538 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	6153      	str	r3, [r2, #20]
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	50004000 	.word	0x50004000
 8005538:	50004300 	.word	0x50004300

0800553c <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8005544:	bf00      	nop
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8005548:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f8      	bne.n	8005546 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8005554:	4a05      	ldr	r2, [pc, #20]	; (800556c <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6053      	str	r3, [r2, #4]
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	50004000 	.word	0x50004000
 800556c:	50004300 	.word	0x50004300

08005570 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8005578:	bf00      	nop
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <XMC_SCU_HIB_TriggerEvent+0x2c>)
 800557c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f8      	bne.n	800557a <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8005588:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <XMC_SCU_HIB_TriggerEvent+0x30>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6093      	str	r3, [r2, #8]
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	50004000 	.word	0x50004000
 80055a0:	50004300 	.word	0x50004300

080055a4 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80055ac:	bf00      	nop
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <XMC_SCU_HIB_EnableEvent+0x30>)
 80055b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f8      	bne.n	80055ae <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <XMC_SCU_HIB_EnableEvent+0x34>)
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4905      	ldr	r1, [pc, #20]	; (80055d8 <XMC_SCU_HIB_EnableEvent+0x34>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60cb      	str	r3, [r1, #12]
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	50004000 	.word	0x50004000
 80055d8:	50004300 	.word	0x50004300

080055dc <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80055e4:	bf00      	nop
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <XMC_SCU_HIB_DisableEvent+0x34>)
 80055e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f8      	bne.n	80055e6 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 80055f4:	4b07      	ldr	r3, [pc, #28]	; (8005614 <XMC_SCU_HIB_DisableEvent+0x38>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	43d2      	mvns	r2, r2
 80055fc:	4611      	mov	r1, r2
 80055fe:	4a05      	ldr	r2, [pc, #20]	; (8005614 <XMC_SCU_HIB_DisableEvent+0x38>)
 8005600:	400b      	ands	r3, r1
 8005602:	60d3      	str	r3, [r2, #12]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	50004000 	.word	0x50004000
 8005614:	50004300 	.word	0x50004300

08005618 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800561c:	bf00      	nop
 800561e:	4b09      	ldr	r3, [pc, #36]	; (8005644 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8005620:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f8      	bne.n	800561e <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a05      	ldr	r2, [pc, #20]	; (8005648 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8005632:	f043 0310 	orr.w	r3, r3, #16
 8005636:	60d3      	str	r3, [r2, #12]
}
 8005638:	bf00      	nop
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	50004000 	.word	0x50004000
 8005648:	50004300 	.word	0x50004300

0800564c <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 800565c:	f7ff ffdc 	bl	8005618 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005672:	bf00      	nop
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8005676:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f8      	bne.n	8005674 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800568e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005692:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8005694:	e005      	b.n	80056a2 <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4a06      	ldr	r2, [pc, #24]	; (80056b4 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800569c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a0:	60d3      	str	r3, [r2, #12]
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	50004000 	.word	0x50004000
 80056b4:	50004300 	.word	0x50004300

080056b8 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80056c4:	bf00      	nop
 80056c6:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <XMC_SCU_HIB_SetPinMode+0x4c>)
 80056c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f8      	bne.n	80056c6 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <XMC_SCU_HIB_SetPinMode+0x50>)
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	43db      	mvns	r3, r3
 80056e6:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80056f2:	4905      	ldr	r1, [pc, #20]	; (8005708 <XMC_SCU_HIB_SetPinMode+0x50>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60cb      	str	r3, [r1, #12]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	50004000 	.word	0x50004000
 8005708:	50004300 	.word	0x50004300

0800570c <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	460a      	mov	r2, r1
 8005716:	71fb      	strb	r3, [r7, #7]
 8005718:	4613      	mov	r3, r2
 800571a:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800571c:	bf00      	nop
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8005720:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f8      	bne.n	800571e <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	4013      	ands	r3, r2
                        (level << pin);
 800573e:	88b9      	ldrh	r1, [r7, #4]
 8005740:	79fa      	ldrb	r2, [r7, #7]
 8005742:	fa01 f202 	lsl.w	r2, r1, r2
 8005746:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 800574a:	430b      	orrs	r3, r1
 800574c:	60d3      	str	r3, [r2, #12]
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	50004000 	.word	0x50004000
 8005760:	50004300 	.word	0x50004300

08005764 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800576e:	bf00      	nop
 8005770:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <XMC_SCU_HIB_SetInput0+0x48>)
 8005772:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f8      	bne.n	8005770 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <XMC_SCU_HIB_SetInput0+0x4c>)
 800578a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800578e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8005790:	e005      	b.n	800579e <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	4a06      	ldr	r2, [pc, #24]	; (80057b0 <XMC_SCU_HIB_SetInput0+0x4c>)
 8005798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579c:	60d3      	str	r3, [r2, #12]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	50004000 	.word	0x50004000
 80057b0:	50004300 	.word	0x50004300

080057b4 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80057be:	bf00      	nop
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <XMC_SCU_HIB_SetSR0Input+0x38>)
 80057c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f8      	bne.n	80057c0 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 80057ce:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	4905      	ldr	r1, [pc, #20]	; (80057f0 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	50004000 	.word	0x50004000
 80057f0:	50004300 	.word	0x50004300

080057f4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	bf0c      	ite	eq
 8005804:	2301      	moveq	r3, #1
 8005806:	2300      	movne	r3, #0
 8005808:	b2db      	uxtb	r3, r3
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	50004300 	.word	0x50004300

08005818 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800581c:	bf00      	nop
 800581e:	4b17      	ldr	r3, [pc, #92]	; (800587c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8005820:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f8      	bne.n	800581e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8005832:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005836:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8005838:	bf00      	nop
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 800583c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f8      	bne.n	800583a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800584e:	f043 0308 	orr.w	r3, r3, #8
 8005852:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8005854:	bf00      	nop
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8005858:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f8      	bne.n	8005856 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8005866:	2208      	movs	r2, #8
 8005868:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 800586a:	bf00      	nop
 800586c:	f7fe fe48 	bl	8004500 <XMC_SCU_GetMirrorStatus>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1fa      	bne.n	800586c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8005876:	bf00      	nop
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	50004000 	.word	0x50004000
 8005880:	50004300 	.word	0x50004300

08005884 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8005888:	bf00      	nop
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 800588c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f8      	bne.n	800588a <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4a05      	ldr	r2, [pc, #20]	; (80058b4 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 800589e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80058a2:	61d3      	str	r3, [r2, #28]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	50004000 	.word	0x50004000
 80058b4:	50004300 	.word	0x50004300

080058b8 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80058bc:	bf00      	nop
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 80058c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80058c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f8      	bne.n	80058be <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4a05      	ldr	r2, [pc, #20]	; (80058e8 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80058d2:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 80058d6:	61d3      	str	r3, [r2, #28]
}
 80058d8:	bf00      	nop
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	50004000 	.word	0x50004000
 80058e8:	50004300 	.word	0x50004300

080058ec <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80058f0:	bf00      	nop
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80058f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f8      	bne.n	80058f2 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8005908:	4a05      	ldr	r2, [pc, #20]	; (8005920 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 800590a:	f043 0320 	orr.w	r3, r3, #32
 800590e:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	50004000 	.word	0x50004000
 8005920:	50004300 	.word	0x50004300

08005924 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f003 0301 	and.w	r3, r3, #1
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	50004300 	.word	0x50004300

08005940 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8005940:	b598      	push	{r3, r4, r7, lr}
 8005942:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8005944:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a0e      	ldr	r2, [pc, #56]	; (8005984 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8005950:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8005958:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 800595c:	f000 fed6 	bl	800670c <OSCHP_GetFrequency>
 8005960:	4602      	mov	r2, r0
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8005964:	fba3 2302 	umull	r2, r3, r3, r2
 8005968:	0d1b      	lsrs	r3, r3, #20
 800596a:	3b01      	subs	r3, #1
 800596c:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800596e:	4a06      	ldr	r2, [pc, #24]	; (8005988 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8005970:	4323      	orrs	r3, r4
 8005972:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4a02      	ldr	r2, [pc, #8]	; (8005984 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800597a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800597e:	6053      	str	r3, [r2, #4]
}
 8005980:	bf00      	nop
 8005982:	bd98      	pop	{r3, r4, r7, pc}
 8005984:	50004710 	.word	0x50004710
 8005988:	50004700 	.word	0x50004700
 800598c:	6b5fca6b 	.word	0x6b5fca6b

08005990 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800599c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	50004710 	.word	0x50004710

080059b8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 80059c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80059c6:	6053      	str	r3, [r2, #4]
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	50004700 	.word	0x50004700

080059d8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6053      	str	r3, [r2, #4]
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	50004700 	.word	0x50004700

080059f8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	6053      	str	r3, [r2, #4]
}
 8005a08:	bf00      	nop
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	50004700 	.word	0x50004700

08005a18 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	50004700 	.word	0x50004700

08005a34 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8005a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a42:	f023 0302 	bic.w	r3, r3, #2
 8005a46:	6053      	str	r3, [r2, #4]
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	50004710 	.word	0x50004710

08005a58 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4a05      	ldr	r2, [pc, #20]	; (8005a78 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8005a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a66:	f043 0302 	orr.w	r3, r3, #2
 8005a6a:	6053      	str	r3, [r2, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	50004710 	.word	0x50004710

08005a7c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60ba      	str	r2, [r7, #8]
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	4603      	mov	r3, r0
 8005a88:	81fb      	strh	r3, [r7, #14]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8005a8e:	89fb      	ldrh	r3, [r7, #14]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fa85 	bl	8004fa0 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8005a96:	7b7b      	ldrb	r3, [r7, #13]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	f040 8084 	bne.w	8005ba6 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8005a9e:	89fb      	ldrh	r3, [r7, #14]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8005aa4:	f000 fe32 	bl	800670c <OSCHP_GetFrequency>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b4c      	ldr	r3, [pc, #304]	; (8005bdc <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8005aac:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab0:	0c9b      	lsrs	r3, r3, #18
 8005ab2:	059b      	lsls	r3, r3, #22
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	e002      	b.n	8005abe <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8005ab8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8005abc:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	fb02 f203 	mul.w	r2, r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	4a43      	ldr	r2, [pc, #268]	; (8005be0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	0d9b      	lsrs	r3, r3, #22
 8005ada:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005adc:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4a40      	ldr	r2, [pc, #256]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8005ae8:	4b3e      	ldr	r3, [pc, #248]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4a3d      	ldr	r2, [pc, #244]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005aee:	f043 0310 	orr.w	r3, r3, #16
 8005af2:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8005af4:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8005afa:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	3a01      	subs	r2, #1
 8005b00:	0212      	lsls	r2, r2, #8
 8005b02:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005b0a:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8005b12:	4934      	ldr	r1, [pc, #208]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005b18:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b22:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8005b24:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a2e      	ldr	r2, [pc, #184]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8005b30:	4b2c      	ldr	r3, [pc, #176]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a2b      	ldr	r2, [pc, #172]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b3a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005b3c:	bf00      	nop
 8005b3e:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0f9      	beq.n	8005b3e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005b4a:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8005b56:	bf00      	nop
 8005b58:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f9      	bne.n	8005b58 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4a21      	ldr	r2, [pc, #132]	; (8005bec <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	0d9b      	lsrs	r3, r3, #22
 8005b70:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8005b72:	6a3a      	ldr	r2, [r7, #32]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d202      	bcs.n	8005b80 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005b7a:	6938      	ldr	r0, [r7, #16]
 8005b7c:	f000 f84a 	bl	8005c14 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	4a1a      	ldr	r2, [pc, #104]	; (8005bf0 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	0d9b      	lsrs	r3, r3, #22
 8005b8e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d202      	bcs.n	8005b9e <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8005b98:	6938      	ldr	r0, [r7, #16]
 8005b9a:	f000 f83b 	bl	8005c14 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8005b9e:	6a38      	ldr	r0, [r7, #32]
 8005ba0:	f000 f838 	bl	8005c14 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8005ba4:	e015      	b.n	8005bd2 <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8005bb2:	490c      	ldr	r1, [pc, #48]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8005bc4:	bf00      	nop
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f9      	beq.n	8005bc6 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 8005bd2:	bf00      	nop
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	431bde83 	.word	0x431bde83
 8005be0:	aaaaaaab 	.word	0xaaaaaaab
 8005be4:	50004710 	.word	0x50004710
 8005be8:	f08080ff 	.word	0xf08080ff
 8005bec:	88888889 	.word	0x88888889
 8005bf0:	b60b60b7 	.word	0xb60b60b7

08005bf4 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a04      	ldr	r2, [pc, #16]	; (8005c10 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8005bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c02:	6053      	str	r3, [r2, #4]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	50004710 	.word	0x50004710

08005c14 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8005c2a:	4905      	ldr	r1, [pc, #20]	; (8005c40 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8005c30:	2032      	movs	r0, #50	; 0x32
 8005c32:	f7fe fc71 	bl	8004518 <XMC_SCU_lDelay>
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	50004710 	.word	0x50004710

08005c44 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	50004710 	.word	0x50004710

08005c68 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8005c76:	e002      	b.n	8005c7e <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b1f      	cmp	r3, #31
 8005c92:	d9f1      	bls.n	8005c78 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d102      	bne.n	8005ca0 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	72fb      	strb	r3, [r7, #11]
 8005c9e:	e006      	b.n	8005cae <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8005ca0:	4906      	ldr	r1, [pc, #24]	; (8005cbc <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8005caa:	2300      	movs	r3, #0
 8005cac:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8005cae:	7afb      	ldrb	r3, [r7, #11]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20001178 	.word	0x20001178

08005cc0 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8005ccc:	f7fe fc80 	bl	80045d0 <XMC_SCU_INTERUPT_GetEventStatus>
 8005cd0:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8005cd2:	e01c      	b.n	8005d0e <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d011      	beq.n	8005d08 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8005ce4:	4a0d      	ldr	r2, [pc, #52]	; (8005d1c <XMC_SCU_IRQHandler+0x5c>)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cec:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fc71 	bl	80045e8 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 8005d06:	e005      	b.n	8005d14 <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b1f      	cmp	r3, #31
 8005d12:	d9df      	bls.n	8005cd4 <XMC_SCU_IRQHandler+0x14>
  }
}
 8005d14:	bf00      	nop
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20001178 	.word	0x20001178

08005d20 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <Endpoint_Write_Stream_LE+0x10c>)
 8005d30:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005d34:	461a      	mov	r2, r3
 8005d36:	232c      	movs	r3, #44	; 0x2c
 8005d38:	fb03 f302 	mul.w	r3, r3, r2
 8005d3c:	4a3b      	ldr	r2, [pc, #236]	; (8005e2c <Endpoint_Write_Stream_LE+0x10c>)
 8005d3e:	4413      	add	r3, r2
 8005d40:	3304      	adds	r3, #4
 8005d42:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	83bb      	strh	r3, [r7, #28]
	if (BytesProcessed!=NULL) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d052      	beq.n	8005dfc <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	897a      	ldrh	r2, [r7, #10]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8005d66:	e049      	b.n	8005dfc <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d000      	beq.n	8005d78 <Endpoint_Write_Stream_LE+0x58>
			continue;
 8005d76:	e041      	b.n	8005dfc <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 8005d78:	f7fe f9c4 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d029      	beq.n	8005dd6 <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	897b      	ldrh	r3, [r7, #10]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	bf28      	it	cs
 8005d92:	4613      	movcs	r3, r2
 8005d94:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	4413      	add	r3, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	8bfa      	ldrh	r2, [r7, #30]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4413      	add	r3, r2
 8005daa:	4619      	mov	r1, r3
 8005dac:	8afb      	ldrh	r3, [r7, #22]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fac0 	bl	8006334 <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	8afb      	ldrh	r3, [r7, #22]
 8005dba:	441a      	add	r2, r3
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8005dc0:	8bfa      	ldrh	r2, [r7, #30]
 8005dc2:	8afb      	ldrh	r3, [r7, #22]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	83fb      	strh	r3, [r7, #30]
			prev_length = Length;
 8005dc8:	897b      	ldrh	r3, [r7, #10]
 8005dca:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8005dcc:	897a      	ldrh	r2, [r7, #10]
 8005dce:	8afb      	ldrh	r3, [r7, #22]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	817b      	strh	r3, [r7, #10]
 8005dd4:	e012      	b.n	8005dfc <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 8005dd6:	f7fe f91d 	bl	8004014 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8bfa      	ldrh	r2, [r7, #30]
 8005de4:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005de6:	2305      	movs	r3, #5
 8005de8:	e01b      	b.n	8005e22 <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005dea:	f7fe f835 	bl	8003e58 <Endpoint_WaitUntilReady>
 8005dee:	4603      	mov	r3, r0
 8005df0:	757b      	strb	r3, [r7, #21]
 8005df2:	7d7b      	ldrb	r3, [r7, #21]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 8005df8:	7d7b      	ldrb	r3, [r7, #21]
 8005dfa:	e012      	b.n	8005e22 <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 8005dfc:	897b      	ldrh	r3, [r7, #10]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1b2      	bne.n	8005d68 <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 8005e02:	897b      	ldrh	r3, [r7, #10]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <Endpoint_Write_Stream_LE+0x100>
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	889b      	ldrh	r3, [r3, #4]
 8005e0c:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	8bba      	ldrh	r2, [r7, #28]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d102      	bne.n	8005e20 <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <Endpoint_Write_Stream_LE+0x110>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000e20 	.word	0x20000e20
 8005e30:	20000ad0 	.word	0x20000ad0

08005e34 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8005e44:	e00e      	b.n	8005e64 <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	780a      	ldrb	r2, [r1, #0]
 8005e5c:	701a      	strb	r2, [r3, #0]
		i++;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	3301      	adds	r3, #1
 8005e62:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d3ec      	bcc.n	8005e46 <SwapCopy+0x12>
	}
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	460b      	mov	r3, r1
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005e86:	4b35      	ldr	r3, [pc, #212]	; (8005f5c <Endpoint_Write_Stream_BE+0xe4>)
 8005e88:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	232c      	movs	r3, #44	; 0x2c
 8005e90:	fb03 f302 	mul.w	r3, r3, r2
 8005e94:	4a31      	ldr	r2, [pc, #196]	; (8005f5c <Endpoint_Write_Stream_BE+0xe4>)
 8005e96:	4413      	add	r3, r2
 8005e98:	3304      	adds	r3, #4
 8005e9a:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d050      	beq.n	8005f4c <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	897a      	ldrh	r2, [r7, #10]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8005eba:	e047      	b.n	8005f4c <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d000      	beq.n	8005ecc <Endpoint_Write_Stream_BE+0x54>
			continue;
 8005eca:	e03f      	b.n	8005f4c <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 8005ecc:	f7fe f91a 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d027      	beq.n	8005f26 <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	6a1a      	ldr	r2, [r3, #32]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	897b      	ldrh	r3, [r7, #10]
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	bf28      	it	cs
 8005ee6:	4613      	movcs	r3, r2
 8005ee8:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	8bfa      	ldrh	r2, [r7, #30]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	8afb      	ldrh	r3, [r7, #22]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f7ff ff96 	bl	8005e34 <SwapCopy>
			ep->InBytesAvailable += Bytes;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	8afb      	ldrh	r3, [r7, #22]
 8005f0e:	441a      	add	r2, r3
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8005f14:	8bfa      	ldrh	r2, [r7, #30]
 8005f16:	8afb      	ldrh	r3, [r7, #22]
 8005f18:	4413      	add	r3, r2
 8005f1a:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8005f1c:	897a      	ldrh	r2, [r7, #10]
 8005f1e:	8afb      	ldrh	r3, [r7, #22]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	817b      	strh	r3, [r7, #10]
 8005f24:	e012      	b.n	8005f4c <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 8005f26:	f7fe f875 	bl	8004014 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8bfa      	ldrh	r2, [r7, #30]
 8005f34:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8005f36:	2305      	movs	r3, #5
 8005f38:	e00c      	b.n	8005f54 <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8005f3a:	f7fd ff8d 	bl	8003e58 <Endpoint_WaitUntilReady>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	757b      	strb	r3, [r7, #21]
 8005f42:	7d7b      	ldrb	r3, [r7, #21]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 8005f48:	7d7b      	ldrb	r3, [r7, #21]
 8005f4a:	e003      	b.n	8005f54 <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 8005f4c:	897b      	ldrh	r3, [r7, #10]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1b4      	bne.n	8005ebc <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20000e20 	.word	0x20000e20

08005f60 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8005f6e:	4b37      	ldr	r3, [pc, #220]	; (800604c <Endpoint_Read_Stream_LE+0xec>)
 8005f70:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005f74:	461a      	mov	r2, r3
 8005f76:	232c      	movs	r3, #44	; 0x2c
 8005f78:	fb03 f302 	mul.w	r3, r3, r2
 8005f7c:	4a33      	ldr	r2, [pc, #204]	; (800604c <Endpoint_Read_Stream_LE+0xec>)
 8005f7e:	4413      	add	r3, r2
 8005f80:	3304      	adds	r3, #4
 8005f82:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d053      	beq.n	800603a <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	897a      	ldrh	r2, [r7, #10]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8005fa2:	e04a      	b.n	800603a <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d000      	beq.n	8005fb4 <Endpoint_Read_Stream_LE+0x54>
			continue;
 8005fb2:	e042      	b.n	800603a <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8005fb4:	f7fe f8a6 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02a      	beq.n	8006014 <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bf28      	it	cs
 8005fc8:	4613      	movcs	r3, r2
 8005fca:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8005fcc:	8bfa      	ldrh	r2, [r7, #30]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	8afb      	ldrh	r3, [r7, #22]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f000 f9a5 	bl	8006334 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	8afb      	ldrh	r3, [r7, #22]
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	8afb      	ldrh	r3, [r7, #22]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 8006002:	8bfa      	ldrh	r2, [r7, #30]
 8006004:	8afb      	ldrh	r3, [r7, #22]
 8006006:	4413      	add	r3, r2
 8006008:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 800600a:	897a      	ldrh	r2, [r7, #10]
 800600c:	8afb      	ldrh	r3, [r7, #22]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	817b      	strh	r3, [r7, #10]
 8006012:	e012      	b.n	800603a <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8006014:	f7fd ffb2 	bl	8003f7c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8bfa      	ldrh	r2, [r7, #30]
 8006022:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8006024:	2305      	movs	r3, #5
 8006026:	e00c      	b.n	8006042 <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8006028:	f7fd ff16 	bl	8003e58 <Endpoint_WaitUntilReady>
 800602c:	4603      	mov	r3, r0
 800602e:	757b      	strb	r3, [r7, #21]
 8006030:	7d7b      	ldrb	r3, [r7, #21]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 8006036:	7d7b      	ldrb	r3, [r7, #21]
 8006038:	e003      	b.n	8006042 <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 800603a:	897b      	ldrh	r3, [r7, #10]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1b1      	bne.n	8005fa4 <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000e20 	.word	0x20000e20

08006050 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	460b      	mov	r3, r1
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800605e:	4b37      	ldr	r3, [pc, #220]	; (800613c <Endpoint_Read_Stream_BE+0xec>)
 8006060:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006064:	461a      	mov	r2, r3
 8006066:	232c      	movs	r3, #44	; 0x2c
 8006068:	fb03 f302 	mul.w	r3, r3, r2
 800606c:	4a33      	ldr	r2, [pc, #204]	; (800613c <Endpoint_Read_Stream_BE+0xec>)
 800606e:	4413      	add	r3, r2
 8006070:	3304      	adds	r3, #4
 8006072:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d053      	beq.n	800612a <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	897a      	ldrh	r2, [r7, #10]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8006092:	e04a      	b.n	800612a <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d000      	beq.n	80060a4 <Endpoint_Read_Stream_BE+0x54>
			continue;
 80060a2:	e042      	b.n	800612a <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 80060a4:	f7fe f82e 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02a      	beq.n	8006104 <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	897b      	ldrh	r3, [r7, #10]
 80060b4:	4293      	cmp	r3, r2
 80060b6:	bf28      	it	cs
 80060b8:	4613      	movcs	r3, r2
 80060ba:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80060bc:	8bfa      	ldrh	r2, [r7, #30]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	461a      	mov	r2, r3
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	8afb      	ldrh	r3, [r7, #22]
 80060d4:	461a      	mov	r2, r3
 80060d6:	f7ff fead 	bl	8005e34 <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	8afb      	ldrh	r3, [r7, #22]
 80060e0:	1ad2      	subs	r2, r2, r3
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	8afb      	ldrh	r3, [r7, #22]
 80060ec:	441a      	add	r2, r3
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 80060f2:	8bfa      	ldrh	r2, [r7, #30]
 80060f4:	8afb      	ldrh	r3, [r7, #22]
 80060f6:	4413      	add	r3, r2
 80060f8:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 80060fa:	897a      	ldrh	r2, [r7, #10]
 80060fc:	8afb      	ldrh	r3, [r7, #22]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	817b      	strh	r3, [r7, #10]
 8006102:	e012      	b.n	800612a <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8006104:	f7fd ff3a 	bl	8003f7c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8bfa      	ldrh	r2, [r7, #30]
 8006112:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8006114:	2305      	movs	r3, #5
 8006116:	e00c      	b.n	8006132 <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8006118:	f7fd fe9e 	bl	8003e58 <Endpoint_WaitUntilReady>
 800611c:	4603      	mov	r3, r0
 800611e:	757b      	strb	r3, [r7, #21]
 8006120:	7d7b      	ldrb	r3, [r7, #21]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 8006126:	7d7b      	ldrb	r3, [r7, #21]
 8006128:	e003      	b.n	8006132 <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 800612a:	897b      	ldrh	r3, [r7, #10]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1b1      	bne.n	8006094 <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000e20 	.word	0x20000e20

08006140 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <Endpoint_Write_Control_Stream_LE+0x6c>)
 800614e:	60bb      	str	r3, [r7, #8]
	uint16_t Bytes;

	while (Length) {
 8006150:	e024      	b.n	800619c <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11d      	bne.n	800619c <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	887b      	ldrh	r3, [r7, #2]
 8006166:	429a      	cmp	r2, r3
 8006168:	d902      	bls.n	8006170 <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 800616a:	887b      	ldrh	r3, [r7, #2]
 800616c:	81fb      	strh	r3, [r7, #14]
 800616e:	e002      	b.n	8006176 <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	81fb      	strh	r3, [r7, #14]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	89fa      	ldrh	r2, [r7, #14]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f8d8 	bl	8006334 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	89fb      	ldrh	r3, [r7, #14]
 800618a:	441a      	add	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 8006190:	887a      	ldrh	r2, [r7, #2]
 8006192:	89fb      	ldrh	r3, [r7, #14]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 8006198:	f7fd ff3c 	bl	8004014 <Endpoint_ClearIN>
	while (Length) {
 800619c:	887b      	ldrh	r3, [r7, #2]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1d7      	bne.n	8006152 <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000e24 	.word	0x20000e24

080061b0 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 80061bc:	887b      	ldrh	r3, [r7, #2]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ffbd 	bl	8006140 <Endpoint_Write_Control_Stream_LE>
 80061c6:	4603      	mov	r3, r0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 80061dc:	4b15      	ldr	r3, [pc, #84]	; (8006234 <Endpoint_Read_Control_Stream_LE+0x64>)
 80061de:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 80061e0:	e020      	b.n	8006224 <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d019      	beq.n	8006224 <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689a      	ldr	r2, [r3, #8]
					? Length : EndPoint->OutBytesAvailable;
 80061f4:	887b      	ldrh	r3, [r7, #2]
 80061f6:	4293      	cmp	r3, r2
 80061f8:	bf28      	it	cs
 80061fa:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 80061fc:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	897a      	ldrh	r2, [r7, #10]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f894 	bl	8006334 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	897b      	ldrh	r3, [r7, #10]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 8006218:	887a      	ldrh	r2, [r7, #2]
 800621a:	897b      	ldrh	r3, [r7, #10]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 8006220:	f7fd feac 	bl	8003f7c <Endpoint_ClearOUT>
	while (Length) {
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1db      	bne.n	80061e2 <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000e24 	.word	0x20000e24

08006238 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8006244:	887b      	ldrh	r3, [r7, #2]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff ffc1 	bl	80061d0 <Endpoint_Read_Control_Stream_LE>
 800624e:	4603      	mov	r3, r0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8006264:	4b32      	ldr	r3, [pc, #200]	; (8006330 <Endpoint_Null_Stream+0xd8>)
 8006266:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800626a:	461a      	mov	r2, r3
 800626c:	232c      	movs	r3, #44	; 0x2c
 800626e:	fb03 f302 	mul.w	r3, r3, r2
 8006272:	4a2f      	ldr	r2, [pc, #188]	; (8006330 <Endpoint_Null_Stream+0xd8>)
 8006274:	4413      	add	r3, r2
 8006276:	3304      	adds	r3, #4
 8006278:	613b      	str	r3, [r7, #16]
		uint16_t Bytes = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	81fb      	strh	r3, [r7, #14]
		uint16_t BytesTransfered = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	82fb      	strh	r3, [r7, #22]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d04b      	beq.n	8006320 <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	88fa      	ldrh	r2, [r7, #6]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	82fb      	strh	r3, [r7, #22]
		}

		while (Length) {
 8006298:	e042      	b.n	8006320 <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d000      	beq.n	80062aa <Endpoint_Null_Stream+0x52>
				continue;
 80062a8:	e03a      	b.n	8006320 <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 80062aa:	f7fd ff2b 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d022      	beq.n	80062fa <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	1ad2      	subs	r2, r2, r3
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	4293      	cmp	r3, r2
 80062c2:	bf28      	it	cs
 80062c4:	4613      	movcs	r3, r2
 80062c6:	81fb      	strh	r3, [r7, #14]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	4413      	add	r3, r2
 80062d2:	89fa      	ldrh	r2, [r7, #14]
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f002 fd48 	bl	8008d6c <memset>
				ep->InBytesAvailable += Bytes;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	89fb      	ldrh	r3, [r7, #14]
 80062e2:	441a      	add	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 80062e8:	8afa      	ldrh	r2, [r7, #22]
 80062ea:	89fb      	ldrh	r3, [r7, #14]
 80062ec:	4413      	add	r3, r2
 80062ee:	82fb      	strh	r3, [r7, #22]
				Length -= Bytes;
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	89fb      	ldrh	r3, [r7, #14]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	80fb      	strh	r3, [r7, #6]
 80062f8:	e012      	b.n	8006320 <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 80062fa:	f7fd fe8b 	bl	8004014 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	8afa      	ldrh	r2, [r7, #22]
 8006308:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800630a:	2305      	movs	r3, #5
 800630c:	e00c      	b.n	8006328 <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800630e:	f7fd fda3 	bl	8003e58 <Endpoint_WaitUntilReady>
 8006312:	4603      	mov	r3, r0
 8006314:	737b      	strb	r3, [r7, #13]
 8006316:	7b7b      	ldrb	r3, [r7, #13]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 800631c:	7b7b      	ldrb	r3, [r7, #13]
 800631e:	e003      	b.n	8006328 <Endpoint_Null_Stream+0xd0>
		while (Length) {
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1b9      	bne.n	800629a <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20000e20 	.word	0x20000e20

08006334 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8006334:	0913      	lsrs	r3, r2, #4
 8006336:	d011      	beq.n	800635c <thumb2_memcpy+0x28>
 8006338:	f851 cb04 	ldr.w	ip, [r1], #4
 800633c:	f840 cb04 	str.w	ip, [r0], #4
 8006340:	f851 cb04 	ldr.w	ip, [r1], #4
 8006344:	f840 cb04 	str.w	ip, [r0], #4
 8006348:	f851 cb04 	ldr.w	ip, [r1], #4
 800634c:	f840 cb04 	str.w	ip, [r0], #4
 8006350:	f851 cb04 	ldr.w	ip, [r1], #4
 8006354:	f840 cb04 	str.w	ip, [r0], #4
 8006358:	3b01      	subs	r3, #1
 800635a:	d1ed      	bne.n	8006338 <thumb2_memcpy+0x4>
 800635c:	f012 030f 	ands.w	r3, r2, #15
 8006360:	d005      	beq.n	800636e <thumb2_memcpy+0x3a>
 8006362:	f811 cb01 	ldrb.w	ip, [r1], #1
 8006366:	f800 cb01 	strb.w	ip, [r0], #1
 800636a:	3b01      	subs	r3, #1
 800636c:	d1f9      	bne.n	8006362 <thumb2_memcpy+0x2e>
 800636e:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8006370:	bf00      	nop

08006372 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e003      	b.n	8006388 <delay+0x16>
  {
    __NOP();
 8006380:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d8f7      	bhi.n	8006380 <delay+0xe>
  }
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800639c:	b598      	push	{r3, r4, r7, lr}
 800639e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80063a0:	4a06      	ldr	r2, [pc, #24]	; (80063bc <SystemInit+0x20>)
 80063a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80063a6:	4614      	mov	r4, r2
 80063a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80063ae:	f000 f807 	bl	80063c0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80063b2:	f7f9 ff7f 	bl	80002b4 <SystemCoreClockSetup>
}
 80063b6:	bf00      	nop
 80063b8:	bd98      	pop	{r3, r4, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2000ffc4 	.word	0x2000ffc4

080063c0 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80063c6:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80063c8:	4b16      	ldr	r3, [pc, #88]	; (8006424 <SystemCoreSetup+0x64>)
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <SystemCoreSetup+0x68>)
 80063cc:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80063ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 80063d2:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80063d4:	4b13      	ldr	r3, [pc, #76]	; (8006424 <SystemCoreSetup+0x64>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063da:	4a12      	ldr	r2, [pc, #72]	; (8006424 <SystemCoreSetup+0x64>)
 80063dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <SystemCoreSetup+0x64>)
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	4a0e      	ldr	r2, [pc, #56]	; (8006424 <SystemCoreSetup+0x64>)
 80063ea:	f023 0308 	bic.w	r3, r3, #8
 80063ee:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80063f0:	4b0e      	ldr	r3, [pc, #56]	; (800642c <SystemCoreSetup+0x6c>)
 80063f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f6:	3314      	adds	r3, #20
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f023 030f 	bic.w	r3, r3, #15
 8006402:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f043 0303 	orr.w	r3, r3, #3
 800640a:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <SystemCoreSetup+0x6c>)
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	3314      	adds	r3, #20
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	e000ed00 	.word	0xe000ed00
 8006428:	08000000 	.word	0x08000000
 800642c:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006434:	4b75      	ldr	r3, [pc, #468]	; (800660c <SystemCoreSetup+0x24c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10c      	bne.n	800645a <SystemCoreSetup+0x9a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8006440:	4b72      	ldr	r3, [pc, #456]	; (800660c <SystemCoreSetup+0x24c>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a71      	ldr	r2, [pc, #452]	; (800660c <SystemCoreSetup+0x24c>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800644c:	bf00      	nop
 800644e:	4b6f      	ldr	r3, [pc, #444]	; (800660c <SystemCoreSetup+0x24c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f9      	beq.n	800644e <SystemCoreSetup+0x8e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800645a:	4b6d      	ldr	r3, [pc, #436]	; (8006610 <SystemCoreSetup+0x250>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <SystemCoreSetup+0xba>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8006466:	4b6a      	ldr	r3, [pc, #424]	; (8006610 <SystemCoreSetup+0x250>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	4a69      	ldr	r2, [pc, #420]	; (8006610 <SystemCoreSetup+0x250>)
 800646c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006470:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8006472:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8006476:	f7ff ff7c 	bl	8006372 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800647a:	4b66      	ldr	r3, [pc, #408]	; (8006614 <SystemCoreSetup+0x254>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4a65      	ldr	r2, [pc, #404]	; (8006614 <SystemCoreSetup+0x254>)
 8006480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006484:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8006486:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800648a:	f7ff ff72 	bl	8006372 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800648e:	4b61      	ldr	r3, [pc, #388]	; (8006614 <SystemCoreSetup+0x254>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4a60      	ldr	r2, [pc, #384]	; (8006614 <SystemCoreSetup+0x254>)
 8006494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006498:	f023 0302 	bic.w	r3, r3, #2
 800649c:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800649e:	4b5e      	ldr	r3, [pc, #376]	; (8006618 <SystemCoreSetup+0x258>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d029      	beq.n	80064fe <SystemCoreSetup+0x13e>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80064aa:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <SystemCoreSetup+0x258>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4a5a      	ldr	r2, [pc, #360]	; (8006618 <SystemCoreSetup+0x258>)
 80064b0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80064b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80064b8:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80064ba:	f000 f927 	bl	800670c <OSCHP_GetFrequency>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b56      	ldr	r3, [pc, #344]	; (800661c <SystemCoreSetup+0x25c>)
 80064c2:	fba3 2302 	umull	r2, r3, r3, r2
 80064c6:	0d1b      	lsrs	r3, r3, #20
 80064c8:	3b01      	subs	r3, #1
 80064ca:	041a      	lsls	r2, r3, #16
 80064cc:	4b52      	ldr	r3, [pc, #328]	; (8006618 <SystemCoreSetup+0x258>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4951      	ldr	r1, [pc, #324]	; (8006618 <SystemCoreSetup+0x258>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80064d6:	4b4f      	ldr	r3, [pc, #316]	; (8006614 <SystemCoreSetup+0x254>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4a4e      	ldr	r2, [pc, #312]	; (8006614 <SystemCoreSetup+0x254>)
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80064e2:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <SystemCoreSetup+0x254>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4a4b      	ldr	r2, [pc, #300]	; (8006614 <SystemCoreSetup+0x254>)
 80064e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064ec:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80064ee:	bf00      	nop
 80064f0:	4b48      	ldr	r3, [pc, #288]	; (8006614 <SystemCoreSetup+0x254>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80064f8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80064fc:	d1f8      	bne.n	80064f0 <SystemCoreSetup+0x130>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80064fe:	4b45      	ldr	r3, [pc, #276]	; (8006614 <SystemCoreSetup+0x254>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4a44      	ldr	r2, [pc, #272]	; (8006614 <SystemCoreSetup+0x254>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800650a:	4b42      	ldr	r3, [pc, #264]	; (8006614 <SystemCoreSetup+0x254>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4a41      	ldr	r2, [pc, #260]	; (8006614 <SystemCoreSetup+0x254>)
 8006510:	f043 0310 	orr.w	r3, r3, #16
 8006514:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006516:	4b3f      	ldr	r3, [pc, #252]	; (8006614 <SystemCoreSetup+0x254>)
 8006518:	4a41      	ldr	r2, [pc, #260]	; (8006620 <SystemCoreSetup+0x260>)
 800651a:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800651c:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <SystemCoreSetup+0x254>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4a3c      	ldr	r2, [pc, #240]	; (8006614 <SystemCoreSetup+0x254>)
 8006522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006526:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006528:	4b3a      	ldr	r3, [pc, #232]	; (8006614 <SystemCoreSetup+0x254>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a39      	ldr	r2, [pc, #228]	; (8006614 <SystemCoreSetup+0x254>)
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8006534:	4b37      	ldr	r3, [pc, #220]	; (8006614 <SystemCoreSetup+0x254>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4a36      	ldr	r2, [pc, #216]	; (8006614 <SystemCoreSetup+0x254>)
 800653a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800653e:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006540:	bf00      	nop
 8006542:	4b34      	ldr	r3, [pc, #208]	; (8006614 <SystemCoreSetup+0x254>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f9      	beq.n	8006542 <SystemCoreSetup+0x182>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <SystemCoreSetup+0x254>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4a30      	ldr	r2, [pc, #192]	; (8006614 <SystemCoreSetup+0x254>)
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800655a:	bf00      	nop
 800655c:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <SystemCoreSetup+0x254>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f9      	bne.n	800655c <SystemCoreSetup+0x19c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8006568:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <SystemCoreSetup+0x264>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <SystemCoreSetup+0x264>)
 800656e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006572:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8006574:	4b2b      	ldr	r3, [pc, #172]	; (8006624 <SystemCoreSetup+0x264>)
 8006576:	2200      	movs	r2, #0
 8006578:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800657a:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <SystemCoreSetup+0x264>)
 800657c:	2200      	movs	r2, #0
 800657e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <SystemCoreSetup+0x264>)
 8006582:	2200      	movs	r2, #0
 8006584:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8006586:	4b27      	ldr	r3, [pc, #156]	; (8006624 <SystemCoreSetup+0x264>)
 8006588:	2200      	movs	r2, #0
 800658a:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 800658c:	4b25      	ldr	r3, [pc, #148]	; (8006624 <SystemCoreSetup+0x264>)
 800658e:	2200      	movs	r2, #0
 8006590:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <SystemCoreSetup+0x264>)
 8006594:	2203      	movs	r2, #3
 8006596:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006598:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <SystemCoreSetup+0x254>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <SystemCoreSetup+0x254>)
 800659e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a2:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <SystemCoreSetup+0x254>)
 80065a6:	4a20      	ldr	r2, [pc, #128]	; (8006628 <SystemCoreSetup+0x268>)
 80065a8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80065aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80065ae:	f7ff fee0 	bl	8006372 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80065b2:	bf00      	nop
 80065b4:	4b17      	ldr	r3, [pc, #92]	; (8006614 <SystemCoreSetup+0x254>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0f9      	beq.n	80065b4 <SystemCoreSetup+0x1f4>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <SystemCoreSetup+0x254>)
 80065c2:	4a1a      	ldr	r2, [pc, #104]	; (800662c <SystemCoreSetup+0x26c>)
 80065c4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80065c6:	f241 1094 	movw	r0, #4500	; 0x1194
 80065ca:	f7ff fed2 	bl	8006372 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80065ce:	bf00      	nop
 80065d0:	4b10      	ldr	r3, [pc, #64]	; (8006614 <SystemCoreSetup+0x254>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f9      	beq.n	80065d0 <SystemCoreSetup+0x210>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <SystemCoreSetup+0x254>)
 80065de:	4a14      	ldr	r2, [pc, #80]	; (8006630 <SystemCoreSetup+0x270>)
 80065e0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 80065e2:	f241 7070 	movw	r0, #6000	; 0x1770
 80065e6:	f7ff fec4 	bl	8006372 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80065ea:	bf00      	nop
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <SystemCoreSetup+0x254>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f9      	beq.n	80065ec <SystemCoreSetup+0x22c>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <SystemCoreSetup+0x274>)
 80065fa:	2205      	movs	r2, #5
 80065fc:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80065fe:	4b09      	ldr	r3, [pc, #36]	; (8006624 <SystemCoreSetup+0x264>)
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8006604:	f000 f818 	bl	8006638 <SystemCoreClockUpdate>
}
 8006608:	bf00      	nop
 800660a:	bd80      	pop	{r7, pc}
 800660c:	50004200 	.word	0x50004200
 8006610:	50004400 	.word	0x50004400
 8006614:	50004710 	.word	0x50004710
 8006618:	50004700 	.word	0x50004700
 800661c:	6b5fca6b 	.word	0x6b5fca6b
 8006620:	01134f00 	.word	0x01134f00
 8006624:	50004600 	.word	0x50004600
 8006628:	01074f00 	.word	0x01074f00
 800662c:	01044f00 	.word	0x01044f00
 8006630:	01034f00 	.word	0x01034f00
 8006634:	50004160 	.word	0x50004160

08006638 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800663e:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <SystemCoreClockUpdate+0xc4>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d03e      	beq.n	80066c8 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800664a:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <SystemCoreClockUpdate+0xc8>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8006656:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <SystemCoreClockUpdate+0xcc>)
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e002      	b.n	8006662 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800665c:	f000 f856 	bl	800670c <OSCHP_GetFrequency>
 8006660:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8006662:	4b27      	ldr	r3, [pc, #156]	; (8006700 <SystemCoreClockUpdate+0xc8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b00      	cmp	r3, #0
 800666c:	d020      	beq.n	80066b0 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <SystemCoreClockUpdate+0xc8>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	0e1b      	lsrs	r3, r3, #24
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	3301      	adds	r3, #1
 800667a:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800667c:	4b20      	ldr	r3, [pc, #128]	; (8006700 <SystemCoreClockUpdate+0xc8>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006686:	3301      	adds	r3, #1
 8006688:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <SystemCoreClockUpdate+0xc8>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006694:	3301      	adds	r3, #1
 8006696:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	fb02 f303 	mul.w	r3, r2, r3
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e00d      	b.n	80066cc <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80066b0:	4b13      	ldr	r3, [pc, #76]	; (8006700 <SystemCoreClockUpdate+0xc8>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b8:	3301      	adds	r3, #1
 80066ba:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e001      	b.n	80066cc <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80066c8:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <SystemCoreClockUpdate+0xcc>)
 80066ca:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <SystemCoreClockUpdate+0xc4>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	3301      	adds	r3, #1
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <SystemCoreClockUpdate+0xc4>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	3301      	adds	r3, #1
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80066ee:	4a06      	ldr	r2, [pc, #24]	; (8006708 <SystemCoreClockUpdate+0xd0>)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6013      	str	r3, [r2, #0]
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	50004600 	.word	0x50004600
 8006700:	50004710 	.word	0x50004710
 8006704:	016e3600 	.word	0x016e3600
 8006708:	2000ffc0 	.word	0x2000ffc0

0800670c <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8006710:	4b02      	ldr	r3, [pc, #8]	; (800671c <OSCHP_GetFrequency+0x10>)
}
 8006712:	4618      	mov	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	00b71b00 	.word	0x00b71b00

08006720 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <_sbrk+0x5c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d102      	bne.n	8006736 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8006730:	4b12      	ldr	r3, [pc, #72]	; (800677c <_sbrk+0x5c>)
 8006732:	4a13      	ldr	r2, [pc, #76]	; (8006780 <_sbrk+0x60>)
 8006734:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <_sbrk+0x5c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3303      	adds	r3, #3
 8006740:	f023 0303 	bic.w	r3, r3, #3
 8006744:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <_sbrk+0x5c>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <_sbrk+0x64>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d207      	bcs.n	8006764 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8006754:	4b09      	ldr	r3, [pc, #36]	; (800677c <_sbrk+0x5c>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	4a07      	ldr	r2, [pc, #28]	; (800677c <_sbrk+0x5c>)
 800675e:	6013      	str	r3, [r2, #0]
    return (base);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	e006      	b.n	8006772 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8006764:	f001 ff02 	bl	800856c <__errno>
 8006768:	4602      	mov	r2, r0
 800676a:	230c      	movs	r3, #12
 800676c:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800676e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000ad8 	.word	0x20000ad8
 8006780:	20001220 	.word	0x20001220
 8006784:	2000ffc0 	.word	0x2000ffc0

08006788 <_init>:

/* Init */
void _init(void)
{}
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
 800678c:	bf00      	nop
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <crypto_secretbox_detached>:
 8006796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	b0a3      	sub	sp, #140	; 0x8c
 800679c:	af06      	add	r7, sp, #24
 800679e:	4604      	mov	r4, r0
 80067a0:	f8d7 80a0 	ldr.w	r8, [r7, #160]	; 0xa0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	4615      	mov	r5, r2
 80067a8:	b0c4      	sub	sp, #272	; 0x110
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80067b0:	4641      	mov	r1, r8
 80067b2:	f107 0010 	add.w	r0, r7, #16
 80067b6:	f10d 0627 	add.w	r6, sp, #39	; 0x27
 80067ba:	f000 fdfb 	bl	80073b4 <crypto_core_hsalsa20>
 80067be:	42ac      	cmp	r4, r5
 80067c0:	f026 060f 	bic.w	r6, r6, #15
 80067c4:	d907      	bls.n	80067d6 <crypto_secretbox_detached+0x40>
 80067c6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067ca:	2300      	movs	r3, #0
 80067cc:	1b62      	subs	r2, r4, r5
 80067ce:	428b      	cmp	r3, r1
 80067d0:	bf08      	it	eq
 80067d2:	4282      	cmpeq	r2, r0
 80067d4:	d309      	bcc.n	80067ea <crypto_secretbox_detached+0x54>
 80067d6:	42ac      	cmp	r4, r5
 80067d8:	d20e      	bcs.n	80067f8 <crypto_secretbox_detached+0x62>
 80067da:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067de:	2300      	movs	r3, #0
 80067e0:	1b2a      	subs	r2, r5, r4
 80067e2:	428b      	cmp	r3, r1
 80067e4:	bf08      	it	eq
 80067e6:	4282      	cmpeq	r2, r0
 80067e8:	d206      	bcs.n	80067f8 <crypto_secretbox_detached+0x62>
 80067ea:	4629      	mov	r1, r5
 80067ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80067f0:	4620      	mov	r0, r4
 80067f2:	f002 fa57 	bl	8008ca4 <memmove>
 80067f6:	4625      	mov	r5, r4
 80067f8:	2220      	movs	r2, #32
 80067fa:	2100      	movs	r1, #0
 80067fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006800:	f002 fab4 	bl	8008d6c <memset>
 8006804:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf08      	it	eq
 800680c:	2a21      	cmpeq	r2, #33	; 0x21
 800680e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8006812:	d303      	bcc.n	800681c <crypto_secretbox_detached+0x86>
 8006814:	2220      	movs	r2, #32
 8006816:	2300      	movs	r3, #0
 8006818:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800681c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8006820:	f107 094f 	add.w	r9, r7, #79	; 0x4f
 8006824:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006828:	1e6a      	subs	r2, r5, #1
 800682a:	442b      	add	r3, r5
 800682c:	4649      	mov	r1, r9
 800682e:	429a      	cmp	r2, r3
 8006830:	d154      	bne.n	80068dc <crypto_secretbox_detached+0x146>
 8006832:	f108 0310 	add.w	r3, r8, #16
 8006836:	f107 0a10 	add.w	sl, r7, #16
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	e88d 0408 	stmia.w	sp, {r3, sl}
 8006840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006844:	f107 0830 	add.w	r8, r7, #48	; 0x30
 8006848:	3220      	adds	r2, #32
 800684a:	f143 0300 	adc.w	r3, r3, #0
 800684e:	4641      	mov	r1, r8
 8006850:	4640      	mov	r0, r8
 8006852:	f000 f935 	bl	8006ac0 <crypto_stream_salsa20_xor>
 8006856:	4641      	mov	r1, r8
 8006858:	4630      	mov	r0, r6
 800685a:	f000 fff1 	bl	8007840 <crypto_onetimeauth_poly1305_init>
 800685e:	f10b 031f 	add.w	r3, fp, #31
 8006862:	1e62      	subs	r2, r4, #1
 8006864:	4443      	add	r3, r8
 8006866:	4599      	cmp	r9, r3
 8006868:	d13d      	bne.n	80068e6 <crypto_secretbox_detached+0x150>
 800686a:	2140      	movs	r1, #64	; 0x40
 800686c:	4640      	mov	r0, r8
 800686e:	f000 fa9c 	bl	8006daa <sodium_memzero>
 8006872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006876:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800687a:	428b      	cmp	r3, r1
 800687c:	bf08      	it	eq
 800687e:	4282      	cmpeq	r2, r0
 8006880:	d214      	bcs.n	80068ac <crypto_secretbox_detached+0x116>
 8006882:	2201      	movs	r2, #1
 8006884:	2300      	movs	r3, #0
 8006886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006896:	1a12      	subs	r2, r2, r0
 8006898:	eb63 0301 	sbc.w	r3, r3, r1
 800689c:	f8cd a010 	str.w	sl, [sp, #16]
 80068a0:	eb05 010b 	add.w	r1, r5, fp
 80068a4:	eb04 000b 	add.w	r0, r4, fp
 80068a8:	f000 f900 	bl	8006aac <crypto_stream_salsa20_xor_ic>
 80068ac:	4650      	mov	r0, sl
 80068ae:	2120      	movs	r1, #32
 80068b0:	f000 fa7b 	bl	8006daa <sodium_memzero>
 80068b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80068b8:	4621      	mov	r1, r4
 80068ba:	4630      	mov	r0, r6
 80068bc:	f000 ffc8 	bl	8007850 <crypto_onetimeauth_poly1305_update>
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	4630      	mov	r0, r6
 80068c4:	f000 ffd0 	bl	8007868 <crypto_onetimeauth_poly1305_final>
 80068c8:	4630      	mov	r0, r6
 80068ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068ce:	f000 fa6c 	bl	8006daa <sodium_memzero>
 80068d2:	2000      	movs	r0, #0
 80068d4:	3774      	adds	r7, #116	; 0x74
 80068d6:	46bd      	mov	sp, r7
 80068d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068dc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80068e0:	f801 0f01 	strb.w	r0, [r1, #1]!
 80068e4:	e7a3      	b.n	800682e <crypto_secretbox_detached+0x98>
 80068e6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80068ea:	f802 1f01 	strb.w	r1, [r2, #1]!
 80068ee:	e7ba      	b.n	8006866 <crypto_secretbox_detached+0xd0>

080068f0 <crypto_secretbox_easy>:
 80068f0:	b530      	push	{r4, r5, lr}
 80068f2:	2500      	movs	r5, #0
 80068f4:	f06f 0410 	mvn.w	r4, #16
 80068f8:	429d      	cmp	r5, r3
 80068fa:	bf08      	it	eq
 80068fc:	4294      	cmpeq	r4, r2
 80068fe:	b085      	sub	sp, #20
 8006900:	d201      	bcs.n	8006906 <crypto_secretbox_easy+0x16>
 8006902:	f000 f9e9 	bl	8006cd8 <sodium_misuse>
 8006906:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006908:	9403      	str	r4, [sp, #12]
 800690a:	9c08      	ldr	r4, [sp, #32]
 800690c:	9402      	str	r4, [sp, #8]
 800690e:	e9cd 2300 	strd	r2, r3, [sp]
 8006912:	460a      	mov	r2, r1
 8006914:	4601      	mov	r1, r0
 8006916:	3010      	adds	r0, #16
 8006918:	f7ff ff3d 	bl	8006796 <crypto_secretbox_detached>
 800691c:	b005      	add	sp, #20
 800691e:	bd30      	pop	{r4, r5, pc}

08006920 <crypto_secretbox_open_detached>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	b0a1      	sub	sp, #132	; 0x84
 8006926:	f10d 0820 	add.w	r8, sp, #32
 800692a:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800692c:	4691      	mov	r9, r2
 800692e:	460c      	mov	r4, r1
 8006930:	2300      	movs	r3, #0
 8006932:	4639      	mov	r1, r7
 8006934:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8006936:	ae10      	add	r6, sp, #64	; 0x40
 8006938:	4605      	mov	r5, r0
 800693a:	3710      	adds	r7, #16
 800693c:	4640      	mov	r0, r8
 800693e:	f000 fd39 	bl	80073b4 <crypto_core_hsalsa20>
 8006942:	2220      	movs	r2, #32
 8006944:	2300      	movs	r3, #0
 8006946:	e88d 0180 	stmia.w	sp, {r7, r8}
 800694a:	4630      	mov	r0, r6
 800694c:	f000 f8a4 	bl	8006a98 <crypto_stream_salsa20>
 8006950:	4648      	mov	r0, r9
 8006952:	9600      	str	r6, [sp, #0]
 8006954:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8006958:	4621      	mov	r1, r4
 800695a:	f000 ff65 	bl	8007828 <crypto_onetimeauth_poly1305_verify>
 800695e:	4681      	mov	r9, r0
 8006960:	b148      	cbz	r0, 8006976 <crypto_secretbox_open_detached+0x56>
 8006962:	2120      	movs	r1, #32
 8006964:	4640      	mov	r0, r8
 8006966:	f000 fa20 	bl	8006daa <sodium_memzero>
 800696a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800696e:	4648      	mov	r0, r9
 8006970:	b021      	add	sp, #132	; 0x84
 8006972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006976:	2d00      	cmp	r5, #0
 8006978:	d0f9      	beq.n	800696e <crypto_secretbox_open_detached+0x4e>
 800697a:	42ac      	cmp	r4, r5
 800697c:	d309      	bcc.n	8006992 <crypto_secretbox_open_detached+0x72>
 800697e:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8006982:	2300      	movs	r3, #0
 8006984:	1b62      	subs	r2, r4, r5
 8006986:	428b      	cmp	r3, r1
 8006988:	bf08      	it	eq
 800698a:	4282      	cmpeq	r2, r0
 800698c:	d309      	bcc.n	80069a2 <crypto_secretbox_open_detached+0x82>
 800698e:	42ac      	cmp	r4, r5
 8006990:	d80d      	bhi.n	80069ae <crypto_secretbox_open_detached+0x8e>
 8006992:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8006996:	2300      	movs	r3, #0
 8006998:	1b2a      	subs	r2, r5, r4
 800699a:	428b      	cmp	r3, r1
 800699c:	bf08      	it	eq
 800699e:	4282      	cmpeq	r2, r0
 80069a0:	d205      	bcs.n	80069ae <crypto_secretbox_open_detached+0x8e>
 80069a2:	4621      	mov	r1, r4
 80069a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80069a6:	4628      	mov	r0, r5
 80069a8:	f002 f97c 	bl	8008ca4 <memmove>
 80069ac:	462c      	mov	r4, r5
 80069ae:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bf08      	it	eq
 80069b6:	2a21      	cmpeq	r2, #33	; 0x21
 80069b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069bc:	d303      	bcc.n	80069c6 <crypto_secretbox_open_detached+0xa6>
 80069be:	2220      	movs	r2, #32
 80069c0:	2300      	movs	r3, #0
 80069c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069c6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80069ca:	f10d 085f 	add.w	r8, sp, #95	; 0x5f
 80069ce:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80069d2:	1e62      	subs	r2, r4, #1
 80069d4:	4423      	add	r3, r4
 80069d6:	4641      	mov	r1, r8
 80069d8:	429a      	cmp	r2, r3
 80069da:	d134      	bne.n	8006a46 <crypto_secretbox_open_detached+0x126>
 80069dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069e0:	ae10      	add	r6, sp, #64	; 0x40
 80069e2:	3220      	adds	r2, #32
 80069e4:	f10d 0a20 	add.w	sl, sp, #32
 80069e8:	f143 0300 	adc.w	r3, r3, #0
 80069ec:	4631      	mov	r1, r6
 80069ee:	4630      	mov	r0, r6
 80069f0:	e88d 0480 	stmia.w	sp, {r7, sl}
 80069f4:	f000 f864 	bl	8006ac0 <crypto_stream_salsa20_xor>
 80069f8:	f10b 021f 	add.w	r2, fp, #31
 80069fc:	1e6b      	subs	r3, r5, #1
 80069fe:	4416      	add	r6, r2
 8006a00:	45b0      	cmp	r8, r6
 8006a02:	d125      	bne.n	8006a50 <crypto_secretbox_open_detached+0x130>
 8006a04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a08:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bf08      	it	eq
 8006a10:	4282      	cmpeq	r2, r0
 8006a12:	d213      	bcs.n	8006a3c <crypto_secretbox_open_detached+0x11c>
 8006a14:	2201      	movs	r2, #1
 8006a16:	2300      	movs	r3, #0
 8006a18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a24:	1a12      	subs	r2, r2, r0
 8006a26:	eb63 0301 	sbc.w	r3, r3, r1
 8006a2a:	f8cd a010 	str.w	sl, [sp, #16]
 8006a2e:	9700      	str	r7, [sp, #0]
 8006a30:	eb04 010b 	add.w	r1, r4, fp
 8006a34:	eb05 000b 	add.w	r0, r5, fp
 8006a38:	f000 f838 	bl	8006aac <crypto_stream_salsa20_xor_ic>
 8006a3c:	2120      	movs	r1, #32
 8006a3e:	4650      	mov	r0, sl
 8006a40:	f000 f9b3 	bl	8006daa <sodium_memzero>
 8006a44:	e793      	b.n	800696e <crypto_secretbox_open_detached+0x4e>
 8006a46:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8006a4a:	f801 0f01 	strb.w	r0, [r1, #1]!
 8006a4e:	e7c3      	b.n	80069d8 <crypto_secretbox_open_detached+0xb8>
 8006a50:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8006a54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a58:	e7d2      	b.n	8006a00 <crypto_secretbox_open_detached+0xe0>

08006a5a <crypto_secretbox_open_easy>:
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bf08      	it	eq
 8006a5e:	2a10      	cmpeq	r2, #16
 8006a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a62:	d30e      	bcc.n	8006a82 <crypto_secretbox_open_easy+0x28>
 8006a64:	3a10      	subs	r2, #16
 8006a66:	9c07      	ldr	r4, [sp, #28]
 8006a68:	9403      	str	r4, [sp, #12]
 8006a6a:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8006a6e:	9c06      	ldr	r4, [sp, #24]
 8006a70:	9402      	str	r4, [sp, #8]
 8006a72:	e9cd 2300 	strd	r2, r3, [sp]
 8006a76:	460a      	mov	r2, r1
 8006a78:	3110      	adds	r1, #16
 8006a7a:	f7ff ff51 	bl	8006920 <crypto_secretbox_open_detached>
 8006a7e:	b004      	add	sp, #16
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a86:	e7fa      	b.n	8006a7e <crypto_secretbox_open_easy+0x24>

08006a88 <crypto_stream_salsa20_keybytes>:
 8006a88:	2020      	movs	r0, #32
 8006a8a:	4770      	bx	lr

08006a8c <crypto_stream_salsa20_noncebytes>:
 8006a8c:	2008      	movs	r0, #8
 8006a8e:	4770      	bx	lr

08006a90 <crypto_stream_salsa20_messagebytes_max>:
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a94:	4770      	bx	lr
	...

08006a98 <crypto_stream_salsa20>:
 8006a98:	b410      	push	{r4}
 8006a9a:	4903      	ldr	r1, [pc, #12]	; (8006aa8 <crypto_stream_salsa20+0x10>)
 8006a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa0:	4479      	add	r1, pc
 8006aa2:	6809      	ldr	r1, [r1, #0]
 8006aa4:	6809      	ldr	r1, [r1, #0]
 8006aa6:	4708      	bx	r1
 8006aa8:	17ff95d4 	.word	0x17ff95d4

08006aac <crypto_stream_salsa20_xor_ic>:
 8006aac:	b4f0      	push	{r4, r5, r6, r7}
 8006aae:	4c03      	ldr	r4, [pc, #12]	; (8006abc <crypto_stream_salsa20_xor_ic+0x10>)
 8006ab0:	447c      	add	r4, pc
 8006ab2:	6824      	ldr	r4, [r4, #0]
 8006ab4:	6864      	ldr	r4, [r4, #4]
 8006ab6:	46a4      	mov	ip, r4
 8006ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8006aba:	4760      	bx	ip
 8006abc:	17ff95c4 	.word	0x17ff95c4

08006ac0 <crypto_stream_salsa20_xor>:
 8006ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ac2:	4c08      	ldr	r4, [pc, #32]	; (8006ae4 <crypto_stream_salsa20_xor+0x24>)
 8006ac4:	b087      	sub	sp, #28
 8006ac6:	447c      	add	r4, pc
 8006ac8:	2600      	movs	r6, #0
 8006aca:	2700      	movs	r7, #0
 8006acc:	6824      	ldr	r4, [r4, #0]
 8006ace:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006ad0:	9504      	str	r5, [sp, #16]
 8006ad2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ad8:	9500      	str	r5, [sp, #0]
 8006ada:	6864      	ldr	r4, [r4, #4]
 8006adc:	47a0      	blx	r4
 8006ade:	b007      	add	sp, #28
 8006ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	17ff95ae 	.word	0x17ff95ae

08006ae8 <crypto_stream_salsa20_keygen>:
 8006ae8:	2120      	movs	r1, #32
 8006aea:	f000 b873 	b.w	8006bd4 <randombytes_buf>
	...

08006af0 <_crypto_stream_salsa20_pick_best_implementation>:
 8006af0:	4b04      	ldr	r3, [pc, #16]	; (8006b04 <_crypto_stream_salsa20_pick_best_implementation+0x14>)
 8006af2:	4a05      	ldr	r2, [pc, #20]	; (8006b08 <_crypto_stream_salsa20_pick_best_implementation+0x18>)
 8006af4:	447b      	add	r3, pc
 8006af6:	2000      	movs	r0, #0
 8006af8:	589a      	ldr	r2, [r3, r2]
 8006afa:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <_crypto_stream_salsa20_pick_best_implementation+0x1c>)
 8006afc:	447b      	add	r3, pc
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	17ff9f84 	.word	0x17ff9f84
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	17ff9578 	.word	0x17ff9578

08006b10 <randombytes_set_implementation>:
 8006b10:	4b02      	ldr	r3, [pc, #8]	; (8006b1c <randombytes_set_implementation+0xc>)
 8006b12:	447b      	add	r3, pc
 8006b14:	6018      	str	r0, [r3, #0]
 8006b16:	2000      	movs	r0, #0
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	17ff9fc6 	.word	0x17ff9fc6

08006b20 <randombytes_stir>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	f000 f80b 	bl	8006b3c <randombytes_init_if_needed>
 8006b26:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <randombytes_stir+0x18>)
 8006b28:	447b      	add	r3, pc
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	b113      	cbz	r3, 8006b36 <randombytes_stir+0x16>
 8006b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b34:	4718      	bx	r3
 8006b36:	bd10      	pop	{r4, pc}
 8006b38:	17ff9fb0 	.word	0x17ff9fb0

08006b3c <randombytes_init_if_needed>:
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <randombytes_init_if_needed+0x18>)
 8006b3e:	4a06      	ldr	r2, [pc, #24]	; (8006b58 <randombytes_init_if_needed+0x1c>)
 8006b40:	447b      	add	r3, pc
 8006b42:	447a      	add	r2, pc
 8006b44:	6819      	ldr	r1, [r3, #0]
 8006b46:	b921      	cbnz	r1, 8006b52 <randombytes_init_if_needed+0x16>
 8006b48:	4904      	ldr	r1, [pc, #16]	; (8006b5c <randombytes_init_if_needed+0x20>)
 8006b4a:	5852      	ldr	r2, [r2, r1]
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f7ff bfe7 	b.w	8006b20 <randombytes_stir>
 8006b52:	4770      	bx	lr
 8006b54:	17ff9f98 	.word	0x17ff9f98
 8006b58:	17ff9f36 	.word	0x17ff9f36
 8006b5c:	00000008 	.word	0x00000008

08006b60 <randombytes_implementation_name>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	f7ff ffeb 	bl	8006b3c <randombytes_init_if_needed>
 8006b66:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <randombytes_implementation_name+0x14>)
 8006b68:	447b      	add	r3, pc
 8006b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4718      	bx	r3
 8006b74:	17ff9f70 	.word	0x17ff9f70

08006b78 <randombytes_random>:
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	f7ff ffdf 	bl	8006b3c <randombytes_init_if_needed>
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <randombytes_random+0x14>)
 8006b80:	447b      	add	r3, pc
 8006b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4718      	bx	r3
 8006b8c:	17ff9f58 	.word	0x17ff9f58

08006b90 <randombytes_uniform>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	4604      	mov	r4, r0
 8006b94:	f7ff ffd2 	bl	8006b3c <randombytes_init_if_needed>
 8006b98:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <randombytes_uniform+0x40>)
 8006b9a:	447b      	add	r3, pc
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	b11b      	cbz	r3, 8006baa <randombytes_uniform+0x1a>
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ba8:	4718      	bx	r3
 8006baa:	2c01      	cmp	r4, #1
 8006bac:	d90d      	bls.n	8006bca <randombytes_uniform+0x3a>
 8006bae:	4263      	negs	r3, r4
 8006bb0:	fbb3 f5f4 	udiv	r5, r3, r4
 8006bb4:	fb04 3515 	mls	r5, r4, r5, r3
 8006bb8:	f7ff ffde 	bl	8006b78 <randombytes_random>
 8006bbc:	4285      	cmp	r5, r0
 8006bbe:	d8fb      	bhi.n	8006bb8 <randombytes_uniform+0x28>
 8006bc0:	fbb0 f3f4 	udiv	r3, r0, r4
 8006bc4:	fb04 0013 	mls	r0, r4, r3, r0
 8006bc8:	bd70      	pop	{r4, r5, r6, pc}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
 8006bce:	bf00      	nop
 8006bd0:	17ff9f3e 	.word	0x17ff9f3e

08006bd4 <randombytes_buf>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4605      	mov	r5, r0
 8006bda:	f7ff ffaf 	bl	8006b3c <randombytes_init_if_needed>
 8006bde:	b144      	cbz	r4, 8006bf2 <randombytes_buf+0x1e>
 8006be0:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <randombytes_buf+0x20>)
 8006be2:	447b      	add	r3, pc
 8006be4:	4621      	mov	r1, r4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4628      	mov	r0, r5
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bf0:	4718      	bx	r3
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	17ff9ef6 	.word	0x17ff9ef6

08006bf8 <randombytes_buf_deterministic>:
 8006bf8:	b507      	push	{r0, r1, r2, lr}
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <randombytes_buf_deterministic+0x18>)
 8006bfc:	9201      	str	r2, [sp, #4]
 8006bfe:	447b      	add	r3, pc
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	460a      	mov	r2, r1
 8006c04:	2300      	movs	r3, #0
 8006c06:	f001 f913 	bl	8007e30 <crypto_stream_chacha20_ietf>
 8006c0a:	b003      	add	sp, #12
 8006c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c10:	000052b2 	.word	0x000052b2

08006c14 <randombytes_seedbytes>:
 8006c14:	2020      	movs	r0, #32
 8006c16:	4770      	bx	lr

08006c18 <randombytes_close>:
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <randombytes_close+0x14>)
 8006c1a:	447b      	add	r3, pc
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	b113      	cbz	r3, 8006c26 <randombytes_close+0xe>
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	b103      	cbz	r3, 8006c26 <randombytes_close+0xe>
 8006c24:	4718      	bx	r3
 8006c26:	2000      	movs	r0, #0
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	17ff9ebe 	.word	0x17ff9ebe

08006c30 <randombytes>:
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf08      	it	eq
 8006c34:	2a00      	cmpeq	r2, #0
 8006c36:	b508      	push	{r3, lr}
 8006c38:	d309      	bcc.n	8006c4e <randombytes+0x1e>
 8006c3a:	4a07      	ldr	r2, [pc, #28]	; (8006c58 <randombytes+0x28>)
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <randombytes+0x2c>)
 8006c3e:	4808      	ldr	r0, [pc, #32]	; (8006c60 <randombytes+0x30>)
 8006c40:	447a      	add	r2, pc
 8006c42:	447b      	add	r3, pc
 8006c44:	320c      	adds	r2, #12
 8006c46:	21cc      	movs	r1, #204	; 0xcc
 8006c48:	4478      	add	r0, pc
 8006c4a:	f001 fc2f 	bl	80084ac <__assert_func>
 8006c4e:	4611      	mov	r1, r2
 8006c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c54:	f7ff bfbe 	b.w	8006bd4 <randombytes_buf>
 8006c58:	00005270 	.word	0x00005270
 8006c5c:	00005286 	.word	0x00005286
 8006c60:	00005294 	.word	0x00005294

08006c64 <sodium_crit_enter>:
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <sodium_crit_enter+0x1c>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	447b      	add	r3, pc
 8006c6a:	e853 0f00 	ldrex	r0, [r3]
 8006c6e:	e843 2100 	strex	r1, r2, [r3]
 8006c72:	2900      	cmp	r1, #0
 8006c74:	d1f9      	bne.n	8006c6a <sodium_crit_enter+0x6>
 8006c76:	f3bf 8f5b 	dmb	ish
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d1f5      	bne.n	8006c6a <sodium_crit_enter+0x6>
 8006c7e:	4770      	bx	lr
 8006c80:	17ff9e74 	.word	0x17ff9e74

08006c84 <sodium_init>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	f7ff ffed 	bl	8006c64 <sodium_crit_enter>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	b9a8      	cbnz	r0, 8006cba <sodium_init+0x36>
 8006c8e:	4d0c      	ldr	r5, [pc, #48]	; (8006cc0 <sodium_init+0x3c>)
 8006c90:	447d      	add	r5, pc
 8006c92:	2601      	movs	r6, #1
 8006c94:	686b      	ldr	r3, [r5, #4]
 8006c96:	b12b      	cbz	r3, 8006ca4 <sodium_init+0x20>
 8006c98:	f3bf 8f5b 	dmb	ish
 8006c9c:	4634      	mov	r4, r6
 8006c9e:	6028      	str	r0, [r5, #0]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	f000 f83a 	bl	8006d1c <_sodium_runtime_get_cpu_features>
 8006ca8:	f7ff ff3a 	bl	8006b20 <randombytes_stir>
 8006cac:	f000 f900 	bl	8006eb0 <_sodium_alloc_init>
 8006cb0:	606e      	str	r6, [r5, #4]
 8006cb2:	f3bf 8f5b 	dmb	ish
 8006cb6:	602c      	str	r4, [r5, #0]
 8006cb8:	e7f2      	b.n	8006ca0 <sodium_init+0x1c>
 8006cba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006cbe:	e7ef      	b.n	8006ca0 <sodium_init+0x1c>
 8006cc0:	17ff9e4c 	.word	0x17ff9e4c

08006cc4 <sodium_crit_leave>:
 8006cc4:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <sodium_crit_leave+0x10>)
 8006cc6:	f3bf 8f5b 	dmb	ish
 8006cca:	447b      	add	r3, pc
 8006ccc:	2000      	movs	r0, #0
 8006cce:	6018      	str	r0, [r3, #0]
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	17ff9e12 	.word	0x17ff9e12

08006cd8 <sodium_misuse>:
 8006cd8:	b508      	push	{r3, lr}
 8006cda:	f7ff ffc3 	bl	8006c64 <sodium_crit_enter>
 8006cde:	b938      	cbnz	r0, 8006cf0 <sodium_misuse+0x18>
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <sodium_misuse+0x1c>)
 8006ce2:	447a      	add	r2, pc
 8006ce4:	6893      	ldr	r3, [r2, #8]
 8006ce6:	f3bf 8f5b 	dmb	ish
 8006cea:	6010      	str	r0, [r2, #0]
 8006cec:	b103      	cbz	r3, 8006cf0 <sodium_misuse+0x18>
 8006cee:	4798      	blx	r3
 8006cf0:	f001 fbd4 	bl	800849c <abort>
 8006cf4:	17ff9dfa 	.word	0x17ff9dfa

08006cf8 <sodium_set_misuse_handler>:
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	f7ff ffb2 	bl	8006c64 <sodium_crit_enter>
 8006d00:	b930      	cbnz	r0, 8006d10 <sodium_set_misuse_handler+0x18>
 8006d02:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <sodium_set_misuse_handler+0x20>)
 8006d04:	447b      	add	r3, pc
 8006d06:	609c      	str	r4, [r3, #8]
 8006d08:	f3bf 8f5b 	dmb	ish
 8006d0c:	6018      	str	r0, [r3, #0]
 8006d0e:	bd10      	pop	{r4, pc}
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	bf00      	nop
 8006d18:	17ff9dd8 	.word	0x17ff9dd8

08006d1c <_sodium_runtime_get_cpu_features>:
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <_sodium_runtime_get_cpu_features+0x10>)
 8006d1e:	447b      	add	r3, pc
 8006d20:	2000      	movs	r0, #0
 8006d22:	2201      	movs	r2, #1
 8006d24:	6058      	str	r0, [r3, #4]
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	17ff9dca 	.word	0x17ff9dca

08006d30 <sodium_runtime_has_neon>:
 8006d30:	4b01      	ldr	r3, [pc, #4]	; (8006d38 <sodium_runtime_has_neon+0x8>)
 8006d32:	447b      	add	r3, pc
 8006d34:	6858      	ldr	r0, [r3, #4]
 8006d36:	4770      	bx	lr
 8006d38:	17ff9db6 	.word	0x17ff9db6

08006d3c <sodium_runtime_has_sse2>:
 8006d3c:	4b01      	ldr	r3, [pc, #4]	; (8006d44 <sodium_runtime_has_sse2+0x8>)
 8006d3e:	447b      	add	r3, pc
 8006d40:	6898      	ldr	r0, [r3, #8]
 8006d42:	4770      	bx	lr
 8006d44:	17ff9daa 	.word	0x17ff9daa

08006d48 <sodium_runtime_has_sse3>:
 8006d48:	4b01      	ldr	r3, [pc, #4]	; (8006d50 <sodium_runtime_has_sse3+0x8>)
 8006d4a:	447b      	add	r3, pc
 8006d4c:	68d8      	ldr	r0, [r3, #12]
 8006d4e:	4770      	bx	lr
 8006d50:	17ff9d9e 	.word	0x17ff9d9e

08006d54 <sodium_runtime_has_ssse3>:
 8006d54:	4b01      	ldr	r3, [pc, #4]	; (8006d5c <sodium_runtime_has_ssse3+0x8>)
 8006d56:	447b      	add	r3, pc
 8006d58:	6918      	ldr	r0, [r3, #16]
 8006d5a:	4770      	bx	lr
 8006d5c:	17ff9d92 	.word	0x17ff9d92

08006d60 <sodium_runtime_has_sse41>:
 8006d60:	4b01      	ldr	r3, [pc, #4]	; (8006d68 <sodium_runtime_has_sse41+0x8>)
 8006d62:	447b      	add	r3, pc
 8006d64:	6958      	ldr	r0, [r3, #20]
 8006d66:	4770      	bx	lr
 8006d68:	17ff9d86 	.word	0x17ff9d86

08006d6c <sodium_runtime_has_avx>:
 8006d6c:	4b01      	ldr	r3, [pc, #4]	; (8006d74 <sodium_runtime_has_avx+0x8>)
 8006d6e:	447b      	add	r3, pc
 8006d70:	6998      	ldr	r0, [r3, #24]
 8006d72:	4770      	bx	lr
 8006d74:	17ff9d7a 	.word	0x17ff9d7a

08006d78 <sodium_runtime_has_avx2>:
 8006d78:	4b01      	ldr	r3, [pc, #4]	; (8006d80 <sodium_runtime_has_avx2+0x8>)
 8006d7a:	447b      	add	r3, pc
 8006d7c:	69d8      	ldr	r0, [r3, #28]
 8006d7e:	4770      	bx	lr
 8006d80:	17ff9d6e 	.word	0x17ff9d6e

08006d84 <sodium_runtime_has_avx512f>:
 8006d84:	4b01      	ldr	r3, [pc, #4]	; (8006d8c <sodium_runtime_has_avx512f+0x8>)
 8006d86:	447b      	add	r3, pc
 8006d88:	6a18      	ldr	r0, [r3, #32]
 8006d8a:	4770      	bx	lr
 8006d8c:	17ff9d62 	.word	0x17ff9d62

08006d90 <sodium_runtime_has_pclmul>:
 8006d90:	4b01      	ldr	r3, [pc, #4]	; (8006d98 <sodium_runtime_has_pclmul+0x8>)
 8006d92:	447b      	add	r3, pc
 8006d94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006d96:	4770      	bx	lr
 8006d98:	17ff9d56 	.word	0x17ff9d56

08006d9c <sodium_runtime_has_aesni>:
 8006d9c:	4b01      	ldr	r3, [pc, #4]	; (8006da4 <sodium_runtime_has_aesni+0x8>)
 8006d9e:	447b      	add	r3, pc
 8006da0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006da2:	4770      	bx	lr
 8006da4:	17ff9d4a 	.word	0x17ff9d4a

08006da8 <_sodium_dummy_symbol_to_prevent_memzero_lto>:
 8006da8:	4770      	bx	lr

08006daa <sodium_memzero>:
 8006daa:	f001 bbe5 	b.w	8008578 <explicit_bzero>

08006dae <_sodium_dummy_symbol_to_prevent_memcmp_lto>:
 8006dae:	4770      	bx	lr

08006db0 <sodium_memcmp>:
 8006db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db2:	2400      	movs	r4, #0
 8006db4:	4606      	mov	r6, r0
 8006db6:	460f      	mov	r7, r1
 8006db8:	4615      	mov	r5, r2
 8006dba:	f88d 4007 	strb.w	r4, [sp, #7]
 8006dbe:	f7ff fff6 	bl	8006dae <_sodium_dummy_symbol_to_prevent_memcmp_lto>
 8006dc2:	4623      	mov	r3, r4
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	d106      	bne.n	8006dd6 <sodium_memcmp+0x26>
 8006dc8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006dcc:	3801      	subs	r0, #1
 8006dce:	0fc0      	lsrs	r0, r0, #31
 8006dd0:	3801      	subs	r0, #1
 8006dd2:	b003      	add	sp, #12
 8006dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd6:	5cf1      	ldrb	r1, [r6, r3]
 8006dd8:	5cf8      	ldrb	r0, [r7, r3]
 8006dda:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006dde:	4041      	eors	r1, r0
 8006de0:	430a      	orrs	r2, r1
 8006de2:	f88d 2007 	strb.w	r2, [sp, #7]
 8006de6:	3301      	adds	r3, #1
 8006de8:	e7ec      	b.n	8006dc4 <sodium_memcmp+0x14>

08006dea <_sodium_dummy_symbol_to_prevent_compare_lto>:
 8006dea:	4770      	bx	lr

08006dec <sodium_compare>:
 8006dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dee:	2300      	movs	r3, #0
 8006df0:	4616      	mov	r6, r2
 8006df2:	f88d 3006 	strb.w	r3, [sp, #6]
 8006df6:	4605      	mov	r5, r0
 8006df8:	460c      	mov	r4, r1
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e00:	f7ff fff3 	bl	8006dea <_sodium_dummy_symbol_to_prevent_compare_lto>
 8006e04:	19aa      	adds	r2, r5, r6
 8006e06:	19a1      	adds	r1, r4, r6
 8006e08:	42aa      	cmp	r2, r5
 8006e0a:	d10a      	bne.n	8006e22 <sodium_compare+0x36>
 8006e0c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8006e10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8006e14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e18:	4410      	add	r0, r2
 8006e1a:	4418      	add	r0, r3
 8006e1c:	3801      	subs	r0, #1
 8006e1e:	b003      	add	sp, #12
 8006e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e22:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8006e26:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8006e2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006e2e:	f89d 6006 	ldrb.w	r6, [sp, #6]
 8006e32:	1ae7      	subs	r7, r4, r3
 8006e34:	ea00 2027 	and.w	r0, r0, r7, asr #8
 8006e38:	4330      	orrs	r0, r6
 8006e3a:	f88d 0006 	strb.w	r0, [sp, #6]
 8006e3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006e42:	4063      	eors	r3, r4
 8006e44:	3b01      	subs	r3, #1
 8006e46:	ea00 73e3 	and.w	r3, r0, r3, asr #31
 8006e4a:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e4e:	e7db      	b.n	8006e08 <sodium_compare+0x1c>

08006e50 <sodium_is_zero>:
 8006e50:	b082      	sub	sp, #8
 8006e52:	2300      	movs	r3, #0
 8006e54:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e58:	4401      	add	r1, r0
 8006e5a:	4288      	cmp	r0, r1
 8006e5c:	d105      	bne.n	8006e6a <sodium_is_zero+0x1a>
 8006e5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006e62:	3801      	subs	r0, #1
 8006e64:	0fc0      	lsrs	r0, r0, #31
 8006e66:	b002      	add	sp, #8
 8006e68:	4770      	bx	lr
 8006e6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006e6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e78:	e7ef      	b.n	8006e5a <sodium_is_zero+0xa>

08006e7a <sodium_increment>:
 8006e7a:	4401      	add	r1, r0
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	4288      	cmp	r0, r1
 8006e80:	d100      	bne.n	8006e84 <sodium_increment+0xa>
 8006e82:	4770      	bx	lr
 8006e84:	7802      	ldrb	r2, [r0, #0]
 8006e86:	4413      	add	r3, r2
 8006e88:	f800 3b01 	strb.w	r3, [r0], #1
 8006e8c:	0a1b      	lsrs	r3, r3, #8
 8006e8e:	e7f6      	b.n	8006e7e <sodium_increment+0x4>

08006e90 <sodium_add>:
 8006e90:	b530      	push	{r4, r5, lr}
 8006e92:	3901      	subs	r1, #1
 8006e94:	4402      	add	r2, r0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4290      	cmp	r0, r2
 8006e9a:	d100      	bne.n	8006e9e <sodium_add+0xe>
 8006e9c:	bd30      	pop	{r4, r5, pc}
 8006e9e:	7804      	ldrb	r4, [r0, #0]
 8006ea0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006ea4:	442c      	add	r4, r5
 8006ea6:	4423      	add	r3, r4
 8006ea8:	f800 3b01 	strb.w	r3, [r0], #1
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	e7f3      	b.n	8006e98 <sodium_add+0x8>

08006eb0 <_sodium_alloc_init>:
 8006eb0:	b508      	push	{r3, lr}
 8006eb2:	4803      	ldr	r0, [pc, #12]	; (8006ec0 <_sodium_alloc_init+0x10>)
 8006eb4:	2110      	movs	r1, #16
 8006eb6:	4478      	add	r0, pc
 8006eb8:	f7ff fe8c 	bl	8006bd4 <randombytes_buf>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	bd08      	pop	{r3, pc}
 8006ec0:	17ff9c5e 	.word	0x17ff9c5e

08006ec4 <sodium_mlock>:
 8006ec4:	b508      	push	{r3, lr}
 8006ec6:	f001 fb51 	bl	800856c <__errno>
 8006eca:	2358      	movs	r3, #88	; 0x58
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ed2:	bd08      	pop	{r3, pc}

08006ed4 <sodium_munlock>:
 8006ed4:	b508      	push	{r3, lr}
 8006ed6:	f001 fb4f 	bl	8008578 <explicit_bzero>
 8006eda:	f001 fb47 	bl	800856c <__errno>
 8006ede:	2358      	movs	r3, #88	; 0x58
 8006ee0:	6003      	str	r3, [r0, #0]
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee6:	bd08      	pop	{r3, pc}

08006ee8 <sodium_malloc>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4605      	mov	r5, r0
 8006eec:	2800      	cmp	r0, #0
 8006eee:	bf08      	it	eq
 8006ef0:	2001      	moveq	r0, #1
 8006ef2:	f001 fb89 	bl	8008608 <malloc>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	b118      	cbz	r0, 8006f02 <sodium_malloc+0x1a>
 8006efa:	462a      	mov	r2, r5
 8006efc:	21db      	movs	r1, #219	; 0xdb
 8006efe:	f001 ff35 	bl	8008d6c <memset>
 8006f02:	4620      	mov	r0, r4
 8006f04:	bd38      	pop	{r3, r4, r5, pc}

08006f06 <sodium_allocarray>:
 8006f06:	b508      	push	{r3, lr}
 8006f08:	b128      	cbz	r0, 8006f16 <sodium_allocarray+0x10>
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f0e:	fbb3 f3f0 	udiv	r3, r3, r0
 8006f12:	428b      	cmp	r3, r1
 8006f14:	d904      	bls.n	8006f20 <sodium_allocarray+0x1a>
 8006f16:	4348      	muls	r0, r1
 8006f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f1c:	f7ff bfe4 	b.w	8006ee8 <sodium_malloc>
 8006f20:	f001 fb24 	bl	800856c <__errno>
 8006f24:	230c      	movs	r3, #12
 8006f26:	6003      	str	r3, [r0, #0]
 8006f28:	2000      	movs	r0, #0
 8006f2a:	bd08      	pop	{r3, pc}

08006f2c <sodium_free>:
 8006f2c:	f001 bb74 	b.w	8008618 <free>

08006f30 <sodium_mprotect_noaccess>:
 8006f30:	b508      	push	{r3, lr}
 8006f32:	f001 fb1b 	bl	800856c <__errno>
 8006f36:	2358      	movs	r3, #88	; 0x58
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f3e:	bd08      	pop	{r3, pc}

08006f40 <sodium_mprotect_readonly>:
 8006f40:	b508      	push	{r3, lr}
 8006f42:	f001 fb13 	bl	800856c <__errno>
 8006f46:	2358      	movs	r3, #88	; 0x58
 8006f48:	6003      	str	r3, [r0, #0]
 8006f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f4e:	bd08      	pop	{r3, pc}

08006f50 <sodium_mprotect_readwrite>:
 8006f50:	b508      	push	{r3, lr}
 8006f52:	f001 fb0b 	bl	800856c <__errno>
 8006f56:	2358      	movs	r3, #88	; 0x58
 8006f58:	6003      	str	r3, [r0, #0]
 8006f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f5e:	bd08      	pop	{r3, pc}

08006f60 <sodium_pad>:
 8006f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f62:	b393      	cbz	r3, 8006fca <sodium_pad+0x6a>
 8006f64:	1e5c      	subs	r4, r3, #1
 8006f66:	4223      	tst	r3, r4
 8006f68:	ea6f 0602 	mvn.w	r6, r2
 8006f6c:	bf1b      	ittet	ne
 8006f6e:	fbb2 f5f3 	udivne	r5, r2, r3
 8006f72:	fb03 2515 	mlsne	r5, r3, r5, r2
 8006f76:	4034      	andeq	r4, r6
 8006f78:	1b64      	subne	r4, r4, r5
 8006f7a:	42b4      	cmp	r4, r6
 8006f7c:	d301      	bcc.n	8006f82 <sodium_pad+0x22>
 8006f7e:	f7ff feab 	bl	8006cd8 <sodium_misuse>
 8006f82:	9d06      	ldr	r5, [sp, #24]
 8006f84:	4422      	add	r2, r4
 8006f86:	42aa      	cmp	r2, r5
 8006f88:	d21f      	bcs.n	8006fca <sodium_pad+0x6a>
 8006f8a:	b108      	cbz	r0, 8006f90 <sodium_pad+0x30>
 8006f8c:	1c55      	adds	r5, r2, #1
 8006f8e:	6005      	str	r5, [r0, #0]
 8006f90:	2500      	movs	r5, #0
 8006f92:	f88d 5007 	strb.w	r5, [sp, #7]
 8006f96:	440a      	add	r2, r1
 8006f98:	ea84 0005 	eor.w	r0, r4, r5
 8006f9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006fa0:	7816      	ldrb	r6, [r2, #0]
 8006fa2:	3801      	subs	r0, #1
 8006fa4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006fa8:	4031      	ands	r1, r6
 8006faa:	f020 067f 	bic.w	r6, r0, #127	; 0x7f
 8006fae:	4331      	orrs	r1, r6
 8006fb0:	f802 1901 	strb.w	r1, [r2], #-1
 8006fb4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006fb8:	3501      	adds	r5, #1
 8006fba:	4308      	orrs	r0, r1
 8006fbc:	42ab      	cmp	r3, r5
 8006fbe:	f88d 0007 	strb.w	r0, [sp, #7]
 8006fc2:	d1e9      	bne.n	8006f98 <sodium_pad+0x38>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fce:	e7fa      	b.n	8006fc6 <sodium_pad+0x66>

08006fd0 <sodium_unpad>:
 8006fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	f04f 0500 	mov.w	r5, #0
 8006fd8:	9501      	str	r5, [sp, #4]
 8006fda:	d325      	bcc.n	8007028 <sodium_unpad+0x58>
 8006fdc:	b323      	cbz	r3, 8007028 <sodium_unpad+0x58>
 8006fde:	4411      	add	r1, r2
 8006fe0:	462e      	mov	r6, r5
 8006fe2:	46ae      	mov	lr, r5
 8006fe4:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8006fe8:	9f01      	ldr	r7, [sp, #4]
 8006fea:	f08c 0480 	eor.w	r4, ip, #128	; 0x80
 8006fee:	3f01      	subs	r7, #1
 8006ff0:	3c01      	subs	r4, #1
 8006ff2:	403c      	ands	r4, r7
 8006ff4:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 8006ff8:	403c      	ands	r4, r7
 8006ffa:	f3c4 2400 	ubfx	r4, r4, #8, #1
 8006ffe:	ea4c 0e0e 	orr.w	lr, ip, lr
 8007002:	4267      	negs	r7, r4
 8007004:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007008:	402f      	ands	r7, r5
 800700a:	3501      	adds	r5, #1
 800700c:	ea47 070c 	orr.w	r7, r7, ip
 8007010:	42ab      	cmp	r3, r5
 8007012:	9701      	str	r7, [sp, #4]
 8007014:	ea46 0604 	orr.w	r6, r6, r4
 8007018:	d1e4      	bne.n	8006fe4 <sodium_unpad+0x14>
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	43db      	mvns	r3, r3
 800701e:	441a      	add	r2, r3
 8007020:	6002      	str	r2, [r0, #0]
 8007022:	1e70      	subs	r0, r6, #1
 8007024:	b003      	add	sp, #12
 8007026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800702c:	e7fa      	b.n	8007024 <sodium_unpad+0x54>
	...

08007030 <randombytes_sysrandom_implementation_name>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <randombytes_sysrandom_implementation_name+0x8>)
 8007032:	4478      	add	r0, pc
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	00004ece 	.word	0x00004ece

0800703c <randombytes_sysrandom_close>:
 800703c:	b510      	push	{r4, lr}
 800703e:	4c08      	ldr	r4, [pc, #32]	; (8007060 <randombytes_sysrandom_close+0x24>)
 8007040:	447c      	add	r4, pc
 8007042:	6820      	ldr	r0, [r4, #0]
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <randombytes_sysrandom_close+0x12>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800704c:	bd10      	pop	{r4, pc}
 800704e:	f002 f845 	bl	80090dc <close>
 8007052:	2800      	cmp	r0, #0
 8007054:	d1f8      	bne.n	8007048 <randombytes_sysrandom_close+0xc>
 8007056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	6060      	str	r0, [r4, #4]
 800705e:	bd10      	pop	{r4, pc}
 8007060:	17ff9028 	.word	0x17ff9028

08007064 <randombytes_sysrandom_stir>:
 8007064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007066:	4b24      	ldr	r3, [pc, #144]	; (80070f8 <randombytes_sysrandom_stir+0x94>)
 8007068:	447b      	add	r3, pc
 800706a:	b091      	sub	sp, #68	; 0x44
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d140      	bne.n	80070f4 <randombytes_sysrandom_stir+0x90>
 8007072:	f001 fa7b 	bl	800856c <__errno>
 8007076:	4d21      	ldr	r5, [pc, #132]	; (80070fc <randombytes_sysrandom_stir+0x98>)
 8007078:	6806      	ldr	r6, [r0, #0]
 800707a:	447d      	add	r5, pc
 800707c:	af01      	add	r7, sp, #4
 800707e:	2100      	movs	r1, #0
 8007080:	6828      	ldr	r0, [r5, #0]
 8007082:	f002 f843 	bl	800910c <open>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	4604      	mov	r4, r0
 800708a:	d01f      	beq.n	80070cc <randombytes_sysrandom_stir+0x68>
 800708c:	4639      	mov	r1, r7
 800708e:	f002 f835 	bl	80090fc <fstat>
 8007092:	b9b0      	cbnz	r0, 80070c2 <randombytes_sysrandom_stir+0x5e>
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800709a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709e:	d110      	bne.n	80070c2 <randombytes_sysrandom_stir+0x5e>
 80070a0:	2101      	movs	r1, #1
 80070a2:	4620      	mov	r0, r4
 80070a4:	f002 f822 	bl	80090ec <fcntl>
 80070a8:	2102      	movs	r1, #2
 80070aa:	f040 0201 	orr.w	r2, r0, #1
 80070ae:	4620      	mov	r0, r4
 80070b0:	f002 f81c 	bl	80090ec <fcntl>
 80070b4:	4d12      	ldr	r5, [pc, #72]	; (8007100 <randombytes_sysrandom_stir+0x9c>)
 80070b6:	447d      	add	r5, pc
 80070b8:	602c      	str	r4, [r5, #0]
 80070ba:	3401      	adds	r4, #1
 80070bc:	d115      	bne.n	80070ea <randombytes_sysrandom_stir+0x86>
 80070be:	f7ff fe0b 	bl	8006cd8 <sodium_misuse>
 80070c2:	4620      	mov	r0, r4
 80070c4:	f002 f80a 	bl	80090dc <close>
 80070c8:	3504      	adds	r5, #4
 80070ca:	e004      	b.n	80070d6 <randombytes_sysrandom_stir+0x72>
 80070cc:	f001 fa4e 	bl	800856c <__errno>
 80070d0:	6803      	ldr	r3, [r0, #0]
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d1f8      	bne.n	80070c8 <randombytes_sysrandom_stir+0x64>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1d0      	bne.n	800707e <randombytes_sysrandom_stir+0x1a>
 80070dc:	f001 fa46 	bl	800856c <__errno>
 80070e0:	2305      	movs	r3, #5
 80070e2:	6003      	str	r3, [r0, #0]
 80070e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070e8:	e7e4      	b.n	80070b4 <randombytes_sysrandom_stir+0x50>
 80070ea:	f001 fa3f 	bl	800856c <__errno>
 80070ee:	2301      	movs	r3, #1
 80070f0:	6006      	str	r6, [r0, #0]
 80070f2:	606b      	str	r3, [r5, #4]
 80070f4:	b011      	add	sp, #68	; 0x44
 80070f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f8:	17ff9000 	.word	0x17ff9000
 80070fc:	17ff8ffe 	.word	0x17ff8ffe
 8007100:	17ff8fb2 	.word	0x17ff8fb2

08007104 <randombytes_sysrandom_buf>:
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007108:	4b22      	ldr	r3, [pc, #136]	; (8007194 <randombytes_sysrandom_buf+0x90>)
 800710a:	447b      	add	r3, pc
 800710c:	4680      	mov	r8, r0
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	460e      	mov	r6, r1
 8007112:	b90b      	cbnz	r3, 8007118 <randombytes_sysrandom_buf+0x14>
 8007114:	f7ff ffa6 	bl	8007064 <randombytes_sysrandom_stir>
 8007118:	4b1f      	ldr	r3, [pc, #124]	; (8007198 <randombytes_sysrandom_buf+0x94>)
 800711a:	447b      	add	r3, pc
 800711c:	f8d3 9000 	ldr.w	r9, [r3]
 8007120:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8007124:	d101      	bne.n	800712a <randombytes_sysrandom_buf+0x26>
 8007126:	f7ff fdd7 	bl	8006cd8 <sodium_misuse>
 800712a:	b946      	cbnz	r6, 800713e <randombytes_sysrandom_buf+0x3a>
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <randombytes_sysrandom_buf+0x98>)
 800712e:	4a1c      	ldr	r2, [pc, #112]	; (80071a0 <randombytes_sysrandom_buf+0x9c>)
 8007130:	481c      	ldr	r0, [pc, #112]	; (80071a4 <randombytes_sysrandom_buf+0xa0>)
 8007132:	447b      	add	r3, pc
 8007134:	447a      	add	r2, pc
 8007136:	2170      	movs	r1, #112	; 0x70
 8007138:	4478      	add	r0, pc
 800713a:	f001 f9b7 	bl	80084ac <__assert_func>
 800713e:	4b14      	ldr	r3, [pc, #80]	; (8007190 <randombytes_sysrandom_buf+0x8c>)
 8007140:	429e      	cmp	r6, r3
 8007142:	d816      	bhi.n	8007172 <randombytes_sysrandom_buf+0x6e>
 8007144:	4645      	mov	r5, r8
 8007146:	4637      	mov	r7, r6
 8007148:	463a      	mov	r2, r7
 800714a:	4629      	mov	r1, r5
 800714c:	4648      	mov	r0, r9
 800714e:	f001 fff1 	bl	8009134 <read>
 8007152:	1e04      	subs	r4, r0, #0
 8007154:	da15      	bge.n	8007182 <randombytes_sysrandom_buf+0x7e>
 8007156:	f001 fa09 	bl	800856c <__errno>
 800715a:	6803      	ldr	r3, [r0, #0]
 800715c:	2b04      	cmp	r3, #4
 800715e:	d0f3      	beq.n	8007148 <randombytes_sysrandom_buf+0x44>
 8007160:	f001 fa04 	bl	800856c <__errno>
 8007164:	6803      	ldr	r3, [r0, #0]
 8007166:	2b0b      	cmp	r3, #11
 8007168:	d0ee      	beq.n	8007148 <randombytes_sysrandom_buf+0x44>
 800716a:	42a6      	cmp	r6, r4
 800716c:	d1db      	bne.n	8007126 <randombytes_sysrandom_buf+0x22>
 800716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <randombytes_sysrandom_buf+0xa4>)
 8007174:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <randombytes_sysrandom_buf+0xa8>)
 8007176:	480e      	ldr	r0, [pc, #56]	; (80071b0 <randombytes_sysrandom_buf+0xac>)
 8007178:	447b      	add	r3, pc
 800717a:	447a      	add	r2, pc
 800717c:	2171      	movs	r1, #113	; 0x71
 800717e:	4478      	add	r0, pc
 8007180:	e7db      	b.n	800713a <randombytes_sysrandom_buf+0x36>
 8007182:	d002      	beq.n	800718a <randombytes_sysrandom_buf+0x86>
 8007184:	1b3f      	subs	r7, r7, r4
 8007186:	4425      	add	r5, r4
 8007188:	d1de      	bne.n	8007148 <randombytes_sysrandom_buf+0x44>
 800718a:	eba5 0408 	sub.w	r4, r5, r8
 800718e:	e7ec      	b.n	800716a <randombytes_sysrandom_buf+0x66>
 8007190:	7ffffffe 	.word	0x7ffffffe
 8007194:	17ff8f5e 	.word	0x17ff8f5e
 8007198:	17ff8f4e 	.word	0x17ff8f4e
 800719c:	00004dd8 	.word	0x00004dd8
 80071a0:	00004dc2 	.word	0x00004dc2
 80071a4:	00004de5 	.word	0x00004de5
 80071a8:	00004dd3 	.word	0x00004dd3
 80071ac:	00004d7c 	.word	0x00004d7c
 80071b0:	00004d9f 	.word	0x00004d9f

080071b4 <randombytes_sysrandom>:
 80071b4:	b507      	push	{r0, r1, r2, lr}
 80071b6:	2104      	movs	r1, #4
 80071b8:	eb0d 0001 	add.w	r0, sp, r1
 80071bc:	f7ff ffa2 	bl	8007104 <randombytes_sysrandom_buf>
 80071c0:	9801      	ldr	r0, [sp, #4]
 80071c2:	b003      	add	sp, #12
 80071c4:	f85d fb04 	ldr.w	pc, [sp], #4

080071c8 <stream_ref_xor_ic>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	4614      	mov	r4, r2
 80071ce:	b0a1      	sub	sp, #132	; 0x84
 80071d0:	461d      	mov	r5, r3
 80071d2:	ea54 0305 	orrs.w	r3, r4, r5
 80071d6:	4682      	mov	sl, r0
 80071d8:	4689      	mov	r9, r1
 80071da:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80071dc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80071de:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 80071e0:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80071e2:	d043      	beq.n	800726c <stream_ref_xor_ic+0xa4>
 80071e4:	2300      	movs	r3, #0
 80071e6:	f10d 0820 	add.w	r8, sp, #32
 80071ea:	5cc6      	ldrb	r6, [r0, r3]
 80071ec:	f803 6008 	strb.w	r6, [r3, r8]
 80071f0:	3301      	adds	r3, #1
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d1f9      	bne.n	80071ea <stream_ref_xor_ic+0x22>
 80071f6:	2300      	movs	r3, #0
 80071f8:	ae04      	add	r6, sp, #16
 80071fa:	5cc8      	ldrb	r0, [r1, r3]
 80071fc:	5598      	strb	r0, [r3, r6]
 80071fe:	3301      	adds	r3, #1
 8007200:	2b08      	cmp	r3, #8
 8007202:	d1fa      	bne.n	80071fa <stream_ref_xor_ic+0x32>
 8007204:	54f2      	strb	r2, [r6, r3]
 8007206:	3301      	adds	r3, #1
 8007208:	0a12      	lsrs	r2, r2, #8
 800720a:	2b10      	cmp	r3, #16
 800720c:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8007210:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8007214:	d1f6      	bne.n	8007204 <stream_ref_xor_ic+0x3c>
 8007216:	e9cd 4500 	strd	r4, r5, [sp]
 800721a:	af10      	add	r7, sp, #64	; 0x40
 800721c:	9b00      	ldr	r3, [sp, #0]
 800721e:	1ae3      	subs	r3, r4, r3
 8007220:	eb0a 0b03 	add.w	fp, sl, r3
 8007224:	444b      	add	r3, r9
 8007226:	9303      	str	r3, [sp, #12]
 8007228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800722c:	2b00      	cmp	r3, #0
 800722e:	bf08      	it	eq
 8007230:	2a40      	cmpeq	r2, #64	; 0x40
 8007232:	d21f      	bcs.n	8007274 <stream_ref_xor_ic+0xac>
 8007234:	09a2      	lsrs	r2, r4, #6
 8007236:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800723a:	0193      	lsls	r3, r2, #6
 800723c:	09a9      	lsrs	r1, r5, #6
 800723e:	4250      	negs	r0, r2
 8007240:	449a      	add	sl, r3
 8007242:	4499      	add	r9, r3
 8007244:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8007248:	fb03 0101 	mla	r1, r3, r1, r0
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	440b      	add	r3, r1
 8007252:	18a4      	adds	r4, r4, r2
 8007254:	415d      	adcs	r5, r3
 8007256:	ea54 0305 	orrs.w	r3, r4, r5
 800725a:	d12d      	bne.n	80072b8 <stream_ref_xor_ic+0xf0>
 800725c:	2140      	movs	r1, #64	; 0x40
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff fda3 	bl	8006daa <sodium_memzero>
 8007264:	2120      	movs	r1, #32
 8007266:	4640      	mov	r0, r8
 8007268:	f7ff fd9f 	bl	8006daa <sodium_memzero>
 800726c:	2000      	movs	r0, #0
 800726e:	b021      	add	sp, #132	; 0x84
 8007270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007274:	2300      	movs	r3, #0
 8007276:	4642      	mov	r2, r8
 8007278:	4631      	mov	r1, r6
 800727a:	4638      	mov	r0, r7
 800727c:	f000 fa98 	bl	80077b0 <crypto_core_salsa20>
 8007280:	2300      	movs	r3, #0
 8007282:	9a03      	ldr	r2, [sp, #12]
 8007284:	5cf9      	ldrb	r1, [r7, r3]
 8007286:	5cd2      	ldrb	r2, [r2, r3]
 8007288:	404a      	eors	r2, r1
 800728a:	f80b 2003 	strb.w	r2, [fp, r3]
 800728e:	3301      	adds	r3, #1
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d1f6      	bne.n	8007282 <stream_ref_xor_ic+0xba>
 8007294:	2308      	movs	r3, #8
 8007296:	2201      	movs	r2, #1
 8007298:	5cf1      	ldrb	r1, [r6, r3]
 800729a:	440a      	add	r2, r1
 800729c:	54f2      	strb	r2, [r6, r3]
 800729e:	3301      	adds	r3, #1
 80072a0:	2b10      	cmp	r3, #16
 80072a2:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80072a6:	d1f7      	bne.n	8007298 <stream_ref_xor_ic+0xd0>
 80072a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ac:	3a40      	subs	r2, #64	; 0x40
 80072ae:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80072b2:	e9cd 2300 	strd	r2, r3, [sp]
 80072b6:	e7b1      	b.n	800721c <stream_ref_xor_ic+0x54>
 80072b8:	2300      	movs	r3, #0
 80072ba:	4642      	mov	r2, r8
 80072bc:	4631      	mov	r1, r6
 80072be:	4638      	mov	r0, r7
 80072c0:	f000 fa76 	bl	80077b0 <crypto_core_salsa20>
 80072c4:	2300      	movs	r3, #0
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	d2c8      	bcs.n	800725c <stream_ref_xor_ic+0x94>
 80072ca:	f819 2003 	ldrb.w	r2, [r9, r3]
 80072ce:	5cf9      	ldrb	r1, [r7, r3]
 80072d0:	404a      	eors	r2, r1
 80072d2:	f80a 2003 	strb.w	r2, [sl, r3]
 80072d6:	3301      	adds	r3, #1
 80072d8:	e7f5      	b.n	80072c6 <stream_ref_xor_ic+0xfe>

080072da <stream_ref>:
 80072da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072de:	4614      	mov	r4, r2
 80072e0:	b09c      	sub	sp, #112	; 0x70
 80072e2:	461d      	mov	r5, r3
 80072e4:	ea54 0305 	orrs.w	r3, r4, r5
 80072e8:	4682      	mov	sl, r0
 80072ea:	9924      	ldr	r1, [sp, #144]	; 0x90
 80072ec:	9825      	ldr	r0, [sp, #148]	; 0x94
 80072ee:	d03a      	beq.n	8007366 <stream_ref+0x8c>
 80072f0:	2300      	movs	r3, #0
 80072f2:	af04      	add	r7, sp, #16
 80072f4:	5cc2      	ldrb	r2, [r0, r3]
 80072f6:	55da      	strb	r2, [r3, r7]
 80072f8:	3301      	adds	r3, #1
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d1fa      	bne.n	80072f4 <stream_ref+0x1a>
 80072fe:	2300      	movs	r3, #0
 8007300:	466e      	mov	r6, sp
 8007302:	5cca      	ldrb	r2, [r1, r3]
 8007304:	559a      	strb	r2, [r3, r6]
 8007306:	3301      	adds	r3, #1
 8007308:	2b08      	cmp	r3, #8
 800730a:	d1fa      	bne.n	8007302 <stream_ref+0x28>
 800730c:	2200      	movs	r2, #0
 800730e:	54f2      	strb	r2, [r6, r3]
 8007310:	3301      	adds	r3, #1
 8007312:	2b10      	cmp	r3, #16
 8007314:	d1fb      	bne.n	800730e <stream_ref+0x34>
 8007316:	46a0      	mov	r8, r4
 8007318:	46a9      	mov	r9, r5
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	eba4 0008 	sub.w	r0, r4, r8
 8007322:	bf08      	it	eq
 8007324:	f1b8 0f40 	cmpeq.w	r8, #64	; 0x40
 8007328:	4450      	add	r0, sl
 800732a:	d220      	bcs.n	800736e <stream_ref+0x94>
 800732c:	09a2      	lsrs	r2, r4, #6
 800732e:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8007332:	09a9      	lsrs	r1, r5, #6
 8007334:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8007338:	4250      	negs	r0, r2
 800733a:	fb03 0101 	mla	r1, r3, r1, r0
 800733e:	eb0a 1a82 	add.w	sl, sl, r2, lsl #6
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	440b      	add	r3, r1
 8007348:	18a4      	adds	r4, r4, r2
 800734a:	415d      	adcs	r5, r3
 800734c:	ea54 0305 	orrs.w	r3, r4, r5
 8007350:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007354:	d11f      	bne.n	8007396 <stream_ref+0xbc>
 8007356:	2140      	movs	r1, #64	; 0x40
 8007358:	4640      	mov	r0, r8
 800735a:	f7ff fd26 	bl	8006daa <sodium_memzero>
 800735e:	2120      	movs	r1, #32
 8007360:	4638      	mov	r0, r7
 8007362:	f7ff fd22 	bl	8006daa <sodium_memzero>
 8007366:	2000      	movs	r0, #0
 8007368:	b01c      	add	sp, #112	; 0x70
 800736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736e:	2300      	movs	r3, #0
 8007370:	463a      	mov	r2, r7
 8007372:	4631      	mov	r1, r6
 8007374:	f000 fa1c 	bl	80077b0 <crypto_core_salsa20>
 8007378:	2308      	movs	r3, #8
 800737a:	2201      	movs	r2, #1
 800737c:	5cf1      	ldrb	r1, [r6, r3]
 800737e:	440a      	add	r2, r1
 8007380:	54f2      	strb	r2, [r6, r3]
 8007382:	3301      	adds	r3, #1
 8007384:	2b10      	cmp	r3, #16
 8007386:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800738a:	d1f7      	bne.n	800737c <stream_ref+0xa2>
 800738c:	f1b8 0840 	subs.w	r8, r8, #64	; 0x40
 8007390:	f149 39ff 	adc.w	r9, r9, #4294967295	; 0xffffffff
 8007394:	e7c1      	b.n	800731a <stream_ref+0x40>
 8007396:	2300      	movs	r3, #0
 8007398:	463a      	mov	r2, r7
 800739a:	4631      	mov	r1, r6
 800739c:	4640      	mov	r0, r8
 800739e:	f000 fa07 	bl	80077b0 <crypto_core_salsa20>
 80073a2:	2300      	movs	r3, #0
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d2d6      	bcs.n	8007356 <stream_ref+0x7c>
 80073a8:	f818 2003 	ldrb.w	r2, [r8, r3]
 80073ac:	f80a 2003 	strb.w	r2, [sl, r3]
 80073b0:	3301      	adds	r3, #1
 80073b2:	e7f7      	b.n	80073a4 <stream_ref+0xca>

080073b4 <crypto_core_hsalsa20>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	b08b      	sub	sp, #44	; 0x2c
 80073ba:	9000      	str	r0, [sp, #0]
 80073bc:	b36b      	cbz	r3, 800741a <crypto_core_hsalsa20+0x66>
 80073be:	68dc      	ldr	r4, [r3, #12]
 80073c0:	689d      	ldr	r5, [r3, #8]
 80073c2:	685e      	ldr	r6, [r3, #4]
 80073c4:	681f      	ldr	r7, [r3, #0]
 80073c6:	6913      	ldr	r3, [r2, #16]
 80073c8:	6890      	ldr	r0, [r2, #8]
 80073ca:	9302      	str	r3, [sp, #8]
 80073cc:	9005      	str	r0, [sp, #20]
 80073ce:	684b      	ldr	r3, [r1, #4]
 80073d0:	6850      	ldr	r0, [r2, #4]
 80073d2:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 80073d6:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80073da:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80073de:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80073e2:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	9003      	str	r0, [sp, #12]
 80073ea:	680b      	ldr	r3, [r1, #0]
 80073ec:	68d1      	ldr	r1, [r2, #12]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	200b      	movs	r0, #11
 80073f2:	9008      	str	r0, [sp, #32]
 80073f4:	9808      	ldr	r0, [sp, #32]
 80073f6:	3801      	subs	r0, #1
 80073f8:	9008      	str	r0, [sp, #32]
 80073fa:	d113      	bne.n	8007424 <crypto_core_hsalsa20+0x70>
 80073fc:	9a00      	ldr	r2, [sp, #0]
 80073fe:	6113      	str	r3, [r2, #16]
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	6017      	str	r7, [r2, #0]
 8007404:	6056      	str	r6, [r2, #4]
 8007406:	6095      	str	r5, [r2, #8]
 8007408:	60d4      	str	r4, [r2, #12]
 800740a:	6153      	str	r3, [r2, #20]
 800740c:	f8c2 e018 	str.w	lr, [r2, #24]
 8007410:	f8c2 801c 	str.w	r8, [r2, #28]
 8007414:	b00b      	add	sp, #44	; 0x2c
 8007416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741a:	4c4c      	ldr	r4, [pc, #304]	; (800754c <crypto_core_hsalsa20+0x198>)
 800741c:	4d4c      	ldr	r5, [pc, #304]	; (8007550 <crypto_core_hsalsa20+0x19c>)
 800741e:	4e4d      	ldr	r6, [pc, #308]	; (8007554 <crypto_core_hsalsa20+0x1a0>)
 8007420:	4f4d      	ldr	r7, [pc, #308]	; (8007558 <crypto_core_hsalsa20+0x1a4>)
 8007422:	e7d0      	b.n	80073c6 <crypto_core_hsalsa20+0x12>
 8007424:	eb07 0b0c 	add.w	fp, r7, ip
 8007428:	ea81 6b7b 	eor.w	fp, r1, fp, ror #25
 800742c:	eb07 010b 	add.w	r1, r7, fp
 8007430:	ea8e 51f1 	eor.w	r1, lr, r1, ror #23
 8007434:	9106      	str	r1, [sp, #24]
 8007436:	4459      	add	r1, fp
 8007438:	ea8c 41f1 	eor.w	r1, ip, r1, ror #19
 800743c:	9109      	str	r1, [sp, #36]	; 0x24
 800743e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007440:	9906      	ldr	r1, [sp, #24]
 8007442:	4401      	add	r1, r0
 8007444:	ea87 37b1 	eor.w	r7, r7, r1, ror #14
 8007448:	1991      	adds	r1, r2, r6
 800744a:	ea88 6171 	eor.w	r1, r8, r1, ror #25
 800744e:	9104      	str	r1, [sp, #16]
 8007450:	1871      	adds	r1, r6, r1
 8007452:	ea89 51f1 	eor.w	r1, r9, r1, ror #23
 8007456:	9107      	str	r1, [sp, #28]
 8007458:	9807      	ldr	r0, [sp, #28]
 800745a:	9904      	ldr	r1, [sp, #16]
 800745c:	4401      	add	r1, r0
 800745e:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
 8007462:	4601      	mov	r1, r0
 8007464:	4411      	add	r1, r2
 8007466:	ea86 36b1 	eor.w	r6, r6, r1, ror #14
 800746a:	1959      	adds	r1, r3, r5
 800746c:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 8007470:	9903      	ldr	r1, [sp, #12]
 8007472:	9801      	ldr	r0, [sp, #4]
 8007474:	eb05 0e0a 	add.w	lr, r5, sl
 8007478:	ea81 5efe 	eor.w	lr, r1, lr, ror #23
 800747c:	eb0a 010e 	add.w	r1, sl, lr
 8007480:	ea83 43f1 	eor.w	r3, r3, r1, ror #19
 8007484:	eb0e 0103 	add.w	r1, lr, r3
 8007488:	ea85 35b1 	eor.w	r5, r5, r1, ror #14
 800748c:	9902      	ldr	r1, [sp, #8]
 800748e:	eb01 0804 	add.w	r8, r1, r4
 8007492:	9905      	ldr	r1, [sp, #20]
 8007494:	ea81 6878 	eor.w	r8, r1, r8, ror #25
 8007498:	eb04 0108 	add.w	r1, r4, r8
 800749c:	ea80 51f1 	eor.w	r1, r0, r1, ror #23
 80074a0:	9802      	ldr	r0, [sp, #8]
 80074a2:	eb08 0c01 	add.w	ip, r8, r1
 80074a6:	ea80 4cfc 	eor.w	ip, r0, ip, ror #19
 80074aa:	eb01 090c 	add.w	r9, r1, ip
 80074ae:	ea84 34b9 	eor.w	r4, r4, r9, ror #14
 80074b2:	eb07 0908 	add.w	r9, r7, r8
 80074b6:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 80074ba:	eb07 0902 	add.w	r9, r7, r2
 80074be:	ea8e 50f9 	eor.w	r0, lr, r9, ror #23
 80074c2:	eb02 0e00 	add.w	lr, r2, r0
 80074c6:	9003      	str	r0, [sp, #12]
 80074c8:	ea88 40fe 	eor.w	r0, r8, lr, ror #19
 80074cc:	9005      	str	r0, [sp, #20]
 80074ce:	9803      	ldr	r0, [sp, #12]
 80074d0:	4686      	mov	lr, r0
 80074d2:	9805      	ldr	r0, [sp, #20]
 80074d4:	4486      	add	lr, r0
 80074d6:	ea87 37be 	eor.w	r7, r7, lr, ror #14
 80074da:	eb0b 0e06 	add.w	lr, fp, r6
 80074de:	ea83 637e 	eor.w	r3, r3, lr, ror #25
 80074e2:	eb06 0e03 	add.w	lr, r6, r3
 80074e6:	ea81 51fe 	eor.w	r1, r1, lr, ror #23
 80074ea:	9101      	str	r1, [sp, #4]
 80074ec:	9801      	ldr	r0, [sp, #4]
 80074ee:	1859      	adds	r1, r3, r1
 80074f0:	ea8b 41f1 	eor.w	r1, fp, r1, ror #19
 80074f4:	eb00 0e01 	add.w	lr, r0, r1
 80074f8:	9804      	ldr	r0, [sp, #16]
 80074fa:	ea86 36be 	eor.w	r6, r6, lr, ror #14
 80074fe:	eb00 0e05 	add.w	lr, r0, r5
 8007502:	ea8c 607e 	eor.w	r0, ip, lr, ror #25
 8007506:	eb05 0e00 	add.w	lr, r5, r0
 800750a:	9002      	str	r0, [sp, #8]
 800750c:	9806      	ldr	r0, [sp, #24]
 800750e:	ea80 5efe 	eor.w	lr, r0, lr, ror #23
 8007512:	9802      	ldr	r0, [sp, #8]
 8007514:	eb00 080e 	add.w	r8, r0, lr
 8007518:	9804      	ldr	r0, [sp, #16]
 800751a:	ea80 48f8 	eor.w	r8, r0, r8, ror #19
 800751e:	eb0e 0c08 	add.w	ip, lr, r8
 8007522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007524:	ea85 35bc 	eor.w	r5, r5, ip, ror #14
 8007528:	eb0a 0c04 	add.w	ip, sl, r4
 800752c:	ea80 6c7c 	eor.w	ip, r0, ip, ror #25
 8007530:	9807      	ldr	r0, [sp, #28]
 8007532:	eb04 090c 	add.w	r9, r4, ip
 8007536:	ea80 59f9 	eor.w	r9, r0, r9, ror #23
 800753a:	eb0c 0b09 	add.w	fp, ip, r9
 800753e:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 8007542:	eb09 0b0a 	add.w	fp, r9, sl
 8007546:	ea84 34bb 	eor.w	r4, r4, fp, ror #14
 800754a:	e753      	b.n	80073f4 <crypto_core_hsalsa20+0x40>
 800754c:	6b206574 	.word	0x6b206574
 8007550:	79622d32 	.word	0x79622d32
 8007554:	3320646e 	.word	0x3320646e
 8007558:	61707865 	.word	0x61707865

0800755c <crypto_core_salsa>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	b09b      	sub	sp, #108	; 0x6c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d07a      	beq.n	800765c <crypto_core_salsa+0x100>
 8007566:	68dc      	ldr	r4, [r3, #12]
 8007568:	940a      	str	r4, [sp, #40]	; 0x28
 800756a:	689c      	ldr	r4, [r3, #8]
 800756c:	9409      	str	r4, [sp, #36]	; 0x24
 800756e:	685c      	ldr	r4, [r3, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	9408      	str	r4, [sp, #32]
 8007574:	9307      	str	r3, [sp, #28]
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	930e      	str	r3, [sp, #56]	; 0x38
 800757a:	6853      	ldr	r3, [r2, #4]
 800757c:	930f      	str	r3, [sp, #60]	; 0x3c
 800757e:	6893      	ldr	r3, [r2, #8]
 8007580:	9310      	str	r3, [sp, #64]	; 0x40
 8007582:	68d3      	ldr	r3, [r2, #12]
 8007584:	9311      	str	r3, [sp, #68]	; 0x44
 8007586:	6913      	ldr	r3, [r2, #16]
 8007588:	9312      	str	r3, [sp, #72]	; 0x48
 800758a:	6953      	ldr	r3, [r2, #20]
 800758c:	9313      	str	r3, [sp, #76]	; 0x4c
 800758e:	6993      	ldr	r3, [r2, #24]
 8007590:	9314      	str	r3, [sp, #80]	; 0x50
 8007592:	69d3      	ldr	r3, [r2, #28]
 8007594:	9315      	str	r3, [sp, #84]	; 0x54
 8007596:	680b      	ldr	r3, [r1, #0]
 8007598:	9316      	str	r3, [sp, #88]	; 0x58
 800759a:	684b      	ldr	r3, [r1, #4]
 800759c:	9317      	str	r3, [sp, #92]	; 0x5c
 800759e:	688b      	ldr	r3, [r1, #8]
 80075a0:	9318      	str	r3, [sp, #96]	; 0x60
 80075a2:	68cb      	ldr	r3, [r1, #12]
 80075a4:	9319      	str	r3, [sp, #100]	; 0x64
 80075a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075a8:	9303      	str	r3, [sp, #12]
 80075aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80075ae:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80075b2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80075b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80075b8:	9302      	str	r3, [sp, #8]
 80075ba:	ab17      	add	r3, sp, #92	; 0x5c
 80075bc:	e893 0a08 	ldmia.w	r3, {r3, r9, fp}
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 80075ce:	9f08      	ldr	r7, [sp, #32]
 80075d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80075d8:	2100      	movs	r1, #0
 80075da:	910b      	str	r1, [sp, #44]	; 0x2c
 80075dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075de:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80075e0:	42b1      	cmp	r1, r6
 80075e2:	db48      	blt.n	8007676 <crypto_core_salsa+0x11a>
 80075e4:	9907      	ldr	r1, [sp, #28]
 80075e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80075e8:	4461      	add	r1, ip
 80075ea:	6001      	str	r1, [r0, #0]
 80075ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075ee:	440b      	add	r3, r1
 80075f0:	6043      	str	r3, [r0, #4]
 80075f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075f4:	9b00      	ldr	r3, [sp, #0]
 80075f6:	440b      	add	r3, r1
 80075f8:	6083      	str	r3, [r0, #8]
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	4433      	add	r3, r6
 80075fe:	60c3      	str	r3, [r0, #12]
 8007600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007602:	441a      	add	r2, r3
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	6102      	str	r2, [r0, #16]
 8007608:	443b      	add	r3, r7
 800760a:	6143      	str	r3, [r0, #20]
 800760c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800760e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007610:	449a      	add	sl, r3
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	f8c0 a018 	str.w	sl, [r0, #24]
 8007618:	4413      	add	r3, r2
 800761a:	61c3      	str	r3, [r0, #28]
 800761c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800761e:	9a02      	ldr	r2, [sp, #8]
 8007620:	4499      	add	r9, r3
 8007622:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007624:	f8c0 9020 	str.w	r9, [r0, #32]
 8007628:	449b      	add	fp, r3
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 8007630:	4413      	add	r3, r2
 8007632:	6283      	str	r3, [r0, #40]	; 0x28
 8007634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007636:	9a03      	ldr	r2, [sp, #12]
 8007638:	4423      	add	r3, r4
 800763a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800763c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800763e:	449e      	add	lr, r3
 8007640:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007642:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
 8007646:	441a      	add	r2, r3
 8007648:	6342      	str	r2, [r0, #52]	; 0x34
 800764a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800764c:	4443      	add	r3, r8
 800764e:	6383      	str	r3, [r0, #56]	; 0x38
 8007650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007652:	442b      	add	r3, r5
 8007654:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007656:	b01b      	add	sp, #108	; 0x6c
 8007658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765c:	4b51      	ldr	r3, [pc, #324]	; (80077a4 <crypto_core_salsa+0x248>)
 800765e:	930a      	str	r3, [sp, #40]	; 0x28
 8007660:	f103 6364 	add.w	r3, r3, #239075328	; 0xe400000
 8007664:	f503 33e3 	add.w	r3, r3, #116224	; 0x1c600
 8007668:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800766c:	9309      	str	r3, [sp, #36]	; 0x24
 800766e:	4b4e      	ldr	r3, [pc, #312]	; (80077a8 <crypto_core_salsa+0x24c>)
 8007670:	9308      	str	r3, [sp, #32]
 8007672:	4b4e      	ldr	r3, [pc, #312]	; (80077ac <crypto_core_salsa+0x250>)
 8007674:	e77e      	b.n	8007574 <crypto_core_salsa+0x18>
 8007676:	eb0c 010e 	add.w	r1, ip, lr
 800767a:	ea82 6271 	eor.w	r2, r2, r1, ror #25
 800767e:	eb0c 0102 	add.w	r1, ip, r2
 8007682:	ea89 51f1 	eor.w	r1, r9, r1, ror #23
 8007686:	910c      	str	r1, [sp, #48]	; 0x30
 8007688:	1851      	adds	r1, r2, r1
 800768a:	ea8e 41f1 	eor.w	r1, lr, r1, ror #19
 800768e:	910d      	str	r1, [sp, #52]	; 0x34
 8007690:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007692:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007694:	4431      	add	r1, r6
 8007696:	ea8c 3cb1 	eor.w	ip, ip, r1, ror #14
 800769a:	19d9      	adds	r1, r3, r7
 800769c:	9e03      	ldr	r6, [sp, #12]
 800769e:	ea8b 6171 	eor.w	r1, fp, r1, ror #25
 80076a2:	9105      	str	r1, [sp, #20]
 80076a4:	1879      	adds	r1, r7, r1
 80076a6:	ea86 51f1 	eor.w	r1, r6, r1, ror #23
 80076aa:	9103      	str	r1, [sp, #12]
 80076ac:	9e03      	ldr	r6, [sp, #12]
 80076ae:	9905      	ldr	r1, [sp, #20]
 80076b0:	eb01 0b06 	add.w	fp, r1, r6
 80076b4:	ea83 4bfb 	eor.w	fp, r3, fp, ror #19
 80076b8:	4633      	mov	r3, r6
 80076ba:	445b      	add	r3, fp
 80076bc:	ea87 37b3 	eor.w	r7, r7, r3, ror #14
 80076c0:	9b02      	ldr	r3, [sp, #8]
 80076c2:	4453      	add	r3, sl
 80076c4:	ea88 6373 	eor.w	r3, r8, r3, ror #25
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	9906      	ldr	r1, [sp, #24]
 80076cc:	9b02      	ldr	r3, [sp, #8]
 80076ce:	eb03 0801 	add.w	r8, r3, r1
 80076d2:	9b00      	ldr	r3, [sp, #0]
 80076d4:	ea83 58f8 	eor.w	r8, r3, r8, ror #23
 80076d8:	460b      	mov	r3, r1
 80076da:	4443      	add	r3, r8
 80076dc:	ea8a 4af3 	eor.w	sl, sl, r3, ror #19
 80076e0:	9b02      	ldr	r3, [sp, #8]
 80076e2:	eb08 060a 	add.w	r6, r8, sl
 80076e6:	ea83 36b6 	eor.w	r6, r3, r6, ror #14
 80076ea:	9b04      	ldr	r3, [sp, #16]
 80076ec:	1961      	adds	r1, r4, r5
 80076ee:	ea83 6171 	eor.w	r1, r3, r1, ror #25
 80076f2:	9b01      	ldr	r3, [sp, #4]
 80076f4:	eb05 0e01 	add.w	lr, r5, r1
 80076f8:	ea83 5efe 	eor.w	lr, r3, lr, ror #23
 80076fc:	eb01 090e 	add.w	r9, r1, lr
 8007700:	eb0c 0301 	add.w	r3, ip, r1
 8007704:	ea84 49f9 	eor.w	r9, r4, r9, ror #19
 8007708:	ea8b 6373 	eor.w	r3, fp, r3, ror #25
 800770c:	eb0e 0409 	add.w	r4, lr, r9
 8007710:	eb0c 0b03 	add.w	fp, ip, r3
 8007714:	ea85 35b4 	eor.w	r5, r5, r4, ror #14
 8007718:	ea88 54fb 	eor.w	r4, r8, fp, ror #23
 800771c:	eb03 0804 	add.w	r8, r3, r4
 8007720:	ea81 41f8 	eor.w	r1, r1, r8, ror #19
 8007724:	9104      	str	r1, [sp, #16]
 8007726:	9400      	str	r4, [sp, #0]
 8007728:	4621      	mov	r1, r4
 800772a:	9c04      	ldr	r4, [sp, #16]
 800772c:	4421      	add	r1, r4
 800772e:	ea8c 3cb1 	eor.w	ip, ip, r1, ror #14
 8007732:	19d1      	adds	r1, r2, r7
 8007734:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 8007738:	eb07 010a 	add.w	r1, r7, sl
 800773c:	ea8e 51f1 	eor.w	r1, lr, r1, ror #23
 8007740:	9101      	str	r1, [sp, #4]
 8007742:	4451      	add	r1, sl
 8007744:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
 8007748:	9901      	ldr	r1, [sp, #4]
 800774a:	4411      	add	r1, r2
 800774c:	ea87 37b1 	eor.w	r7, r7, r1, ror #14
 8007750:	9905      	ldr	r1, [sp, #20]
 8007752:	4431      	add	r1, r6
 8007754:	ea89 6471 	eor.w	r4, r9, r1, ror #25
 8007758:	990c      	ldr	r1, [sp, #48]	; 0x30
 800775a:	eb06 0904 	add.w	r9, r6, r4
 800775e:	ea81 59f9 	eor.w	r9, r1, r9, ror #23
 8007762:	9905      	ldr	r1, [sp, #20]
 8007764:	eb04 0b09 	add.w	fp, r4, r9
 8007768:	ea81 4bfb 	eor.w	fp, r1, fp, ror #19
 800776c:	eb09 010b 	add.w	r1, r9, fp
 8007770:	ea86 31b1 	eor.w	r1, r6, r1, ror #14
 8007774:	9102      	str	r1, [sp, #8]
 8007776:	9906      	ldr	r1, [sp, #24]
 8007778:	eb01 0e05 	add.w	lr, r1, r5
 800777c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800777e:	ea81 6e7e 	eor.w	lr, r1, lr, ror #25
 8007782:	9903      	ldr	r1, [sp, #12]
 8007784:	eb05 060e 	add.w	r6, r5, lr
 8007788:	ea81 51f6 	eor.w	r1, r1, r6, ror #23
 800778c:	9e06      	ldr	r6, [sp, #24]
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	4471      	add	r1, lr
 8007792:	ea86 48f1 	eor.w	r8, r6, r1, ror #19
 8007796:	9903      	ldr	r1, [sp, #12]
 8007798:	4441      	add	r1, r8
 800779a:	ea85 35b1 	eor.w	r5, r5, r1, ror #14
 800779e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077a0:	3102      	adds	r1, #2
 80077a2:	e71a      	b.n	80075da <crypto_core_salsa+0x7e>
 80077a4:	6b206574 	.word	0x6b206574
 80077a8:	3320646e 	.word	0x3320646e
 80077ac:	61707865 	.word	0x61707865

080077b0 <crypto_core_salsa20>:
 80077b0:	b513      	push	{r0, r1, r4, lr}
 80077b2:	2414      	movs	r4, #20
 80077b4:	9400      	str	r4, [sp, #0]
 80077b6:	f7ff fed1 	bl	800755c <crypto_core_salsa>
 80077ba:	2000      	movs	r0, #0
 80077bc:	b002      	add	sp, #8
 80077be:	bd10      	pop	{r4, pc}

080077c0 <crypto_core_salsa20_outputbytes>:
 80077c0:	2040      	movs	r0, #64	; 0x40
 80077c2:	4770      	bx	lr

080077c4 <crypto_core_salsa20_inputbytes>:
 80077c4:	2010      	movs	r0, #16
 80077c6:	4770      	bx	lr

080077c8 <crypto_core_salsa20_keybytes>:
 80077c8:	2020      	movs	r0, #32
 80077ca:	4770      	bx	lr

080077cc <crypto_core_salsa20_constbytes>:
 80077cc:	2010      	movs	r0, #16
 80077ce:	4770      	bx	lr

080077d0 <crypto_core_salsa2012>:
 80077d0:	b513      	push	{r0, r1, r4, lr}
 80077d2:	240c      	movs	r4, #12
 80077d4:	9400      	str	r4, [sp, #0]
 80077d6:	f7ff fec1 	bl	800755c <crypto_core_salsa>
 80077da:	2000      	movs	r0, #0
 80077dc:	b002      	add	sp, #8
 80077de:	bd10      	pop	{r4, pc}

080077e0 <crypto_core_salsa2012_outputbytes>:
 80077e0:	2040      	movs	r0, #64	; 0x40
 80077e2:	4770      	bx	lr

080077e4 <crypto_core_salsa2012_inputbytes>:
 80077e4:	2010      	movs	r0, #16
 80077e6:	4770      	bx	lr

080077e8 <crypto_core_salsa2012_keybytes>:
 80077e8:	2020      	movs	r0, #32
 80077ea:	4770      	bx	lr

080077ec <crypto_core_salsa2012_constbytes>:
 80077ec:	2010      	movs	r0, #16
 80077ee:	4770      	bx	lr

080077f0 <crypto_core_salsa208>:
 80077f0:	b513      	push	{r0, r1, r4, lr}
 80077f2:	2408      	movs	r4, #8
 80077f4:	9400      	str	r4, [sp, #0]
 80077f6:	f7ff feb1 	bl	800755c <crypto_core_salsa>
 80077fa:	2000      	movs	r0, #0
 80077fc:	b002      	add	sp, #8
 80077fe:	bd10      	pop	{r4, pc}

08007800 <crypto_core_salsa208_outputbytes>:
 8007800:	2040      	movs	r0, #64	; 0x40
 8007802:	4770      	bx	lr

08007804 <crypto_core_salsa208_inputbytes>:
 8007804:	2010      	movs	r0, #16
 8007806:	4770      	bx	lr

08007808 <crypto_core_salsa208_keybytes>:
 8007808:	2020      	movs	r0, #32
 800780a:	4770      	bx	lr

0800780c <crypto_core_salsa208_constbytes>:
 800780c:	2010      	movs	r0, #16
 800780e:	4770      	bx	lr

08007810 <crypto_onetimeauth_poly1305>:
 8007810:	b410      	push	{r4}
 8007812:	4c04      	ldr	r4, [pc, #16]	; (8007824 <crypto_onetimeauth_poly1305+0x14>)
 8007814:	447c      	add	r4, pc
 8007816:	6824      	ldr	r4, [r4, #0]
 8007818:	6824      	ldr	r4, [r4, #0]
 800781a:	46a4      	mov	ip, r4
 800781c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007820:	4760      	bx	ip
 8007822:	bf00      	nop
 8007824:	17ff8890 	.word	0x17ff8890

08007828 <crypto_onetimeauth_poly1305_verify>:
 8007828:	b410      	push	{r4}
 800782a:	4c04      	ldr	r4, [pc, #16]	; (800783c <crypto_onetimeauth_poly1305_verify+0x14>)
 800782c:	447c      	add	r4, pc
 800782e:	6824      	ldr	r4, [r4, #0]
 8007830:	6864      	ldr	r4, [r4, #4]
 8007832:	46a4      	mov	ip, r4
 8007834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007838:	4760      	bx	ip
 800783a:	bf00      	nop
 800783c:	17ff8878 	.word	0x17ff8878

08007840 <crypto_onetimeauth_poly1305_init>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <crypto_onetimeauth_poly1305_init+0xc>)
 8007842:	447b      	add	r3, pc
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4718      	bx	r3
 800784a:	bf00      	nop
 800784c:	17ff8862 	.word	0x17ff8862

08007850 <crypto_onetimeauth_poly1305_update>:
 8007850:	b410      	push	{r4}
 8007852:	4c04      	ldr	r4, [pc, #16]	; (8007864 <crypto_onetimeauth_poly1305_update+0x14>)
 8007854:	447c      	add	r4, pc
 8007856:	6824      	ldr	r4, [r4, #0]
 8007858:	68e4      	ldr	r4, [r4, #12]
 800785a:	46a4      	mov	ip, r4
 800785c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007860:	4760      	bx	ip
 8007862:	bf00      	nop
 8007864:	17ff8850 	.word	0x17ff8850

08007868 <crypto_onetimeauth_poly1305_final>:
 8007868:	4b02      	ldr	r3, [pc, #8]	; (8007874 <crypto_onetimeauth_poly1305_final+0xc>)
 800786a:	447b      	add	r3, pc
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	4718      	bx	r3
 8007872:	bf00      	nop
 8007874:	17ff883a 	.word	0x17ff883a

08007878 <crypto_onetimeauth_poly1305_bytes>:
 8007878:	2010      	movs	r0, #16
 800787a:	4770      	bx	lr

0800787c <crypto_onetimeauth_poly1305_keybytes>:
 800787c:	2020      	movs	r0, #32
 800787e:	4770      	bx	lr

08007880 <crypto_onetimeauth_poly1305_statebytes>:
 8007880:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007884:	4770      	bx	lr

08007886 <crypto_onetimeauth_poly1305_keygen>:
 8007886:	2120      	movs	r1, #32
 8007888:	f7ff b9a4 	b.w	8006bd4 <randombytes_buf>

0800788c <_crypto_onetimeauth_poly1305_pick_best_implementation>:
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x14>)
 800788e:	4a05      	ldr	r2, [pc, #20]	; (80078a4 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x18>)
 8007890:	447b      	add	r3, pc
 8007892:	2000      	movs	r0, #0
 8007894:	589a      	ldr	r2, [r3, r2]
 8007896:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x1c>)
 8007898:	447b      	add	r3, pc
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	17ff91e8 	.word	0x17ff91e8
 80078a4:	00000004 	.word	0x00000004
 80078a8:	17ff880c 	.word	0x17ff880c

080078ac <poly1305_blocks>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	b093      	sub	sp, #76	; 0x4c
 80078b2:	e890 4400 	ldmia.w	r0, {sl, lr}
 80078b6:	9208      	str	r2, [sp, #32]
 80078b8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80078bc:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80078c0:	9111      	str	r1, [sp, #68]	; 0x44
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	bf14      	ite	ne
 80078c6:	2200      	movne	r2, #0
 80078c8:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 80078cc:	9209      	str	r2, [sp, #36]	; 0x24
 80078ce:	68c2      	ldr	r2, [r0, #12]
 80078d0:	9204      	str	r2, [sp, #16]
 80078d2:	6902      	ldr	r2, [r0, #16]
 80078d4:	9206      	str	r2, [sp, #24]
 80078d6:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 80078da:	9210      	str	r2, [sp, #64]	; 0x40
 80078dc:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 80078e0:	9207      	str	r2, [sp, #28]
 80078e2:	9a04      	ldr	r2, [sp, #16]
 80078e4:	9c08      	ldr	r4, [sp, #32]
 80078e6:	6945      	ldr	r5, [r0, #20]
 80078e8:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80078ec:	9400      	str	r4, [sp, #0]
 80078ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80078f2:	9205      	str	r2, [sp, #20]
 80078f4:	9a06      	ldr	r2, [sp, #24]
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	f100 011c 	add.w	r1, r0, #28
 80078fc:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
 8007900:	c946      	ldmia	r1, {r1, r2, r6}
 8007902:	9b08      	ldr	r3, [sp, #32]
 8007904:	9c00      	ldr	r4, [sp, #0]
 8007906:	1b1f      	subs	r7, r3, r4
 8007908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800790a:	441f      	add	r7, r3
 800790c:	e9dd 3400 	ldrd	r3, r4, [sp]
 8007910:	2c00      	cmp	r4, #0
 8007912:	bf08      	it	eq
 8007914:	2b10      	cmpeq	r3, #16
 8007916:	d208      	bcs.n	800792a <poly1305_blocks+0x7e>
 8007918:	6145      	str	r5, [r0, #20]
 800791a:	f8c0 8018 	str.w	r8, [r0, #24]
 800791e:	61c1      	str	r1, [r0, #28]
 8007920:	6202      	str	r2, [r0, #32]
 8007922:	6246      	str	r6, [r0, #36]	; 0x24
 8007924:	b013      	add	sp, #76	; 0x4c
 8007926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792a:	f8d7 4006 	ldr.w	r4, [r7, #6]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	f3c4 1419 	ubfx	r4, r4, #4, #26
 8007934:	440c      	add	r4, r1
 8007936:	f8d7 1009 	ldr.w	r1, [r7, #9]
 800793a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800793e:	441d      	add	r5, r3
 8007940:	eb02 1291 	add.w	r2, r2, r1, lsr #6
 8007944:	f8d7 3003 	ldr.w	r3, [r7, #3]
 8007948:	68f9      	ldr	r1, [r7, #12]
 800794a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800794c:	ea47 2111 	orr.w	r1, r7, r1, lsr #8
 8007950:	4431      	add	r1, r6
 8007952:	9e07      	ldr	r6, [sp, #28]
 8007954:	f3c3 0399 	ubfx	r3, r3, #2, #26
 8007958:	fba2 6706 	umull	r6, r7, r2, r6
 800795c:	4443      	add	r3, r8
 800795e:	fbea 6705 	umlal	r6, r7, sl, r5
 8007962:	9302      	str	r3, [sp, #8]
 8007964:	fbeb 6703 	umlal	r6, r7, fp, r3
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	fbe3 6704 	umlal	r6, r7, r3, r4
 800796e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007970:	fbe3 6701 	umlal	r6, r7, r3, r1
 8007974:	9b05      	ldr	r3, [sp, #20]
 8007976:	46b0      	mov	r8, r6
 8007978:	46b9      	mov	r9, r7
 800797a:	fba2 6703 	umull	r6, r7, r2, r3
 800797e:	9b02      	ldr	r3, [sp, #8]
 8007980:	fbee 6705 	umlal	r6, r7, lr, r5
 8007984:	fbe3 670a 	umlal	r6, r7, r3, sl
 8007988:	9b07      	ldr	r3, [sp, #28]
 800798a:	fbe4 670b 	umlal	r6, r7, r4, fp
 800798e:	fbe1 6703 	umlal	r6, r7, r1, r3
 8007992:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8007996:	9b02      	ldr	r3, [sp, #8]
 8007998:	fbab 6702 	umull	r6, r7, fp, r2
 800799c:	fbec 6705 	umlal	r6, r7, ip, r5
 80079a0:	fbee 6703 	umlal	r6, r7, lr, r3
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	fbe4 670a 	umlal	r6, r7, r4, sl
 80079aa:	fbe1 6703 	umlal	r6, r7, r1, r3
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 80079b4:	fbaa 6702 	umull	r6, r7, sl, r2
 80079b8:	fbe3 6705 	umlal	r6, r7, r3, r5
 80079bc:	9b02      	ldr	r3, [sp, #8]
 80079be:	fbec 6703 	umlal	r6, r7, ip, r3
 80079c2:	fbee 6704 	umlal	r6, r7, lr, r4
 80079c6:	fbe1 670b 	umlal	r6, r7, r1, fp
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80079d0:	fba2 670e 	umull	r6, r7, r2, lr
 80079d4:	fbe3 6705 	umlal	r6, r7, r3, r5
 80079d8:	9a02      	ldr	r2, [sp, #8]
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	fbe3 6702 	umlal	r6, r7, r3, r2
 80079e0:	fbec 6704 	umlal	r6, r7, ip, r4
 80079e4:	fbe1 670a 	umlal	r6, r7, r1, sl
 80079e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079ec:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80079f0:	ea4f 6398 	mov.w	r3, r8, lsr #26
 80079f4:	ea43 1389 	orr.w	r3, r3, r9, lsl #6
 80079f8:	18f6      	adds	r6, r6, r3
 80079fa:	f147 0700 	adc.w	r7, r7, #0
 80079fe:	0eb3      	lsrs	r3, r6, #26
 8007a00:	f026 447c 	bic.w	r4, r6, #4227858432	; 0xfc000000
 8007a04:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8007a08:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8007a0c:	18f6      	adds	r6, r6, r3
 8007a0e:	f147 0700 	adc.w	r7, r7, #0
 8007a12:	0eb3      	lsrs	r3, r6, #26
 8007a14:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8007a18:	f026 417c 	bic.w	r1, r6, #4227858432	; 0xfc000000
 8007a1c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8007a20:	f028 457c 	bic.w	r5, r8, #4227858432	; 0xfc000000
 8007a24:	18f6      	adds	r6, r6, r3
 8007a26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a2a:	f147 0700 	adc.w	r7, r7, #0
 8007a2e:	0eb3      	lsrs	r3, r6, #26
 8007a30:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8007a34:	eb18 0803 	adds.w	r8, r8, r3
 8007a38:	f149 0900 	adc.w	r9, r9, #0
 8007a3c:	ea4f 6398 	mov.w	r3, r8, lsr #26
 8007a40:	ea43 1389 	orr.w	r3, r3, r9, lsl #6
 8007a44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007a48:	442b      	add	r3, r5
 8007a4a:	f026 427c 	bic.w	r2, r6, #4227858432	; 0xfc000000
 8007a4e:	f023 457c 	bic.w	r5, r3, #4227858432	; 0xfc000000
 8007a52:	f028 467c 	bic.w	r6, r8, #4227858432	; 0xfc000000
 8007a56:	eb04 6893 	add.w	r8, r4, r3, lsr #26
 8007a5a:	e9dd 3400 	ldrd	r3, r4, [sp]
 8007a5e:	3b10      	subs	r3, #16
 8007a60:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
 8007a64:	e9cd 3400 	strd	r3, r4, [sp]
 8007a68:	e74b      	b.n	8007902 <poly1305_blocks+0x56>

08007a6a <poly1305_update>:
 8007a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a6e:	e9d0 890e 	ldrd	r8, r9, [r0, #56]	; 0x38
 8007a72:	461d      	mov	r5, r3
 8007a74:	ea58 0309 	orrs.w	r3, r8, r9
 8007a78:	4607      	mov	r7, r0
 8007a7a:	460e      	mov	r6, r1
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	d034      	beq.n	8007aea <poly1305_update+0x80>
 8007a80:	2010      	movs	r0, #16
 8007a82:	ebb0 0008 	subs.w	r0, r0, r8
 8007a86:	f04f 0100 	mov.w	r1, #0
 8007a8a:	eb61 0109 	sbc.w	r1, r1, r9
 8007a8e:	42a9      	cmp	r1, r5
 8007a90:	bf08      	it	eq
 8007a92:	4290      	cmpeq	r0, r2
 8007a94:	bf38      	it	cc
 8007a96:	4602      	movcc	r2, r0
 8007a98:	462b      	mov	r3, r5
 8007a9a:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8007a9e:	bf38      	it	cc
 8007aa0:	460b      	movcc	r3, r1
 8007aa2:	f108 013f 	add.w	r1, r8, #63	; 0x3f
 8007aa6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8007aaa:	4439      	add	r1, r7
 8007aac:	4696      	mov	lr, r2
 8007aae:	4430      	add	r0, r6
 8007ab0:	4584      	cmp	ip, r0
 8007ab2:	d143      	bne.n	8007b3c <poly1305_update+0xd2>
 8007ab4:	eb18 0802 	adds.w	r8, r8, r2
 8007ab8:	eb49 0903 	adc.w	r9, r9, r3
 8007abc:	f1b9 0f00 	cmp.w	r9, #0
 8007ac0:	bf08      	it	eq
 8007ac2:	f1b8 0f10 	cmpeq.w	r8, #16
 8007ac6:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8007aca:	d335      	bcc.n	8007b38 <poly1305_update+0xce>
 8007acc:	1aa4      	subs	r4, r4, r2
 8007ace:	eb65 0503 	sbc.w	r5, r5, r3
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007ada:	4638      	mov	r0, r7
 8007adc:	4476      	add	r6, lr
 8007ade:	f7ff fee5 	bl	80078ac <poly1305_blocks>
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007aea:	2d00      	cmp	r5, #0
 8007aec:	bf08      	it	eq
 8007aee:	2c10      	cmpeq	r4, #16
 8007af0:	d30c      	bcc.n	8007b0c <poly1305_update+0xa2>
 8007af2:	f024 080f 	bic.w	r8, r4, #15
 8007af6:	462b      	mov	r3, r5
 8007af8:	4631      	mov	r1, r6
 8007afa:	4642      	mov	r2, r8
 8007afc:	4638      	mov	r0, r7
 8007afe:	f7ff fed5 	bl	80078ac <poly1305_blocks>
 8007b02:	ebb4 0408 	subs.w	r4, r4, r8
 8007b06:	4446      	add	r6, r8
 8007b08:	eb65 0505 	sbc.w	r5, r5, r5
 8007b0c:	ea54 0305 	orrs.w	r3, r4, r5
 8007b10:	d012      	beq.n	8007b38 <poly1305_update+0xce>
 8007b12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007b16:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8007b1a:	f100 033f 	add.w	r3, r0, #63	; 0x3f
 8007b1e:	1e72      	subs	r2, r6, #1
 8007b20:	443b      	add	r3, r7
 8007b22:	4476      	add	r6, lr
 8007b24:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8007b28:	f803 ef01 	strb.w	lr, [r3, #1]!
 8007b2c:	42b2      	cmp	r2, r6
 8007b2e:	d1f9      	bne.n	8007b24 <poly1305_update+0xba>
 8007b30:	1824      	adds	r4, r4, r0
 8007b32:	414d      	adcs	r5, r1
 8007b34:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8007b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3c:	f81c af01 	ldrb.w	sl, [ip, #1]!
 8007b40:	f801 af01 	strb.w	sl, [r1, #1]!
 8007b44:	e7b4      	b.n	8007ab0 <poly1305_update+0x46>

08007b46 <crypto_onetimeauth_poly1305_donna_update>:
 8007b46:	b508      	push	{r3, lr}
 8007b48:	f7ff ff8f 	bl	8007a6a <poly1305_update>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	bd08      	pop	{r3, pc}

08007b50 <poly1305_finish>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
 8007b58:	460d      	mov	r5, r1
 8007b5a:	ea52 0103 	orrs.w	r1, r2, r3
 8007b5e:	b085      	sub	sp, #20
 8007b60:	4604      	mov	r4, r0
 8007b62:	d019      	beq.n	8007b98 <poly1305_finish+0x48>
 8007b64:	1881      	adds	r1, r0, r2
 8007b66:	2001      	movs	r0, #1
 8007b68:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 8007b6c:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8007b70:	4421      	add	r1, r4
 8007b72:	2000      	movs	r0, #0
 8007b74:	3201      	adds	r2, #1
 8007b76:	f143 0300 	adc.w	r3, r3, #0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bf08      	it	eq
 8007b7e:	2a10      	cmpeq	r2, #16
 8007b80:	f0c0 809b 	bcc.w	8007cba <poly1305_finish+0x16a>
 8007b84:	2301      	movs	r3, #1
 8007b86:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8007b8a:	2210      	movs	r2, #16
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8007b92:	4620      	mov	r0, r4
 8007b94:	f7ff fe8a 	bl	80078ac <poly1305_blocks>
 8007b98:	f104 0018 	add.w	r0, r4, #24
 8007b9c:	c80d      	ldmia	r0, {r0, r2, r3}
 8007b9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ba0:	6966      	ldr	r6, [r4, #20]
 8007ba2:	eb02 6290 	add.w	r2, r2, r0, lsr #26
 8007ba6:	eb03 6392 	add.w	r3, r3, r2, lsr #26
 8007baa:	eb01 6193 	add.w	r1, r1, r3, lsr #26
 8007bae:	f021 477c 	bic.w	r7, r1, #4227858432	; 0xfc000000
 8007bb2:	0e89      	lsrs	r1, r1, #26
 8007bb4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007bb8:	4431      	add	r1, r6
 8007bba:	f020 487c 	bic.w	r8, r0, #4227858432	; 0xfc000000
 8007bbe:	f021 4b7c 	bic.w	fp, r1, #4227858432	; 0xfc000000
 8007bc2:	f023 407c 	bic.w	r0, r3, #4227858432	; 0xfc000000
 8007bc6:	eb08 6191 	add.w	r1, r8, r1, lsr #26
 8007bca:	f10b 0305 	add.w	r3, fp, #5
 8007bce:	f022 497c 	bic.w	r9, r2, #4227858432	; 0xfc000000
 8007bd2:	f023 4a7c 	bic.w	sl, r3, #4227858432	; 0xfc000000
 8007bd6:	eb01 6393 	add.w	r3, r1, r3, lsr #26
 8007bda:	f023 487c 	bic.w	r8, r3, #4227858432	; 0xfc000000
 8007bde:	eb09 6393 	add.w	r3, r9, r3, lsr #26
 8007be2:	f107 427c 	add.w	r2, r7, #4227858432	; 0xfc000000
 8007be6:	f023 4e7c 	bic.w	lr, r3, #4227858432	; 0xfc000000
 8007bea:	eb00 6393 	add.w	r3, r0, r3, lsr #26
 8007bee:	f023 4c7c 	bic.w	ip, r3, #4227858432	; 0xfc000000
 8007bf2:	eb02 6393 	add.w	r3, r2, r3, lsr #26
 8007bf6:	0fde      	lsrs	r6, r3, #31
 8007bf8:	1e72      	subs	r2, r6, #1
 8007bfa:	4276      	negs	r6, r6
 8007bfc:	ea06 0b0b 	and.w	fp, r6, fp
 8007c00:	4031      	ands	r1, r6
 8007c02:	4030      	ands	r0, r6
 8007c04:	ea0a 0a02 	and.w	sl, sl, r2
 8007c08:	ea08 0802 	and.w	r8, r8, r2
 8007c0c:	ea0c 0c02 	and.w	ip, ip, r2
 8007c10:	ea4a 0a0b 	orr.w	sl, sl, fp
 8007c14:	ea48 0801 	orr.w	r8, r8, r1
 8007c18:	ea06 0909 	and.w	r9, r6, r9
 8007c1c:	ea4c 0c00 	orr.w	ip, ip, r0
 8007c20:	ea0e 0e02 	and.w	lr, lr, r2
 8007c24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007c26:	ea06 0107 	and.w	r1, r6, r7
 8007c2a:	ea4e 0e09 	orr.w	lr, lr, r9
 8007c2e:	ea4a 6688 	orr.w	r6, sl, r8, lsl #26
 8007c32:	eb10 0a06 	adds.w	sl, r0, r6
 8007c36:	ea4f 560e 	mov.w	r6, lr, lsl #20
 8007c3a:	ea46 1898 	orr.w	r8, r6, r8, lsr #6
 8007c3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c40:	9103      	str	r1, [sp, #12]
 8007c42:	f04f 0100 	mov.w	r1, #0
 8007c46:	f141 0b00 	adc.w	fp, r1, #0
 8007c4a:	2700      	movs	r7, #0
 8007c4c:	eb16 0608 	adds.w	r6, r6, r8
 8007c50:	f04f 0100 	mov.w	r1, #0
 8007c54:	f147 0700 	adc.w	r7, r7, #0
 8007c58:	eb16 080b 	adds.w	r8, r6, fp
 8007c5c:	eb47 0901 	adc.w	r9, r7, r1
 8007c60:	4013      	ands	r3, r2
 8007c62:	9a03      	ldr	r2, [sp, #12]
 8007c64:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8007c66:	e9cd 8900 	strd	r8, r9, [sp]
 8007c6a:	ea4f 308c 	mov.w	r0, ip, lsl #14
 8007c6e:	ea40 3e1e 	orr.w	lr, r0, lr, lsr #12
 8007c72:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c76:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007c78:	f8c5 a000 	str.w	sl, [r5]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	eb16 060e 	adds.w	r6, r6, lr
 8007c82:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8007c86:	f04f 0700 	mov.w	r7, #0
 8007c8a:	f147 0700 	adc.w	r7, r7, #0
 8007c8e:	ea43 4c9c 	orr.w	ip, r3, ip, lsr #18
 8007c92:	eb18 0806 	adds.w	r8, r8, r6
 8007c96:	eb41 0907 	adc.w	r9, r1, r7
 8007c9a:	9b00      	ldr	r3, [sp, #0]
 8007c9c:	606b      	str	r3, [r5, #4]
 8007c9e:	eb10 000c 	adds.w	r0, r0, ip
 8007ca2:	eb19 0600 	adds.w	r6, r9, r0
 8007ca6:	2158      	movs	r1, #88	; 0x58
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f8c5 8008 	str.w	r8, [r5, #8]
 8007cae:	60ee      	str	r6, [r5, #12]
 8007cb0:	b005      	add	sp, #20
 8007cb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	f7ff b878 	b.w	8006daa <sodium_memzero>
 8007cba:	f801 0f01 	strb.w	r0, [r1, #1]!
 8007cbe:	e759      	b.n	8007b74 <poly1305_finish+0x24>

08007cc0 <crypto_onetimeauth_poly1305_donna_final>:
 8007cc0:	b508      	push	{r3, lr}
 8007cc2:	f7ff ff45 	bl	8007b50 <poly1305_finish>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	bd08      	pop	{r3, pc}
	...

08007ccc <crypto_onetimeauth_poly1305_donna>:
 8007ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	6a38      	ldr	r0, [r7, #32]
 8007cd6:	b0a6      	sub	sp, #152	; 0x98
 8007cd8:	6805      	ldr	r5, [r0, #0]
 8007cda:	f8d0 e003 	ldr.w	lr, [r0, #3]
 8007cde:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8007ce2:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8007ce6:	f025 457c 	bic.w	r5, r5, #4227858432	; 0xfc000000
 8007cea:	6025      	str	r5, [r4, #0]
 8007cec:	4d1d      	ldr	r5, [pc, #116]	; (8007d64 <crypto_onetimeauth_poly1305_donna+0x98>)
 8007cee:	ea05 059e 	and.w	r5, r5, lr, lsr #2
 8007cf2:	6065      	str	r5, [r4, #4]
 8007cf4:	f8d0 e006 	ldr.w	lr, [r0, #6]
 8007cf8:	4d1b      	ldr	r5, [pc, #108]	; (8007d68 <crypto_onetimeauth_poly1305_donna+0x9c>)
 8007cfa:	ea05 151e 	and.w	r5, r5, lr, lsr #4
 8007cfe:	60a5      	str	r5, [r4, #8]
 8007d00:	f8d0 e009 	ldr.w	lr, [r0, #9]
 8007d04:	4d19      	ldr	r5, [pc, #100]	; (8007d6c <crypto_onetimeauth_poly1305_donna+0xa0>)
 8007d06:	ea05 159e 	and.w	r5, r5, lr, lsr #6
 8007d0a:	60e5      	str	r5, [r4, #12]
 8007d0c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8007d10:	68c5      	ldr	r5, [r0, #12]
 8007d12:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 8007d16:	f8d0 e014 	ldr.w	lr, [r0, #20]
 8007d1a:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 8007d1e:	f3c5 2513 	ubfx	r5, r5, #8, #20
 8007d22:	f8d0 e018 	ldr.w	lr, [r0, #24]
 8007d26:	69c0      	ldr	r0, [r0, #28]
 8007d28:	6125      	str	r5, [r4, #16]
 8007d2a:	6360      	str	r0, [r4, #52]	; 0x34
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f04f 0800 	mov.w	r8, #0
 8007d34:	f04f 0900 	mov.w	r9, #0
 8007d38:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8007d3c:	6165      	str	r5, [r4, #20]
 8007d3e:	61a5      	str	r5, [r4, #24]
 8007d40:	61e5      	str	r5, [r4, #28]
 8007d42:	6225      	str	r5, [r4, #32]
 8007d44:	6265      	str	r5, [r4, #36]	; 0x24
 8007d46:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
 8007d4a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8007d4e:	f7ff fe8c 	bl	8007a6a <poly1305_update>
 8007d52:	4620      	mov	r0, r4
 8007d54:	4631      	mov	r1, r6
 8007d56:	f7ff fefb 	bl	8007b50 <poly1305_finish>
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d62:	bf00      	nop
 8007d64:	03ffff03 	.word	0x03ffff03
 8007d68:	03ffc0ff 	.word	0x03ffc0ff
 8007d6c:	03f03fff 	.word	0x03f03fff

08007d70 <crypto_onetimeauth_poly1305_donna_verify>:
 8007d70:	b530      	push	{r4, r5, lr}
 8007d72:	b087      	sub	sp, #28
 8007d74:	4605      	mov	r5, r0
 8007d76:	ac02      	add	r4, sp, #8
 8007d78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d7a:	9000      	str	r0, [sp, #0]
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f7ff ffa5 	bl	8007ccc <crypto_onetimeauth_poly1305_donna>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 fb7f 	bl	8008488 <crypto_verify_16>
 8007d8a:	b007      	add	sp, #28
 8007d8c:	bd30      	pop	{r4, r5, pc}
	...

08007d90 <crypto_onetimeauth_poly1305_donna_init>:
 8007d90:	680a      	ldr	r2, [r1, #0]
 8007d92:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8007d96:	b530      	push	{r4, r5, lr}
 8007d98:	6002      	str	r2, [r0, #0]
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <crypto_onetimeauth_poly1305_donna_init+0x64>)
 8007d9e:	f8d1 0003 	ldr.w	r0, [r1, #3]
 8007da2:	ea02 0290 	and.w	r2, r2, r0, lsr #2
 8007da6:	605a      	str	r2, [r3, #4]
 8007da8:	f8d1 0006 	ldr.w	r0, [r1, #6]
 8007dac:	4a12      	ldr	r2, [pc, #72]	; (8007df8 <crypto_onetimeauth_poly1305_donna_init+0x68>)
 8007dae:	ea02 1210 	and.w	r2, r2, r0, lsr #4
 8007db2:	609a      	str	r2, [r3, #8]
 8007db4:	f8d1 0009 	ldr.w	r0, [r1, #9]
 8007db8:	4a10      	ldr	r2, [pc, #64]	; (8007dfc <crypto_onetimeauth_poly1305_donna_init+0x6c>)
 8007dba:	ea02 1290 	and.w	r2, r2, r0, lsr #6
 8007dbe:	60da      	str	r2, [r3, #12]
 8007dc0:	68ca      	ldr	r2, [r1, #12]
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	f3c2 2213 	ubfx	r2, r2, #8, #20
 8007dc8:	611a      	str	r2, [r3, #16]
 8007dca:	6158      	str	r0, [r3, #20]
 8007dcc:	6198      	str	r0, [r3, #24]
 8007dce:	61d8      	str	r0, [r3, #28]
 8007dd0:	6218      	str	r0, [r3, #32]
 8007dd2:	6258      	str	r0, [r3, #36]	; 0x24
 8007dd4:	690a      	ldr	r2, [r1, #16]
 8007dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8007dd8:	694a      	ldr	r2, [r1, #20]
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ddc:	698a      	ldr	r2, [r1, #24]
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30
 8007de0:	69ca      	ldr	r2, [r1, #28]
 8007de2:	635a      	str	r2, [r3, #52]	; 0x34
 8007de4:	2400      	movs	r4, #0
 8007de6:	2500      	movs	r5, #0
 8007de8:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 8007dec:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
 8007df0:	bd30      	pop	{r4, r5, pc}
 8007df2:	bf00      	nop
 8007df4:	03ffff03 	.word	0x03ffff03
 8007df8:	03ffc0ff 	.word	0x03ffc0ff
 8007dfc:	03f03fff 	.word	0x03f03fff

08007e00 <crypto_stream_chacha20_keybytes>:
 8007e00:	2020      	movs	r0, #32
 8007e02:	4770      	bx	lr

08007e04 <crypto_stream_chacha20_noncebytes>:
 8007e04:	2008      	movs	r0, #8
 8007e06:	4770      	bx	lr

08007e08 <crypto_stream_chacha20_messagebytes_max>:
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e0c:	4770      	bx	lr

08007e0e <crypto_stream_chacha20_ietf_keybytes>:
 8007e0e:	2020      	movs	r0, #32
 8007e10:	4770      	bx	lr

08007e12 <crypto_stream_chacha20_ietf_noncebytes>:
 8007e12:	200c      	movs	r0, #12
 8007e14:	4770      	bx	lr

08007e16 <crypto_stream_chacha20_ietf_messagebytes_max>:
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e1a:	4770      	bx	lr

08007e1c <crypto_stream_chacha20>:
 8007e1c:	b410      	push	{r4}
 8007e1e:	4903      	ldr	r1, [pc, #12]	; (8007e2c <crypto_stream_chacha20+0x10>)
 8007e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e24:	4479      	add	r1, pc
 8007e26:	6809      	ldr	r1, [r1, #0]
 8007e28:	6809      	ldr	r1, [r1, #0]
 8007e2a:	4708      	bx	r1
 8007e2c:	17ff8298 	.word	0x17ff8298

08007e30 <crypto_stream_chacha20_ietf>:
 8007e30:	b410      	push	{r4}
 8007e32:	4903      	ldr	r1, [pc, #12]	; (8007e40 <crypto_stream_chacha20_ietf+0x10>)
 8007e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e38:	4479      	add	r1, pc
 8007e3a:	6809      	ldr	r1, [r1, #0]
 8007e3c:	6849      	ldr	r1, [r1, #4]
 8007e3e:	4708      	bx	r1
 8007e40:	17ff8284 	.word	0x17ff8284

08007e44 <crypto_stream_chacha20_xor_ic>:
 8007e44:	b4f0      	push	{r4, r5, r6, r7}
 8007e46:	4c03      	ldr	r4, [pc, #12]	; (8007e54 <crypto_stream_chacha20_xor_ic+0x10>)
 8007e48:	447c      	add	r4, pc
 8007e4a:	6824      	ldr	r4, [r4, #0]
 8007e4c:	68a4      	ldr	r4, [r4, #8]
 8007e4e:	46a4      	mov	ip, r4
 8007e50:	bcf0      	pop	{r4, r5, r6, r7}
 8007e52:	4760      	bx	ip
 8007e54:	17ff8274 	.word	0x17ff8274

08007e58 <crypto_stream_chacha20_ietf_xor_ic>:
 8007e58:	b430      	push	{r4, r5}
 8007e5a:	4c03      	ldr	r4, [pc, #12]	; (8007e68 <crypto_stream_chacha20_ietf_xor_ic+0x10>)
 8007e5c:	447c      	add	r4, pc
 8007e5e:	6824      	ldr	r4, [r4, #0]
 8007e60:	68e4      	ldr	r4, [r4, #12]
 8007e62:	46a4      	mov	ip, r4
 8007e64:	bc30      	pop	{r4, r5}
 8007e66:	4760      	bx	ip
 8007e68:	17ff8260 	.word	0x17ff8260

08007e6c <crypto_stream_chacha20_xor>:
 8007e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6e:	4c08      	ldr	r4, [pc, #32]	; (8007e90 <crypto_stream_chacha20_xor+0x24>)
 8007e70:	b087      	sub	sp, #28
 8007e72:	447c      	add	r4, pc
 8007e74:	2600      	movs	r6, #0
 8007e76:	2700      	movs	r7, #0
 8007e78:	6824      	ldr	r4, [r4, #0]
 8007e7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007e7c:	9504      	str	r5, [sp, #16]
 8007e7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e84:	9500      	str	r5, [sp, #0]
 8007e86:	68a4      	ldr	r4, [r4, #8]
 8007e88:	47a0      	blx	r4
 8007e8a:	b007      	add	sp, #28
 8007e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	17ff824a 	.word	0x17ff824a

08007e94 <crypto_stream_chacha20_ietf_xor>:
 8007e94:	b530      	push	{r4, r5, lr}
 8007e96:	4c07      	ldr	r4, [pc, #28]	; (8007eb4 <crypto_stream_chacha20_ietf_xor+0x20>)
 8007e98:	b085      	sub	sp, #20
 8007e9a:	447c      	add	r4, pc
 8007e9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e9e:	6824      	ldr	r4, [r4, #0]
 8007ea0:	9502      	str	r5, [sp, #8]
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	9501      	str	r5, [sp, #4]
 8007ea6:	9d08      	ldr	r5, [sp, #32]
 8007ea8:	9500      	str	r5, [sp, #0]
 8007eaa:	68e4      	ldr	r4, [r4, #12]
 8007eac:	47a0      	blx	r4
 8007eae:	b005      	add	sp, #20
 8007eb0:	bd30      	pop	{r4, r5, pc}
 8007eb2:	bf00      	nop
 8007eb4:	17ff8222 	.word	0x17ff8222

08007eb8 <crypto_stream_chacha20_keygen>:
 8007eb8:	2120      	movs	r1, #32
 8007eba:	f7fe be8b 	b.w	8006bd4 <randombytes_buf>

08007ebe <crypto_stream_chacha20_ietf_keygen>:
 8007ebe:	f7ff bffb 	b.w	8007eb8 <crypto_stream_chacha20_keygen>
	...

08007ec4 <_crypto_stream_chacha20_pick_best_implementation>:
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <_crypto_stream_chacha20_pick_best_implementation+0x14>)
 8007ec6:	4a05      	ldr	r2, [pc, #20]	; (8007edc <_crypto_stream_chacha20_pick_best_implementation+0x18>)
 8007ec8:	447b      	add	r3, pc
 8007eca:	2000      	movs	r0, #0
 8007ecc:	589a      	ldr	r2, [r3, r2]
 8007ece:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <_crypto_stream_chacha20_pick_best_implementation+0x1c>)
 8007ed0:	447b      	add	r3, pc
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	17ff8bb0 	.word	0x17ff8bb0
 8007edc:	0000000c 	.word	0x0000000c
 8007ee0:	17ff81ec 	.word	0x17ff81ec

08007ee4 <chacha_keysetup>:
 8007ee4:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <chacha_keysetup+0x3c>)
 8007ee6:	4a0f      	ldr	r2, [pc, #60]	; (8007f24 <chacha_keysetup+0x40>)
 8007ee8:	e880 000c 	stmia.w	r0, {r2, r3}
 8007eec:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <chacha_keysetup+0x44>)
 8007eee:	6083      	str	r3, [r0, #8]
 8007ef0:	f1a3 6364 	sub.w	r3, r3, #239075328	; 0xe400000
 8007ef4:	f5a3 33e3 	sub.w	r3, r3, #116224	; 0x1c600
 8007ef8:	f5a3 73df 	sub.w	r3, r3, #446	; 0x1be
 8007efc:	60c3      	str	r3, [r0, #12]
 8007efe:	680b      	ldr	r3, [r1, #0]
 8007f00:	6103      	str	r3, [r0, #16]
 8007f02:	684b      	ldr	r3, [r1, #4]
 8007f04:	6143      	str	r3, [r0, #20]
 8007f06:	688b      	ldr	r3, [r1, #8]
 8007f08:	6183      	str	r3, [r0, #24]
 8007f0a:	68cb      	ldr	r3, [r1, #12]
 8007f0c:	61c3      	str	r3, [r0, #28]
 8007f0e:	690b      	ldr	r3, [r1, #16]
 8007f10:	6203      	str	r3, [r0, #32]
 8007f12:	694b      	ldr	r3, [r1, #20]
 8007f14:	6243      	str	r3, [r0, #36]	; 0x24
 8007f16:	698b      	ldr	r3, [r1, #24]
 8007f18:	6283      	str	r3, [r0, #40]	; 0x28
 8007f1a:	69cb      	ldr	r3, [r1, #28]
 8007f1c:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007f1e:	4770      	bx	lr
 8007f20:	3320646e 	.word	0x3320646e
 8007f24:	61707865 	.word	0x61707865
 8007f28:	79622d32 	.word	0x79622d32

08007f2c <chacha20_encrypt_bytes.part.0>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	b0b1      	sub	sp, #196	; 0xc4
 8007f32:	4614      	mov	r4, r2
 8007f34:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	bf08      	it	eq
 8007f3c:	2a00      	cmpeq	r2, #0
 8007f3e:	9001      	str	r0, [sp, #4]
 8007f40:	460d      	mov	r5, r1
 8007f42:	d301      	bcc.n	8007f48 <chacha20_encrypt_bytes.part.0+0x1c>
 8007f44:	f7fe fec8 	bl	8006cd8 <sodium_misuse>
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	930c      	str	r3, [sp, #48]	; 0x30
 8007f5a:	9b01      	ldr	r3, [sp, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	930e      	str	r3, [sp, #56]	; 0x38
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	9310      	str	r3, [sp, #64]	; 0x40
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	9311      	str	r3, [sp, #68]	; 0x44
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	9312      	str	r3, [sp, #72]	; 0x48
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f84:	9b01      	ldr	r3, [sp, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	9314      	str	r3, [sp, #80]	; 0x50
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	9315      	str	r3, [sp, #84]	; 0x54
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	9316      	str	r3, [sp, #88]	; 0x58
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fa8:	2300      	movs	r3, #0
 8007faa:	931d      	str	r3, [sp, #116]	; 0x74
 8007fac:	ab20      	add	r3, sp, #128	; 0x80
 8007fae:	931f      	str	r3, [sp, #124]	; 0x7c
 8007fb0:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bf08      	it	eq
 8007fb8:	2a40      	cmpeq	r2, #64	; 0x40
 8007fba:	d210      	bcs.n	8007fde <chacha20_encrypt_bytes.part.0+0xb2>
 8007fbc:	2240      	movs	r2, #64	; 0x40
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007fc2:	f000 fed3 	bl	8008d6c <memset>
 8007fc6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8007fc8:	3a01      	subs	r2, #1
 8007fca:	1e6b      	subs	r3, r5, #1
 8007fcc:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8007fd0:	4415      	add	r5, r2
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	f040 80bb 	bne.w	800814e <chacha20_encrypt_bytes.part.0+0x222>
 8007fd8:	941d      	str	r4, [sp, #116]	; 0x74
 8007fda:	ac20      	add	r4, sp, #128	; 0x80
 8007fdc:	4625      	mov	r5, r4
 8007fde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fec:	9306      	str	r3, [sp, #24]
 8007fee:	aa10      	add	r2, sp, #64	; 0x40
 8007ff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007ff8:	e892 060c 	ldmia.w	r2, {r2, r3, r9, sl}
 8007ffc:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
 8008000:	260b      	movs	r6, #11
 8008002:	9803      	ldr	r0, [sp, #12]
 8008004:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8008008:	990e      	ldr	r1, [sp, #56]	; 0x38
 800800a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800800c:	9602      	str	r6, [sp, #8]
 800800e:	9e02      	ldr	r6, [sp, #8]
 8008010:	3e01      	subs	r6, #1
 8008012:	9602      	str	r6, [sp, #8]
 8008014:	f040 80a0 	bne.w	8008158 <chacha20_encrypt_bytes.part.0+0x22c>
 8008018:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800801a:	44b0      	add	r8, r6
 800801c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800801e:	44b4      	add	ip, r6
 8008020:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008022:	44b6      	add	lr, r6
 8008024:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8008026:	4437      	add	r7, r6
 8008028:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800802a:	4431      	add	r1, r6
 800802c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800802e:	44b3      	add	fp, r6
 8008030:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008032:	4432      	add	r2, r6
 8008034:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008036:	4433      	add	r3, r6
 8008038:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800803a:	9318      	str	r3, [sp, #96]	; 0x60
 800803c:	44b1      	add	r9, r6
 800803e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8008040:	44b2      	add	sl, r6
 8008042:	9e05      	ldr	r6, [sp, #20]
 8008044:	4633      	mov	r3, r6
 8008046:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008048:	4433      	add	r3, r6
 800804a:	9e06      	ldr	r6, [sp, #24]
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	4633      	mov	r3, r6
 8008050:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008052:	4433      	add	r3, r6
 8008054:	9e03      	ldr	r6, [sp, #12]
 8008056:	9306      	str	r3, [sp, #24]
 8008058:	4430      	add	r0, r6
 800805a:	9019      	str	r0, [sp, #100]	; 0x64
 800805c:	9e04      	ldr	r6, [sp, #16]
 800805e:	9808      	ldr	r0, [sp, #32]
 8008060:	4430      	add	r0, r6
 8008062:	9008      	str	r0, [sp, #32]
 8008064:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8008066:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008068:	4430      	add	r0, r6
 800806a:	9009      	str	r0, [sp, #36]	; 0x24
 800806c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800806e:	9807      	ldr	r0, [sp, #28]
 8008070:	4430      	add	r0, r6
 8008072:	4606      	mov	r6, r0
 8008074:	6828      	ldr	r0, [r5, #0]
 8008076:	ea80 0008 	eor.w	r0, r0, r8
 800807a:	9007      	str	r0, [sp, #28]
 800807c:	6868      	ldr	r0, [r5, #4]
 800807e:	ea80 000c 	eor.w	r0, r0, ip
 8008082:	901a      	str	r0, [sp, #104]	; 0x68
 8008084:	68a8      	ldr	r0, [r5, #8]
 8008086:	ea80 000e 	eor.w	r0, r0, lr
 800808a:	901b      	str	r0, [sp, #108]	; 0x6c
 800808c:	68e8      	ldr	r0, [r5, #12]
 800808e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008090:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
 8008094:	f8d5 e034 	ldr.w	lr, [r5, #52]	; 0x34
 8008098:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 800809c:	4078      	eors	r0, r7
 800809e:	901c      	str	r0, [sp, #112]	; 0x70
 80080a0:	6928      	ldr	r0, [r5, #16]
 80080a2:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80080a4:	4041      	eors	r1, r0
 80080a6:	911e      	str	r1, [sp, #120]	; 0x78
 80080a8:	6969      	ldr	r1, [r5, #20]
 80080aa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80080ac:	ea81 0b0b 	eor.w	fp, r1, fp
 80080b0:	69a9      	ldr	r1, [r5, #24]
 80080b2:	404a      	eors	r2, r1
 80080b4:	69e9      	ldr	r1, [r5, #28]
 80080b6:	404b      	eors	r3, r1
 80080b8:	6a29      	ldr	r1, [r5, #32]
 80080ba:	ea81 0909 	eor.w	r9, r1, r9
 80080be:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80080c0:	ea81 0a0a 	eor.w	sl, r1, sl
 80080c4:	9905      	ldr	r1, [sp, #20]
 80080c6:	ea8c 0c01 	eor.w	ip, ip, r1
 80080ca:	9906      	ldr	r1, [sp, #24]
 80080cc:	404f      	eors	r7, r1
 80080ce:	9919      	ldr	r1, [sp, #100]	; 0x64
 80080d0:	4048      	eors	r0, r1
 80080d2:	9908      	ldr	r1, [sp, #32]
 80080d4:	ea8e 0e01 	eor.w	lr, lr, r1
 80080d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080da:	ea88 0801 	eor.w	r8, r8, r1
 80080de:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80080e0:	4071      	eors	r1, r6
 80080e2:	9e03      	ldr	r6, [sp, #12]
 80080e4:	3601      	adds	r6, #1
 80080e6:	9603      	str	r6, [sp, #12]
 80080e8:	bf02      	ittt	eq
 80080ea:	9e04      	ldreq	r6, [sp, #16]
 80080ec:	3601      	addeq	r6, #1
 80080ee:	9604      	streq	r6, [sp, #16]
 80080f0:	9e07      	ldr	r6, [sp, #28]
 80080f2:	6026      	str	r6, [r4, #0]
 80080f4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80080f6:	6066      	str	r6, [r4, #4]
 80080f8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80080fa:	60a6      	str	r6, [r4, #8]
 80080fc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80080fe:	60e6      	str	r6, [r4, #12]
 8008100:	61a2      	str	r2, [r4, #24]
 8008102:	61e3      	str	r3, [r4, #28]
 8008104:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8008108:	2b00      	cmp	r3, #0
 800810a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800810c:	6126      	str	r6, [r4, #16]
 800810e:	bf08      	it	eq
 8008110:	2a41      	cmpeq	r2, #65	; 0x41
 8008112:	f8c4 b014 	str.w	fp, [r4, #20]
 8008116:	f8c4 9020 	str.w	r9, [r4, #32]
 800811a:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
 800811e:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
 8008122:	62e7      	str	r7, [r4, #44]	; 0x2c
 8008124:	6320      	str	r0, [r4, #48]	; 0x30
 8008126:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
 800812a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800812e:	63e1      	str	r1, [r4, #60]	; 0x3c
 8008130:	f080 80da 	bcs.w	80082e8 <chacha20_encrypt_bytes.part.0+0x3bc>
 8008134:	2b00      	cmp	r3, #0
 8008136:	bf08      	it	eq
 8008138:	2a40      	cmpeq	r2, #64	; 0x40
 800813a:	f040 80d0 	bne.w	80082de <chacha20_encrypt_bytes.part.0+0x3b2>
 800813e:	9a01      	ldr	r2, [sp, #4]
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	6313      	str	r3, [r2, #48]	; 0x30
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	6353      	str	r3, [r2, #52]	; 0x34
 8008148:	b031      	add	sp, #196	; 0xc4
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008152:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008156:	e73c      	b.n	8007fd2 <chacha20_encrypt_bytes.part.0+0xa6>
 8008158:	4488      	add	r8, r1
 800815a:	ea88 0000 	eor.w	r0, r8, r0
 800815e:	ea4f 4030 	mov.w	r0, r0, ror #16
 8008162:	4481      	add	r9, r0
 8008164:	ea81 0109 	eor.w	r1, r1, r9
 8008168:	ea4f 5131 	mov.w	r1, r1, ror #20
 800816c:	4488      	add	r8, r1
 800816e:	ea80 0008 	eor.w	r0, r0, r8
 8008172:	ea4f 6030 	mov.w	r0, r0, ror #24
 8008176:	9018      	str	r0, [sp, #96]	; 0x60
 8008178:	4448      	add	r0, r9
 800817a:	4041      	eors	r1, r0
 800817c:	ea4f 6171 	mov.w	r1, r1, ror #25
 8008180:	911a      	str	r1, [sp, #104]	; 0x68
 8008182:	9908      	ldr	r1, [sp, #32]
 8008184:	9019      	str	r0, [sp, #100]	; 0x64
 8008186:	44dc      	add	ip, fp
 8008188:	ea8c 0101 	eor.w	r1, ip, r1
 800818c:	ea4f 4131 	mov.w	r1, r1, ror #16
 8008190:	448a      	add	sl, r1
 8008192:	ea8b 000a 	eor.w	r0, fp, sl
 8008196:	ea4f 5030 	mov.w	r0, r0, ror #20
 800819a:	eb0c 0b00 	add.w	fp, ip, r0
 800819e:	ea81 010b 	eor.w	r1, r1, fp
 80081a2:	ea4f 6131 	mov.w	r1, r1, ror #24
 80081a6:	9108      	str	r1, [sp, #32]
 80081a8:	4451      	add	r1, sl
 80081aa:	911b      	str	r1, [sp, #108]	; 0x6c
 80081ac:	4048      	eors	r0, r1
 80081ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b0:	9e06      	ldr	r6, [sp, #24]
 80081b2:	4496      	add	lr, r2
 80081b4:	ea8e 0a01 	eor.w	sl, lr, r1
 80081b8:	9905      	ldr	r1, [sp, #20]
 80081ba:	ea4f 4a3a 	mov.w	sl, sl, ror #16
 80081be:	4451      	add	r1, sl
 80081c0:	468c      	mov	ip, r1
 80081c2:	404a      	eors	r2, r1
 80081c4:	9907      	ldr	r1, [sp, #28]
 80081c6:	441f      	add	r7, r3
 80081c8:	4079      	eors	r1, r7
 80081ca:	ea4f 4131 	mov.w	r1, r1, ror #16
 80081ce:	440e      	add	r6, r1
 80081d0:	4073      	eors	r3, r6
 80081d2:	ea4f 5333 	mov.w	r3, r3, ror #20
 80081d6:	441f      	add	r7, r3
 80081d8:	ea4f 5232 	mov.w	r2, r2, ror #20
 80081dc:	4496      	add	lr, r2
 80081de:	ea4f 6070 	mov.w	r0, r0, ror #25
 80081e2:	4079      	eors	r1, r7
 80081e4:	4480      	add	r8, r0
 80081e6:	ea8a 0a0e 	eor.w	sl, sl, lr
 80081ea:	46b1      	mov	r9, r6
 80081ec:	ea4f 6131 	mov.w	r1, r1, ror #24
 80081f0:	ea4f 6a3a 	mov.w	sl, sl, ror #24
 80081f4:	4489      	add	r9, r1
 80081f6:	ea81 0108 	eor.w	r1, r1, r8
 80081fa:	44d4      	add	ip, sl
 80081fc:	ea4f 4131 	mov.w	r1, r1, ror #16
 8008200:	ea82 020c 	eor.w	r2, r2, ip
 8008204:	448c      	add	ip, r1
 8008206:	ea80 000c 	eor.w	r0, r0, ip
 800820a:	ea4f 5030 	mov.w	r0, r0, ror #20
 800820e:	4480      	add	r8, r0
 8008210:	ea81 0108 	eor.w	r1, r1, r8
 8008214:	ea4f 6131 	mov.w	r1, r1, ror #24
 8008218:	9107      	str	r1, [sp, #28]
 800821a:	4461      	add	r1, ip
 800821c:	ea4f 6272 	mov.w	r2, r2, ror #25
 8008220:	9105      	str	r1, [sp, #20]
 8008222:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008224:	901c      	str	r0, [sp, #112]	; 0x70
 8008226:	eb0b 0c02 	add.w	ip, fp, r2
 800822a:	ea81 000c 	eor.w	r0, r1, ip
 800822e:	ea4f 4030 	mov.w	r0, r0, ror #16
 8008232:	ea83 0309 	eor.w	r3, r3, r9
 8008236:	4481      	add	r9, r0
 8008238:	ea82 0209 	eor.w	r2, r2, r9
 800823c:	ea4f 5232 	mov.w	r2, r2, ror #20
 8008240:	4494      	add	ip, r2
 8008242:	ea80 000c 	eor.w	r0, r0, ip
 8008246:	ea4f 6030 	mov.w	r0, r0, ror #24
 800824a:	eb09 0100 	add.w	r1, r9, r0
 800824e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008252:	9106      	str	r1, [sp, #24]
 8008254:	9908      	ldr	r1, [sp, #32]
 8008256:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008258:	449e      	add	lr, r3
 800825a:	ea81 010e 	eor.w	r1, r1, lr
 800825e:	ea4f 4131 	mov.w	r1, r1, ror #16
 8008262:	eb06 0901 	add.w	r9, r6, r1
 8008266:	ea83 0309 	eor.w	r3, r3, r9
 800826a:	ea4f 5333 	mov.w	r3, r3, ror #20
 800826e:	449e      	add	lr, r3
 8008270:	ea81 010e 	eor.w	r1, r1, lr
 8008274:	ea4f 6131 	mov.w	r1, r1, ror #24
 8008278:	4489      	add	r9, r1
 800827a:	9108      	str	r1, [sp, #32]
 800827c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800827e:	440f      	add	r7, r1
 8008280:	ea8a 0b07 	eor.w	fp, sl, r7
 8008284:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008286:	ea4f 4b3b 	mov.w	fp, fp, ror #16
 800828a:	eb01 0a0b 	add.w	sl, r1, fp
 800828e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008290:	ea81 010a 	eor.w	r1, r1, sl
 8008294:	ea4f 5131 	mov.w	r1, r1, ror #20
 8008298:	440f      	add	r7, r1
 800829a:	ea8b 0b07 	eor.w	fp, fp, r7
 800829e:	ea4f 663b 	mov.w	r6, fp, ror #24
 80082a2:	44b2      	add	sl, r6
 80082a4:	9609      	str	r6, [sp, #36]	; 0x24
 80082a6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80082a8:	46b3      	mov	fp, r6
 80082aa:	9e05      	ldr	r6, [sp, #20]
 80082ac:	ea8b 0b06 	eor.w	fp, fp, r6
 80082b0:	9e06      	ldr	r6, [sp, #24]
 80082b2:	ea81 010a 	eor.w	r1, r1, sl
 80082b6:	4072      	eors	r2, r6
 80082b8:	ea83 0309 	eor.w	r3, r3, r9
 80082bc:	ea4f 6171 	mov.w	r1, r1, ror #25
 80082c0:	ea4f 6b7b 	mov.w	fp, fp, ror #25
 80082c4:	ea4f 6272 	mov.w	r2, r2, ror #25
 80082c8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80082cc:	e69f      	b.n	800800e <chacha20_encrypt_bytes.part.0+0xe2>
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	9902      	ldr	r1, [sp, #8]
 80082d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80082d4:	5ce3      	ldrb	r3, [r4, r3]
 80082d6:	5453      	strb	r3, [r2, r1]
 80082d8:	460b      	mov	r3, r1
 80082da:	3301      	adds	r3, #1
 80082dc:	9302      	str	r3, [sp, #8]
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d3f3      	bcc.n	80082ce <chacha20_encrypt_bytes.part.0+0x3a2>
 80082e6:	e72a      	b.n	800813e <chacha20_encrypt_bytes.part.0+0x212>
 80082e8:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 80082ec:	3a40      	subs	r2, #64	; 0x40
 80082ee:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80082f2:	e9cd 233a 	strd	r2, r3, [sp, #232]	; 0xe8
 80082f6:	3440      	adds	r4, #64	; 0x40
 80082f8:	3540      	adds	r5, #64	; 0x40
 80082fa:	e659      	b.n	8007fb0 <chacha20_encrypt_bytes.part.0+0x84>

080082fc <stream_ietf_ref>:
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	4616      	mov	r6, r2
 8008302:	b092      	sub	sp, #72	; 0x48
 8008304:	461f      	mov	r7, r3
 8008306:	ea56 0307 	orrs.w	r3, r6, r7
 800830a:	4680      	mov	r8, r0
 800830c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800830e:	d01b      	beq.n	8008348 <stream_ietf_ref+0x4c>
 8008310:	ac02      	add	r4, sp, #8
 8008312:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008314:	4620      	mov	r0, r4
 8008316:	f7ff fde5 	bl	8007ee4 <chacha_keysetup>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	930f      	str	r3, [sp, #60]	; 0x3c
 800831e:	686b      	ldr	r3, [r5, #4]
 8008320:	9310      	str	r3, [sp, #64]	; 0x40
 8008322:	2100      	movs	r1, #0
 8008324:	68ab      	ldr	r3, [r5, #8]
 8008326:	910e      	str	r1, [sp, #56]	; 0x38
 8008328:	4632      	mov	r2, r6
 800832a:	4640      	mov	r0, r8
 800832c:	9311      	str	r3, [sp, #68]	; 0x44
 800832e:	f000 fd1d 	bl	8008d6c <memset>
 8008332:	4641      	mov	r1, r8
 8008334:	4620      	mov	r0, r4
 8008336:	e9cd 6700 	strd	r6, r7, [sp]
 800833a:	4642      	mov	r2, r8
 800833c:	f7ff fdf6 	bl	8007f2c <chacha20_encrypt_bytes.part.0>
 8008340:	2140      	movs	r1, #64	; 0x40
 8008342:	4620      	mov	r0, r4
 8008344:	f7fe fd31 	bl	8006daa <sodium_memzero>
 8008348:	2000      	movs	r0, #0
 800834a:	b012      	add	sp, #72	; 0x48
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008350 <stream_ref_xor_ic>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	4616      	mov	r6, r2
 8008356:	b093      	sub	sp, #76	; 0x4c
 8008358:	461f      	mov	r7, r3
 800835a:	ea56 0307 	orrs.w	r3, r6, r7
 800835e:	4681      	mov	r9, r0
 8008360:	4688      	mov	r8, r1
 8008362:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008364:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8008368:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800836c:	d017      	beq.n	800839e <stream_ref_xor_ic+0x4e>
 800836e:	ac02      	add	r4, sp, #8
 8008370:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008372:	4620      	mov	r0, r4
 8008374:	f7ff fdb6 	bl	8007ee4 <chacha_keysetup>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	9310      	str	r3, [sp, #64]	; 0x40
 800837c:	4641      	mov	r1, r8
 800837e:	686b      	ldr	r3, [r5, #4]
 8008380:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008384:	4620      	mov	r0, r4
 8008386:	e9cd 6700 	strd	r6, r7, [sp]
 800838a:	464a      	mov	r2, r9
 800838c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8008390:	9311      	str	r3, [sp, #68]	; 0x44
 8008392:	f7ff fdcb 	bl	8007f2c <chacha20_encrypt_bytes.part.0>
 8008396:	2140      	movs	r1, #64	; 0x40
 8008398:	4620      	mov	r0, r4
 800839a:	f7fe fd06 	bl	8006daa <sodium_memzero>
 800839e:	2000      	movs	r0, #0
 80083a0:	b013      	add	sp, #76	; 0x4c
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083a6 <stream_ietf_ref_xor_ic>:
 80083a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083aa:	4616      	mov	r6, r2
 80083ac:	b093      	sub	sp, #76	; 0x4c
 80083ae:	461f      	mov	r7, r3
 80083b0:	ea56 0307 	orrs.w	r3, r6, r7
 80083b4:	4681      	mov	r9, r0
 80083b6:	4688      	mov	r8, r1
 80083b8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80083ba:	d017      	beq.n	80083ec <stream_ietf_ref_xor_ic+0x46>
 80083bc:	ac02      	add	r4, sp, #8
 80083be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083c0:	4620      	mov	r0, r4
 80083c2:	f7ff fd8f 	bl	8007ee4 <chacha_keysetup>
 80083c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c8:	930e      	str	r3, [sp, #56]	; 0x38
 80083ca:	682b      	ldr	r3, [r5, #0]
 80083cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80083ce:	686b      	ldr	r3, [r5, #4]
 80083d0:	9310      	str	r3, [sp, #64]	; 0x40
 80083d2:	4641      	mov	r1, r8
 80083d4:	68ab      	ldr	r3, [r5, #8]
 80083d6:	9311      	str	r3, [sp, #68]	; 0x44
 80083d8:	4620      	mov	r0, r4
 80083da:	e9cd 6700 	strd	r6, r7, [sp]
 80083de:	464a      	mov	r2, r9
 80083e0:	f7ff fda4 	bl	8007f2c <chacha20_encrypt_bytes.part.0>
 80083e4:	2140      	movs	r1, #64	; 0x40
 80083e6:	4620      	mov	r0, r4
 80083e8:	f7fe fcdf 	bl	8006daa <sodium_memzero>
 80083ec:	2000      	movs	r0, #0
 80083ee:	b013      	add	sp, #76	; 0x4c
 80083f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080083f4 <stream_ref>:
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	4616      	mov	r6, r2
 80083fa:	b092      	sub	sp, #72	; 0x48
 80083fc:	461f      	mov	r7, r3
 80083fe:	ea56 0307 	orrs.w	r3, r6, r7
 8008402:	4605      	mov	r5, r0
 8008404:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008408:	d01c      	beq.n	8008444 <stream_ref+0x50>
 800840a:	ac02      	add	r4, sp, #8
 800840c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff fd68 	bl	8007ee4 <chacha_keysetup>
 8008414:	f8d8 3000 	ldr.w	r3, [r8]
 8008418:	9310      	str	r3, [sp, #64]	; 0x40
 800841a:	2100      	movs	r1, #0
 800841c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008420:	910e      	str	r1, [sp, #56]	; 0x38
 8008422:	4632      	mov	r2, r6
 8008424:	4628      	mov	r0, r5
 8008426:	910f      	str	r1, [sp, #60]	; 0x3c
 8008428:	9311      	str	r3, [sp, #68]	; 0x44
 800842a:	f000 fc9f 	bl	8008d6c <memset>
 800842e:	4629      	mov	r1, r5
 8008430:	4620      	mov	r0, r4
 8008432:	e9cd 6700 	strd	r6, r7, [sp]
 8008436:	462a      	mov	r2, r5
 8008438:	f7ff fd78 	bl	8007f2c <chacha20_encrypt_bytes.part.0>
 800843c:	2140      	movs	r1, #64	; 0x40
 800843e:	4620      	mov	r0, r4
 8008440:	f7fe fcb3 	bl	8006daa <sodium_memzero>
 8008444:	2000      	movs	r0, #0
 8008446:	b012      	add	sp, #72	; 0x48
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800844c <crypto_verify_n>:
 800844c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800844e:	2300      	movs	r3, #0
 8008450:	9001      	str	r0, [sp, #4]
 8008452:	9102      	str	r1, [sp, #8]
 8008454:	9303      	str	r3, [sp, #12]
 8008456:	4293      	cmp	r3, r2
 8008458:	db06      	blt.n	8008468 <crypto_verify_n+0x1c>
 800845a:	9803      	ldr	r0, [sp, #12]
 800845c:	3801      	subs	r0, #1
 800845e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8008462:	3801      	subs	r0, #1
 8008464:	b004      	add	sp, #16
 8008466:	bd10      	pop	{r4, pc}
 8008468:	9901      	ldr	r1, [sp, #4]
 800846a:	5cc9      	ldrb	r1, [r1, r3]
 800846c:	9802      	ldr	r0, [sp, #8]
 800846e:	5cc4      	ldrb	r4, [r0, r3]
 8008470:	9803      	ldr	r0, [sp, #12]
 8008472:	4061      	eors	r1, r4
 8008474:	4301      	orrs	r1, r0
 8008476:	9103      	str	r1, [sp, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	e7ec      	b.n	8008456 <crypto_verify_n+0xa>

0800847c <crypto_verify_16_bytes>:
 800847c:	2010      	movs	r0, #16
 800847e:	4770      	bx	lr

08008480 <crypto_verify_32_bytes>:
 8008480:	2020      	movs	r0, #32
 8008482:	4770      	bx	lr

08008484 <crypto_verify_64_bytes>:
 8008484:	2040      	movs	r0, #64	; 0x40
 8008486:	4770      	bx	lr

08008488 <crypto_verify_16>:
 8008488:	2210      	movs	r2, #16
 800848a:	f7ff bfdf 	b.w	800844c <crypto_verify_n>

0800848e <crypto_verify_32>:
 800848e:	2220      	movs	r2, #32
 8008490:	f7ff bfdc 	b.w	800844c <crypto_verify_n>

08008494 <crypto_verify_64>:
 8008494:	2240      	movs	r2, #64	; 0x40
 8008496:	f7ff bfd9 	b.w	800844c <crypto_verify_n>
	...

0800849c <abort>:
 800849c:	b508      	push	{r3, lr}
 800849e:	2006      	movs	r0, #6
 80084a0:	f000 fd5a 	bl	8008f58 <raise>
 80084a4:	2001      	movs	r0, #1
 80084a6:	f003 fbc1 	bl	800bc2c <_exit>
 80084aa:	bf00      	nop

080084ac <__assert_func>:
 80084ac:	b500      	push	{lr}
 80084ae:	4c0a      	ldr	r4, [pc, #40]	; (80084d8 <__assert_func+0x2c>)
 80084b0:	6826      	ldr	r6, [r4, #0]
 80084b2:	4605      	mov	r5, r0
 80084b4:	b085      	sub	sp, #20
 80084b6:	461c      	mov	r4, r3
 80084b8:	68f0      	ldr	r0, [r6, #12]
 80084ba:	b152      	cbz	r2, 80084d2 <__assert_func+0x26>
 80084bc:	4b07      	ldr	r3, [pc, #28]	; (80084dc <__assert_func+0x30>)
 80084be:	9100      	str	r1, [sp, #0]
 80084c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80084c4:	4906      	ldr	r1, [pc, #24]	; (80084e0 <__assert_func+0x34>)
 80084c6:	462b      	mov	r3, r5
 80084c8:	4622      	mov	r2, r4
 80084ca:	f000 f865 	bl	8008598 <fiprintf>
 80084ce:	f7ff ffe5 	bl	800849c <abort>
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <__assert_func+0x38>)
 80084d4:	461a      	mov	r2, r3
 80084d6:	e7f2      	b.n	80084be <__assert_func+0x12>
 80084d8:	200000d4 	.word	0x200000d4
 80084dc:	0800bf7c 	.word	0x0800bf7c
 80084e0:	0800bf8c 	.word	0x0800bf8c
 80084e4:	0800bf88 	.word	0x0800bf88

080084e8 <__assert>:
 80084e8:	b508      	push	{r3, lr}
 80084ea:	4613      	mov	r3, r2
 80084ec:	2200      	movs	r2, #0
 80084ee:	f7ff ffdd 	bl	80084ac <__assert_func>
 80084f2:	bf00      	nop

080084f4 <calloc>:
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <calloc+0xc>)
 80084f6:	460a      	mov	r2, r1
 80084f8:	4601      	mov	r1, r0
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	f000 b802 	b.w	8008504 <_calloc_r>
 8008500:	200000d4 	.word	0x200000d4

08008504 <_calloc_r>:
 8008504:	b510      	push	{r4, lr}
 8008506:	fb02 f101 	mul.w	r1, r2, r1
 800850a:	f000 f88d 	bl	8008628 <_malloc_r>
 800850e:	4604      	mov	r4, r0
 8008510:	b1d8      	cbz	r0, 800854a <_calloc_r+0x46>
 8008512:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008516:	f022 0203 	bic.w	r2, r2, #3
 800851a:	3a04      	subs	r2, #4
 800851c:	2a24      	cmp	r2, #36	; 0x24
 800851e:	d81d      	bhi.n	800855c <_calloc_r+0x58>
 8008520:	2a13      	cmp	r2, #19
 8008522:	d914      	bls.n	800854e <_calloc_r+0x4a>
 8008524:	2300      	movs	r3, #0
 8008526:	2a1b      	cmp	r2, #27
 8008528:	e9c0 3300 	strd	r3, r3, [r0]
 800852c:	d91b      	bls.n	8008566 <_calloc_r+0x62>
 800852e:	2a24      	cmp	r2, #36	; 0x24
 8008530:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8008534:	bf0a      	itet	eq
 8008536:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800853a:	f100 0210 	addne.w	r2, r0, #16
 800853e:	f100 0218 	addeq.w	r2, r0, #24
 8008542:	2300      	movs	r3, #0
 8008544:	e9c2 3300 	strd	r3, r3, [r2]
 8008548:	6093      	str	r3, [r2, #8]
 800854a:	4620      	mov	r0, r4
 800854c:	bd10      	pop	{r4, pc}
 800854e:	4602      	mov	r2, r0
 8008550:	2300      	movs	r3, #0
 8008552:	e9c2 3300 	strd	r3, r3, [r2]
 8008556:	6093      	str	r3, [r2, #8]
 8008558:	4620      	mov	r0, r4
 800855a:	bd10      	pop	{r4, pc}
 800855c:	2100      	movs	r1, #0
 800855e:	f000 fc05 	bl	8008d6c <memset>
 8008562:	4620      	mov	r0, r4
 8008564:	bd10      	pop	{r4, pc}
 8008566:	f100 0208 	add.w	r2, r0, #8
 800856a:	e7f1      	b.n	8008550 <_calloc_r+0x4c>

0800856c <__errno>:
 800856c:	4b01      	ldr	r3, [pc, #4]	; (8008574 <__errno+0x8>)
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	200000d4 	.word	0x200000d4

08008578 <explicit_bzero>:
 8008578:	f001 bcf4 	b.w	8009f64 <bzero>

0800857c <_fiprintf_r>:
 800857c:	b40c      	push	{r2, r3}
 800857e:	b500      	push	{lr}
 8008580:	b083      	sub	sp, #12
 8008582:	ab04      	add	r3, sp, #16
 8008584:	f853 2b04 	ldr.w	r2, [r3], #4
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f000 fe25 	bl	80091d8 <_vfiprintf_r>
 800858e:	b003      	add	sp, #12
 8008590:	f85d eb04 	ldr.w	lr, [sp], #4
 8008594:	b002      	add	sp, #8
 8008596:	4770      	bx	lr

08008598 <fiprintf>:
 8008598:	b40e      	push	{r1, r2, r3}
 800859a:	b510      	push	{r4, lr}
 800859c:	b083      	sub	sp, #12
 800859e:	ab05      	add	r3, sp, #20
 80085a0:	4c06      	ldr	r4, [pc, #24]	; (80085bc <fiprintf+0x24>)
 80085a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	4601      	mov	r1, r0
 80085aa:	6820      	ldr	r0, [r4, #0]
 80085ac:	f000 fe14 	bl	80091d8 <_vfiprintf_r>
 80085b0:	b003      	add	sp, #12
 80085b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b6:	b003      	add	sp, #12
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	200000d4 	.word	0x200000d4

080085c0 <__libc_init_array>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	4e0d      	ldr	r6, [pc, #52]	; (80085f8 <__libc_init_array+0x38>)
 80085c4:	4d0d      	ldr	r5, [pc, #52]	; (80085fc <__libc_init_array+0x3c>)
 80085c6:	1b76      	subs	r6, r6, r5
 80085c8:	10b6      	asrs	r6, r6, #2
 80085ca:	d006      	beq.n	80085da <__libc_init_array+0x1a>
 80085cc:	2400      	movs	r4, #0
 80085ce:	3401      	adds	r4, #1
 80085d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d4:	4798      	blx	r3
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d1f9      	bne.n	80085ce <__libc_init_array+0xe>
 80085da:	4e09      	ldr	r6, [pc, #36]	; (8008600 <__libc_init_array+0x40>)
 80085dc:	4d09      	ldr	r5, [pc, #36]	; (8008604 <__libc_init_array+0x44>)
 80085de:	1b76      	subs	r6, r6, r5
 80085e0:	f7fe f8d2 	bl	8006788 <_init>
 80085e4:	10b6      	asrs	r6, r6, #2
 80085e6:	d006      	beq.n	80085f6 <__libc_init_array+0x36>
 80085e8:	2400      	movs	r4, #0
 80085ea:	3401      	adds	r4, #1
 80085ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f0:	4798      	blx	r3
 80085f2:	42a6      	cmp	r6, r4
 80085f4:	d1f9      	bne.n	80085ea <__libc_init_array+0x2a>
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	20000a7c 	.word	0x20000a7c
 80085fc:	20000a7c 	.word	0x20000a7c
 8008600:	20000a7c 	.word	0x20000a7c
 8008604:	20000a7c 	.word	0x20000a7c

08008608 <malloc>:
 8008608:	4b02      	ldr	r3, [pc, #8]	; (8008614 <malloc+0xc>)
 800860a:	4601      	mov	r1, r0
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	f000 b80b 	b.w	8008628 <_malloc_r>
 8008612:	bf00      	nop
 8008614:	200000d4 	.word	0x200000d4

08008618 <free>:
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <free+0xc>)
 800861a:	4601      	mov	r1, r0
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	f001 bfb5 	b.w	800a58c <_free_r>
 8008622:	bf00      	nop
 8008624:	200000d4 	.word	0x200000d4

08008628 <_malloc_r>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	f101 050b 	add.w	r5, r1, #11
 8008630:	2d16      	cmp	r5, #22
 8008632:	b083      	sub	sp, #12
 8008634:	4606      	mov	r6, r0
 8008636:	d823      	bhi.n	8008680 <_malloc_r+0x58>
 8008638:	2910      	cmp	r1, #16
 800863a:	f200 80b9 	bhi.w	80087b0 <_malloc_r+0x188>
 800863e:	f000 fbdf 	bl	8008e00 <__malloc_lock>
 8008642:	2510      	movs	r5, #16
 8008644:	2318      	movs	r3, #24
 8008646:	2002      	movs	r0, #2
 8008648:	4fc5      	ldr	r7, [pc, #788]	; (8008960 <_malloc_r+0x338>)
 800864a:	443b      	add	r3, r7
 800864c:	f1a3 0208 	sub.w	r2, r3, #8
 8008650:	685c      	ldr	r4, [r3, #4]
 8008652:	4294      	cmp	r4, r2
 8008654:	f000 8166 	beq.w	8008924 <_malloc_r+0x2fc>
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	4423      	add	r3, r4
 8008660:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	60e9      	str	r1, [r5, #12]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	608d      	str	r5, [r1, #8]
 800866e:	4630      	mov	r0, r6
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	f000 fbcb 	bl	8008e0c <__malloc_unlock>
 8008676:	3408      	adds	r4, #8
 8008678:	4620      	mov	r0, r4
 800867a:	b003      	add	sp, #12
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	f035 0507 	bics.w	r5, r5, #7
 8008684:	f100 8094 	bmi.w	80087b0 <_malloc_r+0x188>
 8008688:	42a9      	cmp	r1, r5
 800868a:	f200 8091 	bhi.w	80087b0 <_malloc_r+0x188>
 800868e:	f000 fbb7 	bl	8008e00 <__malloc_lock>
 8008692:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008696:	f0c0 8183 	bcc.w	80089a0 <_malloc_r+0x378>
 800869a:	0a6b      	lsrs	r3, r5, #9
 800869c:	f000 808f 	beq.w	80087be <_malloc_r+0x196>
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	f200 8146 	bhi.w	8008932 <_malloc_r+0x30a>
 80086a6:	09ab      	lsrs	r3, r5, #6
 80086a8:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80086ac:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80086b0:	00c3      	lsls	r3, r0, #3
 80086b2:	4fab      	ldr	r7, [pc, #684]	; (8008960 <_malloc_r+0x338>)
 80086b4:	443b      	add	r3, r7
 80086b6:	f1a3 0108 	sub.w	r1, r3, #8
 80086ba:	685c      	ldr	r4, [r3, #4]
 80086bc:	42a1      	cmp	r1, r4
 80086be:	d106      	bne.n	80086ce <_malloc_r+0xa6>
 80086c0:	e00c      	b.n	80086dc <_malloc_r+0xb4>
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	f280 811d 	bge.w	8008902 <_malloc_r+0x2da>
 80086c8:	68e4      	ldr	r4, [r4, #12]
 80086ca:	42a1      	cmp	r1, r4
 80086cc:	d006      	beq.n	80086dc <_malloc_r+0xb4>
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	1b5a      	subs	r2, r3, r5
 80086d6:	2a0f      	cmp	r2, #15
 80086d8:	ddf3      	ble.n	80086c2 <_malloc_r+0x9a>
 80086da:	4660      	mov	r0, ip
 80086dc:	693c      	ldr	r4, [r7, #16]
 80086de:	f8df c294 	ldr.w	ip, [pc, #660]	; 8008974 <_malloc_r+0x34c>
 80086e2:	4564      	cmp	r4, ip
 80086e4:	d071      	beq.n	80087ca <_malloc_r+0x1a2>
 80086e6:	6863      	ldr	r3, [r4, #4]
 80086e8:	f023 0303 	bic.w	r3, r3, #3
 80086ec:	1b5a      	subs	r2, r3, r5
 80086ee:	2a0f      	cmp	r2, #15
 80086f0:	f300 8144 	bgt.w	800897c <_malloc_r+0x354>
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 80086fa:	f280 8126 	bge.w	800894a <_malloc_r+0x322>
 80086fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008702:	f080 8169 	bcs.w	80089d8 <_malloc_r+0x3b0>
 8008706:	08db      	lsrs	r3, r3, #3
 8008708:	1c59      	adds	r1, r3, #1
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 8008710:	f8c4 8008 	str.w	r8, [r4, #8]
 8008714:	f04f 0e01 	mov.w	lr, #1
 8008718:	109b      	asrs	r3, r3, #2
 800871a:	fa0e f303 	lsl.w	r3, lr, r3
 800871e:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 8008722:	4313      	orrs	r3, r2
 8008724:	f1ae 0208 	sub.w	r2, lr, #8
 8008728:	60e2      	str	r2, [r4, #12]
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 8008730:	f8c8 400c 	str.w	r4, [r8, #12]
 8008734:	1082      	asrs	r2, r0, #2
 8008736:	2401      	movs	r4, #1
 8008738:	4094      	lsls	r4, r2
 800873a:	429c      	cmp	r4, r3
 800873c:	d84b      	bhi.n	80087d6 <_malloc_r+0x1ae>
 800873e:	421c      	tst	r4, r3
 8008740:	d106      	bne.n	8008750 <_malloc_r+0x128>
 8008742:	f020 0003 	bic.w	r0, r0, #3
 8008746:	0064      	lsls	r4, r4, #1
 8008748:	421c      	tst	r4, r3
 800874a:	f100 0004 	add.w	r0, r0, #4
 800874e:	d0fa      	beq.n	8008746 <_malloc_r+0x11e>
 8008750:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8008754:	46ce      	mov	lr, r9
 8008756:	4680      	mov	r8, r0
 8008758:	f8de 300c 	ldr.w	r3, [lr, #12]
 800875c:	459e      	cmp	lr, r3
 800875e:	d107      	bne.n	8008770 <_malloc_r+0x148>
 8008760:	e122      	b.n	80089a8 <_malloc_r+0x380>
 8008762:	2a00      	cmp	r2, #0
 8008764:	f280 8129 	bge.w	80089ba <_malloc_r+0x392>
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	459e      	cmp	lr, r3
 800876c:	f000 811c 	beq.w	80089a8 <_malloc_r+0x380>
 8008770:	6859      	ldr	r1, [r3, #4]
 8008772:	f021 0103 	bic.w	r1, r1, #3
 8008776:	1b4a      	subs	r2, r1, r5
 8008778:	2a0f      	cmp	r2, #15
 800877a:	ddf2      	ble.n	8008762 <_malloc_r+0x13a>
 800877c:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8008780:	195c      	adds	r4, r3, r5
 8008782:	f045 0501 	orr.w	r5, r5, #1
 8008786:	605d      	str	r5, [r3, #4]
 8008788:	f042 0501 	orr.w	r5, r2, #1
 800878c:	f8c8 e00c 	str.w	lr, [r8, #12]
 8008790:	4630      	mov	r0, r6
 8008792:	f8ce 8008 	str.w	r8, [lr, #8]
 8008796:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800879a:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800879e:	6065      	str	r5, [r4, #4]
 80087a0:	505a      	str	r2, [r3, r1]
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	f000 fb32 	bl	8008e0c <__malloc_unlock>
 80087a8:	9b01      	ldr	r3, [sp, #4]
 80087aa:	f103 0408 	add.w	r4, r3, #8
 80087ae:	e763      	b.n	8008678 <_malloc_r+0x50>
 80087b0:	2400      	movs	r4, #0
 80087b2:	230c      	movs	r3, #12
 80087b4:	4620      	mov	r0, r4
 80087b6:	6033      	str	r3, [r6, #0]
 80087b8:	b003      	add	sp, #12
 80087ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087c2:	2040      	movs	r0, #64	; 0x40
 80087c4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80087c8:	e773      	b.n	80086b2 <_malloc_r+0x8a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	1082      	asrs	r2, r0, #2
 80087ce:	2401      	movs	r4, #1
 80087d0:	4094      	lsls	r4, r2
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d9b3      	bls.n	800873e <_malloc_r+0x116>
 80087d6:	68bc      	ldr	r4, [r7, #8]
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	f023 0903 	bic.w	r9, r3, #3
 80087de:	45a9      	cmp	r9, r5
 80087e0:	d303      	bcc.n	80087ea <_malloc_r+0x1c2>
 80087e2:	eba9 0305 	sub.w	r3, r9, r5
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	dc7b      	bgt.n	80088e2 <_malloc_r+0x2ba>
 80087ea:	4b5e      	ldr	r3, [pc, #376]	; (8008964 <_malloc_r+0x33c>)
 80087ec:	f8df a188 	ldr.w	sl, [pc, #392]	; 8008978 <_malloc_r+0x350>
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	f8da 3000 	ldr.w	r3, [sl]
 80087f6:	3301      	adds	r3, #1
 80087f8:	eb05 0802 	add.w	r8, r5, r2
 80087fc:	f000 8148 	beq.w	8008a90 <_malloc_r+0x468>
 8008800:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8008804:	f108 080f 	add.w	r8, r8, #15
 8008808:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 800880c:	f028 080f 	bic.w	r8, r8, #15
 8008810:	4641      	mov	r1, r8
 8008812:	4630      	mov	r0, r6
 8008814:	f000 fb00 	bl	8008e18 <_sbrk_r>
 8008818:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800881c:	4683      	mov	fp, r0
 800881e:	f000 8104 	beq.w	8008a2a <_malloc_r+0x402>
 8008822:	eb04 0009 	add.w	r0, r4, r9
 8008826:	4558      	cmp	r0, fp
 8008828:	f200 80fd 	bhi.w	8008a26 <_malloc_r+0x3fe>
 800882c:	4a4e      	ldr	r2, [pc, #312]	; (8008968 <_malloc_r+0x340>)
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	4443      	add	r3, r8
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	f000 814d 	beq.w	8008ad2 <_malloc_r+0x4aa>
 8008838:	f8da 1000 	ldr.w	r1, [sl]
 800883c:	3101      	adds	r1, #1
 800883e:	bf1b      	ittet	ne
 8008840:	ebab 0000 	subne.w	r0, fp, r0
 8008844:	181b      	addne	r3, r3, r0
 8008846:	f8ca b000 	streq.w	fp, [sl]
 800884a:	6013      	strne	r3, [r2, #0]
 800884c:	f01b 0307 	ands.w	r3, fp, #7
 8008850:	f000 8134 	beq.w	8008abc <_malloc_r+0x494>
 8008854:	f1c3 0108 	rsb	r1, r3, #8
 8008858:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800885c:	448b      	add	fp, r1
 800885e:	3308      	adds	r3, #8
 8008860:	44d8      	add	r8, fp
 8008862:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8008866:	eba3 0808 	sub.w	r8, r3, r8
 800886a:	4641      	mov	r1, r8
 800886c:	4630      	mov	r0, r6
 800886e:	9201      	str	r2, [sp, #4]
 8008870:	f000 fad2 	bl	8008e18 <_sbrk_r>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	9a01      	ldr	r2, [sp, #4]
 8008878:	f000 8146 	beq.w	8008b08 <_malloc_r+0x4e0>
 800887c:	eba0 010b 	sub.w	r1, r0, fp
 8008880:	4441      	add	r1, r8
 8008882:	f041 0101 	orr.w	r1, r1, #1
 8008886:	6813      	ldr	r3, [r2, #0]
 8008888:	f8c7 b008 	str.w	fp, [r7, #8]
 800888c:	4443      	add	r3, r8
 800888e:	42bc      	cmp	r4, r7
 8008890:	f8cb 1004 	str.w	r1, [fp, #4]
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	d015      	beq.n	80088c4 <_malloc_r+0x29c>
 8008898:	f1b9 0f0f 	cmp.w	r9, #15
 800889c:	f240 8130 	bls.w	8008b00 <_malloc_r+0x4d8>
 80088a0:	6860      	ldr	r0, [r4, #4]
 80088a2:	f1a9 010c 	sub.w	r1, r9, #12
 80088a6:	f021 0107 	bic.w	r1, r1, #7
 80088aa:	f000 0001 	and.w	r0, r0, #1
 80088ae:	eb04 0c01 	add.w	ip, r4, r1
 80088b2:	4308      	orrs	r0, r1
 80088b4:	f04f 0e05 	mov.w	lr, #5
 80088b8:	290f      	cmp	r1, #15
 80088ba:	6060      	str	r0, [r4, #4]
 80088bc:	e9cc ee01 	strd	lr, lr, [ip, #4]
 80088c0:	f200 813a 	bhi.w	8008b38 <_malloc_r+0x510>
 80088c4:	4a29      	ldr	r2, [pc, #164]	; (800896c <_malloc_r+0x344>)
 80088c6:	482a      	ldr	r0, [pc, #168]	; (8008970 <_malloc_r+0x348>)
 80088c8:	6811      	ldr	r1, [r2, #0]
 80088ca:	68bc      	ldr	r4, [r7, #8]
 80088cc:	428b      	cmp	r3, r1
 80088ce:	6801      	ldr	r1, [r0, #0]
 80088d0:	bf88      	it	hi
 80088d2:	6013      	strhi	r3, [r2, #0]
 80088d4:	6862      	ldr	r2, [r4, #4]
 80088d6:	428b      	cmp	r3, r1
 80088d8:	f022 0203 	bic.w	r2, r2, #3
 80088dc:	bf88      	it	hi
 80088de:	6003      	strhi	r3, [r0, #0]
 80088e0:	e0a7      	b.n	8008a32 <_malloc_r+0x40a>
 80088e2:	1962      	adds	r2, r4, r5
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	f045 0501 	orr.w	r5, r5, #1
 80088ec:	6065      	str	r5, [r4, #4]
 80088ee:	4630      	mov	r0, r6
 80088f0:	60ba      	str	r2, [r7, #8]
 80088f2:	6053      	str	r3, [r2, #4]
 80088f4:	f000 fa8a 	bl	8008e0c <__malloc_unlock>
 80088f8:	3408      	adds	r4, #8
 80088fa:	4620      	mov	r0, r4
 80088fc:	b003      	add	sp, #12
 80088fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008902:	4423      	add	r3, r4
 8008904:	68e1      	ldr	r1, [r4, #12]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	68a5      	ldr	r5, [r4, #8]
 800890a:	f042 0201 	orr.w	r2, r2, #1
 800890e:	60e9      	str	r1, [r5, #12]
 8008910:	4630      	mov	r0, r6
 8008912:	608d      	str	r5, [r1, #8]
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	f000 fa79 	bl	8008e0c <__malloc_unlock>
 800891a:	3408      	adds	r4, #8
 800891c:	4620      	mov	r0, r4
 800891e:	b003      	add	sp, #12
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	68dc      	ldr	r4, [r3, #12]
 8008926:	42a3      	cmp	r3, r4
 8008928:	bf08      	it	eq
 800892a:	3002      	addeq	r0, #2
 800892c:	f43f aed6 	beq.w	80086dc <_malloc_r+0xb4>
 8008930:	e692      	b.n	8008658 <_malloc_r+0x30>
 8008932:	2b14      	cmp	r3, #20
 8008934:	d971      	bls.n	8008a1a <_malloc_r+0x3f2>
 8008936:	2b54      	cmp	r3, #84	; 0x54
 8008938:	f200 80ad 	bhi.w	8008a96 <_malloc_r+0x46e>
 800893c:	0b2b      	lsrs	r3, r5, #12
 800893e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8008942:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8008946:	00c3      	lsls	r3, r0, #3
 8008948:	e6b3      	b.n	80086b2 <_malloc_r+0x8a>
 800894a:	4423      	add	r3, r4
 800894c:	4630      	mov	r0, r6
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	f042 0201 	orr.w	r2, r2, #1
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	3408      	adds	r4, #8
 8008958:	f000 fa58 	bl	8008e0c <__malloc_unlock>
 800895c:	e68c      	b.n	8008678 <_malloc_r+0x50>
 800895e:	bf00      	nop
 8008960:	20000500 	.word	0x20000500
 8008964:	20000b58 	.word	0x20000b58
 8008968:	20000b28 	.word	0x20000b28
 800896c:	20000b50 	.word	0x20000b50
 8008970:	20000b54 	.word	0x20000b54
 8008974:	20000508 	.word	0x20000508
 8008978:	20000908 	.word	0x20000908
 800897c:	1961      	adds	r1, r4, r5
 800897e:	f045 0e01 	orr.w	lr, r5, #1
 8008982:	f042 0501 	orr.w	r5, r2, #1
 8008986:	f8c4 e004 	str.w	lr, [r4, #4]
 800898a:	4630      	mov	r0, r6
 800898c:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8008990:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8008994:	604d      	str	r5, [r1, #4]
 8008996:	50e2      	str	r2, [r4, r3]
 8008998:	f000 fa38 	bl	8008e0c <__malloc_unlock>
 800899c:	3408      	adds	r4, #8
 800899e:	e66b      	b.n	8008678 <_malloc_r+0x50>
 80089a0:	08e8      	lsrs	r0, r5, #3
 80089a2:	f105 0308 	add.w	r3, r5, #8
 80089a6:	e64f      	b.n	8008648 <_malloc_r+0x20>
 80089a8:	f108 0801 	add.w	r8, r8, #1
 80089ac:	f018 0f03 	tst.w	r8, #3
 80089b0:	f10e 0e08 	add.w	lr, lr, #8
 80089b4:	f47f aed0 	bne.w	8008758 <_malloc_r+0x130>
 80089b8:	e052      	b.n	8008a60 <_malloc_r+0x438>
 80089ba:	4419      	add	r1, r3
 80089bc:	461c      	mov	r4, r3
 80089be:	684a      	ldr	r2, [r1, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	604a      	str	r2, [r1, #4]
 80089cc:	4630      	mov	r0, r6
 80089ce:	60eb      	str	r3, [r5, #12]
 80089d0:	609d      	str	r5, [r3, #8]
 80089d2:	f000 fa1b 	bl	8008e0c <__malloc_unlock>
 80089d6:	e64f      	b.n	8008678 <_malloc_r+0x50>
 80089d8:	0a5a      	lsrs	r2, r3, #9
 80089da:	2a04      	cmp	r2, #4
 80089dc:	d935      	bls.n	8008a4a <_malloc_r+0x422>
 80089de:	2a14      	cmp	r2, #20
 80089e0:	d86f      	bhi.n	8008ac2 <_malloc_r+0x49a>
 80089e2:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80089e6:	00c9      	lsls	r1, r1, #3
 80089e8:	325b      	adds	r2, #91	; 0x5b
 80089ea:	eb07 0e01 	add.w	lr, r7, r1
 80089ee:	5879      	ldr	r1, [r7, r1]
 80089f0:	f1ae 0e08 	sub.w	lr, lr, #8
 80089f4:	458e      	cmp	lr, r1
 80089f6:	d058      	beq.n	8008aaa <_malloc_r+0x482>
 80089f8:	684a      	ldr	r2, [r1, #4]
 80089fa:	f022 0203 	bic.w	r2, r2, #3
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d902      	bls.n	8008a08 <_malloc_r+0x3e0>
 8008a02:	6889      	ldr	r1, [r1, #8]
 8008a04:	458e      	cmp	lr, r1
 8008a06:	d1f7      	bne.n	80089f8 <_malloc_r+0x3d0>
 8008a08:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8008a12:	f8ce 4008 	str.w	r4, [lr, #8]
 8008a16:	60cc      	str	r4, [r1, #12]
 8008a18:	e68c      	b.n	8008734 <_malloc_r+0x10c>
 8008a1a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8008a1e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8008a22:	00c3      	lsls	r3, r0, #3
 8008a24:	e645      	b.n	80086b2 <_malloc_r+0x8a>
 8008a26:	42bc      	cmp	r4, r7
 8008a28:	d072      	beq.n	8008b10 <_malloc_r+0x4e8>
 8008a2a:	68bc      	ldr	r4, [r7, #8]
 8008a2c:	6862      	ldr	r2, [r4, #4]
 8008a2e:	f022 0203 	bic.w	r2, r2, #3
 8008a32:	4295      	cmp	r5, r2
 8008a34:	eba2 0305 	sub.w	r3, r2, r5
 8008a38:	d802      	bhi.n	8008a40 <_malloc_r+0x418>
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	f73f af51 	bgt.w	80088e2 <_malloc_r+0x2ba>
 8008a40:	4630      	mov	r0, r6
 8008a42:	f000 f9e3 	bl	8008e0c <__malloc_unlock>
 8008a46:	2400      	movs	r4, #0
 8008a48:	e616      	b.n	8008678 <_malloc_r+0x50>
 8008a4a:	099a      	lsrs	r2, r3, #6
 8008a4c:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8008a50:	00c9      	lsls	r1, r1, #3
 8008a52:	3238      	adds	r2, #56	; 0x38
 8008a54:	e7c9      	b.n	80089ea <_malloc_r+0x3c2>
 8008a56:	f8d9 9000 	ldr.w	r9, [r9]
 8008a5a:	4599      	cmp	r9, r3
 8008a5c:	f040 8083 	bne.w	8008b66 <_malloc_r+0x53e>
 8008a60:	f010 0f03 	tst.w	r0, #3
 8008a64:	f1a9 0308 	sub.w	r3, r9, #8
 8008a68:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8008a6c:	d1f3      	bne.n	8008a56 <_malloc_r+0x42e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	ea23 0304 	bic.w	r3, r3, r4
 8008a74:	607b      	str	r3, [r7, #4]
 8008a76:	0064      	lsls	r4, r4, #1
 8008a78:	429c      	cmp	r4, r3
 8008a7a:	f63f aeac 	bhi.w	80087d6 <_malloc_r+0x1ae>
 8008a7e:	b91c      	cbnz	r4, 8008a88 <_malloc_r+0x460>
 8008a80:	e6a9      	b.n	80087d6 <_malloc_r+0x1ae>
 8008a82:	0064      	lsls	r4, r4, #1
 8008a84:	f108 0804 	add.w	r8, r8, #4
 8008a88:	421c      	tst	r4, r3
 8008a8a:	d0fa      	beq.n	8008a82 <_malloc_r+0x45a>
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	e65f      	b.n	8008750 <_malloc_r+0x128>
 8008a90:	f108 0810 	add.w	r8, r8, #16
 8008a94:	e6bc      	b.n	8008810 <_malloc_r+0x1e8>
 8008a96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008a9a:	d826      	bhi.n	8008aea <_malloc_r+0x4c2>
 8008a9c:	0beb      	lsrs	r3, r5, #15
 8008a9e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008aa2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8008aa6:	00c3      	lsls	r3, r0, #3
 8008aa8:	e603      	b.n	80086b2 <_malloc_r+0x8a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	1092      	asrs	r2, r2, #2
 8008aae:	f04f 0801 	mov.w	r8, #1
 8008ab2:	fa08 f202 	lsl.w	r2, r8, r2
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	e7a8      	b.n	8008a0e <_malloc_r+0x3e6>
 8008abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ac0:	e6ce      	b.n	8008860 <_malloc_r+0x238>
 8008ac2:	2a54      	cmp	r2, #84	; 0x54
 8008ac4:	d829      	bhi.n	8008b1a <_malloc_r+0x4f2>
 8008ac6:	0b1a      	lsrs	r2, r3, #12
 8008ac8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8008acc:	00c9      	lsls	r1, r1, #3
 8008ace:	326e      	adds	r2, #110	; 0x6e
 8008ad0:	e78b      	b.n	80089ea <_malloc_r+0x3c2>
 8008ad2:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	f47f aeae 	bne.w	8008838 <_malloc_r+0x210>
 8008adc:	eb09 0208 	add.w	r2, r9, r8
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	604a      	str	r2, [r1, #4]
 8008ae8:	e6ec      	b.n	80088c4 <_malloc_r+0x29c>
 8008aea:	f240 5254 	movw	r2, #1364	; 0x554
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d81c      	bhi.n	8008b2c <_malloc_r+0x504>
 8008af2:	0cab      	lsrs	r3, r5, #18
 8008af4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8008af8:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8008afc:	00c3      	lsls	r3, r0, #3
 8008afe:	e5d8      	b.n	80086b2 <_malloc_r+0x8a>
 8008b00:	2301      	movs	r3, #1
 8008b02:	f8cb 3004 	str.w	r3, [fp, #4]
 8008b06:	e79b      	b.n	8008a40 <_malloc_r+0x418>
 8008b08:	2101      	movs	r1, #1
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	e6ba      	b.n	8008886 <_malloc_r+0x25e>
 8008b10:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <_malloc_r+0x544>)
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	4443      	add	r3, r8
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	e68e      	b.n	8008838 <_malloc_r+0x210>
 8008b1a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008b1e:	d814      	bhi.n	8008b4a <_malloc_r+0x522>
 8008b20:	0bda      	lsrs	r2, r3, #15
 8008b22:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8008b26:	00c9      	lsls	r1, r1, #3
 8008b28:	3277      	adds	r2, #119	; 0x77
 8008b2a:	e75e      	b.n	80089ea <_malloc_r+0x3c2>
 8008b2c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8008b30:	207f      	movs	r0, #127	; 0x7f
 8008b32:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8008b36:	e5bc      	b.n	80086b2 <_malloc_r+0x8a>
 8008b38:	f104 0108 	add.w	r1, r4, #8
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	f001 fd24 	bl	800a58c <_free_r>
 8008b44:	9a01      	ldr	r2, [sp, #4]
 8008b46:	6813      	ldr	r3, [r2, #0]
 8008b48:	e6bc      	b.n	80088c4 <_malloc_r+0x29c>
 8008b4a:	f240 5154 	movw	r1, #1364	; 0x554
 8008b4e:	428a      	cmp	r2, r1
 8008b50:	d805      	bhi.n	8008b5e <_malloc_r+0x536>
 8008b52:	0c9a      	lsrs	r2, r3, #18
 8008b54:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8008b58:	00c9      	lsls	r1, r1, #3
 8008b5a:	327c      	adds	r2, #124	; 0x7c
 8008b5c:	e745      	b.n	80089ea <_malloc_r+0x3c2>
 8008b5e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8008b62:	227e      	movs	r2, #126	; 0x7e
 8008b64:	e741      	b.n	80089ea <_malloc_r+0x3c2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	e785      	b.n	8008a76 <_malloc_r+0x44e>
 8008b6a:	bf00      	nop
 8008b6c:	20000b28 	.word	0x20000b28

08008b70 <memcpy>:
 8008b70:	4684      	mov	ip, r0
 8008b72:	ea41 0300 	orr.w	r3, r1, r0
 8008b76:	f013 0303 	ands.w	r3, r3, #3
 8008b7a:	d16d      	bne.n	8008c58 <memcpy+0xe8>
 8008b7c:	3a40      	subs	r2, #64	; 0x40
 8008b7e:	d341      	bcc.n	8008c04 <memcpy+0x94>
 8008b80:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b84:	f840 3b04 	str.w	r3, [r0], #4
 8008b88:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b8c:	f840 3b04 	str.w	r3, [r0], #4
 8008b90:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b94:	f840 3b04 	str.w	r3, [r0], #4
 8008b98:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b9c:	f840 3b04 	str.w	r3, [r0], #4
 8008ba0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008ba4:	f840 3b04 	str.w	r3, [r0], #4
 8008ba8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bac:	f840 3b04 	str.w	r3, [r0], #4
 8008bb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bb4:	f840 3b04 	str.w	r3, [r0], #4
 8008bb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bbc:	f840 3b04 	str.w	r3, [r0], #4
 8008bc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bc4:	f840 3b04 	str.w	r3, [r0], #4
 8008bc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bcc:	f840 3b04 	str.w	r3, [r0], #4
 8008bd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bd4:	f840 3b04 	str.w	r3, [r0], #4
 8008bd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bdc:	f840 3b04 	str.w	r3, [r0], #4
 8008be0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008be4:	f840 3b04 	str.w	r3, [r0], #4
 8008be8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bec:	f840 3b04 	str.w	r3, [r0], #4
 8008bf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bf4:	f840 3b04 	str.w	r3, [r0], #4
 8008bf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bfc:	f840 3b04 	str.w	r3, [r0], #4
 8008c00:	3a40      	subs	r2, #64	; 0x40
 8008c02:	d2bd      	bcs.n	8008b80 <memcpy+0x10>
 8008c04:	3230      	adds	r2, #48	; 0x30
 8008c06:	d311      	bcc.n	8008c2c <memcpy+0xbc>
 8008c08:	f851 3b04 	ldr.w	r3, [r1], #4
 8008c0c:	f840 3b04 	str.w	r3, [r0], #4
 8008c10:	f851 3b04 	ldr.w	r3, [r1], #4
 8008c14:	f840 3b04 	str.w	r3, [r0], #4
 8008c18:	f851 3b04 	ldr.w	r3, [r1], #4
 8008c1c:	f840 3b04 	str.w	r3, [r0], #4
 8008c20:	f851 3b04 	ldr.w	r3, [r1], #4
 8008c24:	f840 3b04 	str.w	r3, [r0], #4
 8008c28:	3a10      	subs	r2, #16
 8008c2a:	d2ed      	bcs.n	8008c08 <memcpy+0x98>
 8008c2c:	320c      	adds	r2, #12
 8008c2e:	d305      	bcc.n	8008c3c <memcpy+0xcc>
 8008c30:	f851 3b04 	ldr.w	r3, [r1], #4
 8008c34:	f840 3b04 	str.w	r3, [r0], #4
 8008c38:	3a04      	subs	r2, #4
 8008c3a:	d2f9      	bcs.n	8008c30 <memcpy+0xc0>
 8008c3c:	3204      	adds	r2, #4
 8008c3e:	d008      	beq.n	8008c52 <memcpy+0xe2>
 8008c40:	07d2      	lsls	r2, r2, #31
 8008c42:	bf1c      	itt	ne
 8008c44:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8008c48:	f800 3b01 	strbne.w	r3, [r0], #1
 8008c4c:	d301      	bcc.n	8008c52 <memcpy+0xe2>
 8008c4e:	880b      	ldrh	r3, [r1, #0]
 8008c50:	8003      	strh	r3, [r0, #0]
 8008c52:	4660      	mov	r0, ip
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	2a08      	cmp	r2, #8
 8008c5a:	d313      	bcc.n	8008c84 <memcpy+0x114>
 8008c5c:	078b      	lsls	r3, r1, #30
 8008c5e:	d08d      	beq.n	8008b7c <memcpy+0xc>
 8008c60:	f010 0303 	ands.w	r3, r0, #3
 8008c64:	d08a      	beq.n	8008b7c <memcpy+0xc>
 8008c66:	f1c3 0304 	rsb	r3, r3, #4
 8008c6a:	1ad2      	subs	r2, r2, r3
 8008c6c:	07db      	lsls	r3, r3, #31
 8008c6e:	bf1c      	itt	ne
 8008c70:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8008c74:	f800 3b01 	strbne.w	r3, [r0], #1
 8008c78:	d380      	bcc.n	8008b7c <memcpy+0xc>
 8008c7a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008c7e:	f820 3b02 	strh.w	r3, [r0], #2
 8008c82:	e77b      	b.n	8008b7c <memcpy+0xc>
 8008c84:	3a04      	subs	r2, #4
 8008c86:	d3d9      	bcc.n	8008c3c <memcpy+0xcc>
 8008c88:	3a01      	subs	r2, #1
 8008c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c8e:	f800 3b01 	strb.w	r3, [r0], #1
 8008c92:	d2f9      	bcs.n	8008c88 <memcpy+0x118>
 8008c94:	780b      	ldrb	r3, [r1, #0]
 8008c96:	7003      	strb	r3, [r0, #0]
 8008c98:	784b      	ldrb	r3, [r1, #1]
 8008c9a:	7043      	strb	r3, [r0, #1]
 8008c9c:	788b      	ldrb	r3, [r1, #2]
 8008c9e:	7083      	strb	r3, [r0, #2]
 8008ca0:	4660      	mov	r0, ip
 8008ca2:	4770      	bx	lr

08008ca4 <memmove>:
 8008ca4:	4288      	cmp	r0, r1
 8008ca6:	b4f0      	push	{r4, r5, r6, r7}
 8008ca8:	d90d      	bls.n	8008cc6 <memmove+0x22>
 8008caa:	188b      	adds	r3, r1, r2
 8008cac:	4283      	cmp	r3, r0
 8008cae:	d90a      	bls.n	8008cc6 <memmove+0x22>
 8008cb0:	1884      	adds	r4, r0, r2
 8008cb2:	b132      	cbz	r2, 8008cc2 <memmove+0x1e>
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cbe:	4299      	cmp	r1, r3
 8008cc0:	d1f9      	bne.n	8008cb6 <memmove+0x12>
 8008cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8008cc4:	4770      	bx	lr
 8008cc6:	2a0f      	cmp	r2, #15
 8008cc8:	d949      	bls.n	8008d5e <memmove+0xba>
 8008cca:	ea40 0301 	orr.w	r3, r0, r1
 8008cce:	079b      	lsls	r3, r3, #30
 8008cd0:	d147      	bne.n	8008d62 <memmove+0xbe>
 8008cd2:	f1a2 0310 	sub.w	r3, r2, #16
 8008cd6:	091b      	lsrs	r3, r3, #4
 8008cd8:	f101 0720 	add.w	r7, r1, #32
 8008cdc:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 8008ce0:	f101 0410 	add.w	r4, r1, #16
 8008ce4:	f100 0510 	add.w	r5, r0, #16
 8008ce8:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8008cec:	f845 6c10 	str.w	r6, [r5, #-16]
 8008cf0:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8008cf4:	f845 6c0c 	str.w	r6, [r5, #-12]
 8008cf8:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8008cfc:	f845 6c08 	str.w	r6, [r5, #-8]
 8008d00:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8008d04:	f845 6c04 	str.w	r6, [r5, #-4]
 8008d08:	3410      	adds	r4, #16
 8008d0a:	42bc      	cmp	r4, r7
 8008d0c:	f105 0510 	add.w	r5, r5, #16
 8008d10:	d1ea      	bne.n	8008ce8 <memmove+0x44>
 8008d12:	3301      	adds	r3, #1
 8008d14:	f002 050f 	and.w	r5, r2, #15
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	2d03      	cmp	r5, #3
 8008d1c:	4419      	add	r1, r3
 8008d1e:	4403      	add	r3, r0
 8008d20:	d921      	bls.n	8008d66 <memmove+0xc2>
 8008d22:	1f1f      	subs	r7, r3, #4
 8008d24:	460e      	mov	r6, r1
 8008d26:	462c      	mov	r4, r5
 8008d28:	3c04      	subs	r4, #4
 8008d2a:	f856 cb04 	ldr.w	ip, [r6], #4
 8008d2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d32:	2c03      	cmp	r4, #3
 8008d34:	d8f8      	bhi.n	8008d28 <memmove+0x84>
 8008d36:	1f2c      	subs	r4, r5, #4
 8008d38:	f024 0403 	bic.w	r4, r4, #3
 8008d3c:	3404      	adds	r4, #4
 8008d3e:	4423      	add	r3, r4
 8008d40:	4421      	add	r1, r4
 8008d42:	f002 0203 	and.w	r2, r2, #3
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	d0bb      	beq.n	8008cc2 <memmove+0x1e>
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d56:	4291      	cmp	r1, r2
 8008d58:	d1f9      	bne.n	8008d4e <memmove+0xaa>
 8008d5a:	bcf0      	pop	{r4, r5, r6, r7}
 8008d5c:	4770      	bx	lr
 8008d5e:	4603      	mov	r3, r0
 8008d60:	e7f1      	b.n	8008d46 <memmove+0xa2>
 8008d62:	4603      	mov	r3, r0
 8008d64:	e7f1      	b.n	8008d4a <memmove+0xa6>
 8008d66:	462a      	mov	r2, r5
 8008d68:	e7ed      	b.n	8008d46 <memmove+0xa2>
 8008d6a:	bf00      	nop

08008d6c <memset>:
 8008d6c:	b4f0      	push	{r4, r5, r6, r7}
 8008d6e:	0786      	lsls	r6, r0, #30
 8008d70:	d043      	beq.n	8008dfa <memset+0x8e>
 8008d72:	1e54      	subs	r4, r2, #1
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	d03e      	beq.n	8008df6 <memset+0x8a>
 8008d78:	b2ca      	uxtb	r2, r1
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	e002      	b.n	8008d84 <memset+0x18>
 8008d7e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8008d82:	d338      	bcc.n	8008df6 <memset+0x8a>
 8008d84:	f803 2b01 	strb.w	r2, [r3], #1
 8008d88:	079d      	lsls	r5, r3, #30
 8008d8a:	d1f8      	bne.n	8008d7e <memset+0x12>
 8008d8c:	2c03      	cmp	r4, #3
 8008d8e:	d92b      	bls.n	8008de8 <memset+0x7c>
 8008d90:	b2cd      	uxtb	r5, r1
 8008d92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008d96:	2c0f      	cmp	r4, #15
 8008d98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008d9c:	d916      	bls.n	8008dcc <memset+0x60>
 8008d9e:	f1a4 0710 	sub.w	r7, r4, #16
 8008da2:	093f      	lsrs	r7, r7, #4
 8008da4:	f103 0620 	add.w	r6, r3, #32
 8008da8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8008dac:	f103 0210 	add.w	r2, r3, #16
 8008db0:	e942 5504 	strd	r5, r5, [r2, #-16]
 8008db4:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008db8:	3210      	adds	r2, #16
 8008dba:	42b2      	cmp	r2, r6
 8008dbc:	d1f8      	bne.n	8008db0 <memset+0x44>
 8008dbe:	f004 040f 	and.w	r4, r4, #15
 8008dc2:	3701      	adds	r7, #1
 8008dc4:	2c03      	cmp	r4, #3
 8008dc6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8008dca:	d90d      	bls.n	8008de8 <memset+0x7c>
 8008dcc:	461e      	mov	r6, r3
 8008dce:	4622      	mov	r2, r4
 8008dd0:	3a04      	subs	r2, #4
 8008dd2:	2a03      	cmp	r2, #3
 8008dd4:	f846 5b04 	str.w	r5, [r6], #4
 8008dd8:	d8fa      	bhi.n	8008dd0 <memset+0x64>
 8008dda:	1f22      	subs	r2, r4, #4
 8008ddc:	f022 0203 	bic.w	r2, r2, #3
 8008de0:	3204      	adds	r2, #4
 8008de2:	4413      	add	r3, r2
 8008de4:	f004 0403 	and.w	r4, r4, #3
 8008de8:	b12c      	cbz	r4, 8008df6 <memset+0x8a>
 8008dea:	b2c9      	uxtb	r1, r1
 8008dec:	441c      	add	r4, r3
 8008dee:	f803 1b01 	strb.w	r1, [r3], #1
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d1fb      	bne.n	8008dee <memset+0x82>
 8008df6:	bcf0      	pop	{r4, r5, r6, r7}
 8008df8:	4770      	bx	lr
 8008dfa:	4614      	mov	r4, r2
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	e7c5      	b.n	8008d8c <memset+0x20>

08008e00 <__malloc_lock>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__malloc_lock+0x8>)
 8008e02:	f001 beeb 	b.w	800abdc <__retarget_lock_acquire_recursive>
 8008e06:	bf00      	nop
 8008e08:	20001208 	.word	0x20001208

08008e0c <__malloc_unlock>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__malloc_unlock+0x8>)
 8008e0e:	f001 beed 	b.w	800abec <__retarget_lock_release_recursive>
 8008e12:	bf00      	nop
 8008e14:	20001208 	.word	0x20001208

08008e18 <_sbrk_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4c07      	ldr	r4, [pc, #28]	; (8008e38 <_sbrk_r+0x20>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4605      	mov	r5, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	f7fd fc7c 	bl	8006720 <_sbrk>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d000      	beq.n	8008e2e <_sbrk_r+0x16>
 8008e2c:	bd38      	pop	{r3, r4, r5, pc}
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0fb      	beq.n	8008e2c <_sbrk_r+0x14>
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	2000121c 	.word	0x2000121c

08008e3c <_init_signal_r.part.0>:
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	2180      	movs	r1, #128	; 0x80
 8008e40:	4604      	mov	r4, r0
 8008e42:	f7ff fbf1 	bl	8008628 <_malloc_r>
 8008e46:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 8008e4a:	b140      	cbz	r0, 8008e5e <_init_signal_r.part.0+0x22>
 8008e4c:	1f03      	subs	r3, r0, #4
 8008e4e:	2200      	movs	r2, #0
 8008e50:	307c      	adds	r0, #124	; 0x7c
 8008e52:	f843 2f04 	str.w	r2, [r3, #4]!
 8008e56:	4283      	cmp	r3, r0
 8008e58:	d1fb      	bne.n	8008e52 <_init_signal_r.part.0+0x16>
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <_init_signal_r>:
 8008e64:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8008e68:	b10b      	cbz	r3, 8008e6e <_init_signal_r+0xa>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	4770      	bx	lr
 8008e6e:	f7ff bfe5 	b.w	8008e3c <_init_signal_r.part.0>
 8008e72:	bf00      	nop

08008e74 <_signal_r>:
 8008e74:	291f      	cmp	r1, #31
 8008e76:	b570      	push	{r4, r5, r6, lr}
 8008e78:	4605      	mov	r5, r0
 8008e7a:	d809      	bhi.n	8008e90 <_signal_r+0x1c>
 8008e7c:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8008e80:	4616      	mov	r6, r2
 8008e82:	460c      	mov	r4, r1
 8008e84:	b14b      	cbz	r3, 8008e9a <_signal_r+0x26>
 8008e86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008e8a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	2216      	movs	r2, #22
 8008e92:	6002      	str	r2, [r0, #0]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e98:	bd70      	pop	{r4, r5, r6, pc}
 8008e9a:	f7ff ffcf 	bl	8008e3c <_init_signal_r.part.0>
 8008e9e:	b910      	cbnz	r0, 8008ea6 <_signal_r+0x32>
 8008ea0:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 8008ea4:	e7ef      	b.n	8008e86 <_signal_r+0x12>
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}

08008eac <_raise_r>:
 8008eac:	291f      	cmp	r1, #31
 8008eae:	b538      	push	{r3, r4, r5, lr}
 8008eb0:	d822      	bhi.n	8008ef8 <_raise_r+0x4c>
 8008eb2:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	b16b      	cbz	r3, 8008ed8 <_raise_r+0x2c>
 8008ebc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8008ec0:	b152      	cbz	r2, 8008ed8 <_raise_r+0x2c>
 8008ec2:	2a01      	cmp	r2, #1
 8008ec4:	d012      	beq.n	8008eec <_raise_r+0x40>
 8008ec6:	1c51      	adds	r1, r2, #1
 8008ec8:	d012      	beq.n	8008ef0 <_raise_r+0x44>
 8008eca:	2500      	movs	r5, #0
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8008ed2:	4790      	blx	r2
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 f875 	bl	8008fc8 <_getpid_r>
 8008ede:	4622      	mov	r2, r4
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee8:	f000 b85a 	b.w	8008fa0 <_kill_r>
 8008eec:	2000      	movs	r0, #0
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	2316      	movs	r3, #22
 8008ef2:	6003      	str	r3, [r0, #0]
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	2316      	movs	r3, #22
 8008efa:	6003      	str	r3, [r0, #0]
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	bf00      	nop

08008f04 <__sigtramp_r>:
 8008f04:	291f      	cmp	r1, #31
 8008f06:	d823      	bhi.n	8008f50 <__sigtramp_r+0x4c>
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8008f0e:	4605      	mov	r5, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	b183      	cbz	r3, 8008f36 <__sigtramp_r+0x32>
 8008f14:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8008f18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f1c:	b14a      	cbz	r2, 8008f32 <__sigtramp_r+0x2e>
 8008f1e:	1c51      	adds	r1, r2, #1
 8008f20:	d00f      	beq.n	8008f42 <__sigtramp_r+0x3e>
 8008f22:	2a01      	cmp	r2, #1
 8008f24:	d012      	beq.n	8008f4c <__sigtramp_r+0x48>
 8008f26:	2500      	movs	r5, #0
 8008f28:	4620      	mov	r0, r4
 8008f2a:	601d      	str	r5, [r3, #0]
 8008f2c:	4790      	blx	r2
 8008f2e:	4628      	mov	r0, r5
 8008f30:	bd38      	pop	{r3, r4, r5, pc}
 8008f32:	2001      	movs	r0, #1
 8008f34:	bd38      	pop	{r3, r4, r5, pc}
 8008f36:	f7ff ff81 	bl	8008e3c <_init_signal_r.part.0>
 8008f3a:	b920      	cbnz	r0, 8008f46 <__sigtramp_r+0x42>
 8008f3c:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 8008f40:	e7e8      	b.n	8008f14 <__sigtramp_r+0x10>
 8008f42:	2002      	movs	r0, #2
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	2003      	movs	r0, #3
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <raise>:
 8008f58:	4b02      	ldr	r3, [pc, #8]	; (8008f64 <raise+0xc>)
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f7ff bfa5 	b.w	8008eac <_raise_r>
 8008f62:	bf00      	nop
 8008f64:	200000d4 	.word	0x200000d4

08008f68 <signal>:
 8008f68:	4b02      	ldr	r3, [pc, #8]	; (8008f74 <signal+0xc>)
 8008f6a:	460a      	mov	r2, r1
 8008f6c:	4601      	mov	r1, r0
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	f7ff bf80 	b.w	8008e74 <_signal_r>
 8008f74:	200000d4 	.word	0x200000d4

08008f78 <_init_signal>:
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <_init_signal+0x14>)
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8008f80:	b10b      	cbz	r3, 8008f86 <_init_signal+0xe>
 8008f82:	2000      	movs	r0, #0
 8008f84:	4770      	bx	lr
 8008f86:	f7ff bf59 	b.w	8008e3c <_init_signal_r.part.0>
 8008f8a:	bf00      	nop
 8008f8c:	200000d4 	.word	0x200000d4

08008f90 <__sigtramp>:
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <__sigtramp+0xc>)
 8008f92:	4601      	mov	r1, r0
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f7ff bfb5 	b.w	8008f04 <__sigtramp_r>
 8008f9a:	bf00      	nop
 8008f9c:	200000d4 	.word	0x200000d4

08008fa0 <_kill_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4c07      	ldr	r4, [pc, #28]	; (8008fc4 <_kill_r+0x24>)
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	2300      	movs	r3, #0
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	f002 fe14 	bl	800bbdc <_kill>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d000      	beq.n	8008fba <_kill_r+0x1a>
 8008fb8:	bd38      	pop	{r3, r4, r5, pc}
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0fb      	beq.n	8008fb8 <_kill_r+0x18>
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	2000121c 	.word	0x2000121c

08008fc8 <_getpid_r>:
 8008fc8:	f002 bdf8 	b.w	800bbbc <_getpid>
	...

08009000 <strlen>:
 8009000:	f890 f000 	pld	[r0]
 8009004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8009008:	f020 0107 	bic.w	r1, r0, #7
 800900c:	f06f 0c00 	mvn.w	ip, #0
 8009010:	f010 0407 	ands.w	r4, r0, #7
 8009014:	f891 f020 	pld	[r1, #32]
 8009018:	f040 8049 	bne.w	80090ae <strlen+0xae>
 800901c:	f04f 0400 	mov.w	r4, #0
 8009020:	f06f 0007 	mvn.w	r0, #7
 8009024:	e9d1 2300 	ldrd	r2, r3, [r1]
 8009028:	f891 f040 	pld	[r1, #64]	; 0x40
 800902c:	f100 0008 	add.w	r0, r0, #8
 8009030:	fa82 f24c 	uadd8	r2, r2, ip
 8009034:	faa4 f28c 	sel	r2, r4, ip
 8009038:	fa83 f34c 	uadd8	r3, r3, ip
 800903c:	faa2 f38c 	sel	r3, r2, ip
 8009040:	bb4b      	cbnz	r3, 8009096 <strlen+0x96>
 8009042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8009046:	fa82 f24c 	uadd8	r2, r2, ip
 800904a:	f100 0008 	add.w	r0, r0, #8
 800904e:	faa4 f28c 	sel	r2, r4, ip
 8009052:	fa83 f34c 	uadd8	r3, r3, ip
 8009056:	faa2 f38c 	sel	r3, r2, ip
 800905a:	b9e3      	cbnz	r3, 8009096 <strlen+0x96>
 800905c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8009060:	fa82 f24c 	uadd8	r2, r2, ip
 8009064:	f100 0008 	add.w	r0, r0, #8
 8009068:	faa4 f28c 	sel	r2, r4, ip
 800906c:	fa83 f34c 	uadd8	r3, r3, ip
 8009070:	faa2 f38c 	sel	r3, r2, ip
 8009074:	b97b      	cbnz	r3, 8009096 <strlen+0x96>
 8009076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800907a:	f101 0120 	add.w	r1, r1, #32
 800907e:	fa82 f24c 	uadd8	r2, r2, ip
 8009082:	f100 0008 	add.w	r0, r0, #8
 8009086:	faa4 f28c 	sel	r2, r4, ip
 800908a:	fa83 f34c 	uadd8	r3, r3, ip
 800908e:	faa2 f38c 	sel	r3, r2, ip
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0c6      	beq.n	8009024 <strlen+0x24>
 8009096:	2a00      	cmp	r2, #0
 8009098:	bf04      	itt	eq
 800909a:	3004      	addeq	r0, #4
 800909c:	461a      	moveq	r2, r3
 800909e:	ba12      	rev	r2, r2
 80090a0:	fab2 f282 	clz	r2, r2
 80090a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80090a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80090ac:	4770      	bx	lr
 80090ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80090b2:	f004 0503 	and.w	r5, r4, #3
 80090b6:	f1c4 0000 	rsb	r0, r4, #0
 80090ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80090be:	f014 0f04 	tst.w	r4, #4
 80090c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80090c6:	fa0c f505 	lsl.w	r5, ip, r5
 80090ca:	ea62 0205 	orn	r2, r2, r5
 80090ce:	bf1c      	itt	ne
 80090d0:	ea63 0305 	ornne	r3, r3, r5
 80090d4:	4662      	movne	r2, ip
 80090d6:	f04f 0400 	mov.w	r4, #0
 80090da:	e7a9      	b.n	8009030 <strlen+0x30>

080090dc <close>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <close+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f000 bf43 	b.w	8009f6c <_close_r>
 80090e6:	bf00      	nop
 80090e8:	200000d4 	.word	0x200000d4

080090ec <fcntl>:
 80090ec:	b508      	push	{r3, lr}
 80090ee:	f7ff fa3d 	bl	800856c <__errno>
 80090f2:	2358      	movs	r3, #88	; 0x58
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090fa:	bd08      	pop	{r3, pc}

080090fc <fstat>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	; (8009108 <fstat+0xc>)
 80090fe:	460a      	mov	r2, r1
 8009100:	4601      	mov	r1, r0
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	f001 bb36 	b.w	800a774 <_fstat_r>
 8009108:	200000d4 	.word	0x200000d4

0800910c <open>:
 800910c:	b40e      	push	{r1, r2, r3}
 800910e:	b510      	push	{r4, lr}
 8009110:	b083      	sub	sp, #12
 8009112:	a905      	add	r1, sp, #20
 8009114:	4c06      	ldr	r4, [pc, #24]	; (8009130 <open+0x24>)
 8009116:	f851 2b04 	ldr.w	r2, [r1], #4
 800911a:	9101      	str	r1, [sp, #4]
 800911c:	9b06      	ldr	r3, [sp, #24]
 800911e:	4601      	mov	r1, r0
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	f001 fe55 	bl	800add0 <_open_r>
 8009126:	b003      	add	sp, #12
 8009128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912c:	b003      	add	sp, #12
 800912e:	4770      	bx	lr
 8009130:	200000d4 	.word	0x200000d4

08009134 <read>:
 8009134:	b410      	push	{r4}
 8009136:	4c04      	ldr	r4, [pc, #16]	; (8009148 <read+0x14>)
 8009138:	4613      	mov	r3, r2
 800913a:	460a      	mov	r2, r1
 800913c:	4601      	mov	r1, r0
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	bc10      	pop	{r4}
 8009142:	f001 be5b 	b.w	800adfc <_read_r>
 8009146:	bf00      	nop
 8009148:	200000d4 	.word	0x200000d4

0800914c <__sprint_r.part.0>:
 800914c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009152:	049c      	lsls	r4, r3, #18
 8009154:	4692      	mov	sl, r2
 8009156:	d52d      	bpl.n	80091b4 <__sprint_r.part.0+0x68>
 8009158:	6893      	ldr	r3, [r2, #8]
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	b343      	cbz	r3, 80091b0 <__sprint_r.part.0+0x64>
 800915e:	460e      	mov	r6, r1
 8009160:	4607      	mov	r7, r0
 8009162:	f102 0908 	add.w	r9, r2, #8
 8009166:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
 800916a:	ea5f 089b 	movs.w	r8, fp, lsr #2
 800916e:	d015      	beq.n	800919c <__sprint_r.part.0+0x50>
 8009170:	3d04      	subs	r5, #4
 8009172:	2400      	movs	r4, #0
 8009174:	e001      	b.n	800917a <__sprint_r.part.0+0x2e>
 8009176:	45a0      	cmp	r8, r4
 8009178:	d00e      	beq.n	8009198 <__sprint_r.part.0+0x4c>
 800917a:	4632      	mov	r2, r6
 800917c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8009180:	4638      	mov	r0, r7
 8009182:	f001 f965 	bl	800a450 <_fputwc_r>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	f104 0401 	add.w	r4, r4, #1
 800918c:	d1f3      	bne.n	8009176 <__sprint_r.part.0+0x2a>
 800918e:	2300      	movs	r3, #0
 8009190:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8009194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	f8da 3008 	ldr.w	r3, [sl, #8]
 800919c:	f02b 0b03 	bic.w	fp, fp, #3
 80091a0:	eba3 030b 	sub.w	r3, r3, fp
 80091a4:	f8ca 3008 	str.w	r3, [sl, #8]
 80091a8:	f109 0908 	add.w	r9, r9, #8
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1da      	bne.n	8009166 <__sprint_r.part.0+0x1a>
 80091b0:	2000      	movs	r0, #0
 80091b2:	e7ec      	b.n	800918e <__sprint_r.part.0+0x42>
 80091b4:	f001 faf2 	bl	800a79c <__sfvwrite_r>
 80091b8:	2300      	movs	r3, #0
 80091ba:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80091be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c2:	bf00      	nop

080091c4 <__sprint_r>:
 80091c4:	6893      	ldr	r3, [r2, #8]
 80091c6:	b10b      	cbz	r3, 80091cc <__sprint_r+0x8>
 80091c8:	f7ff bfc0 	b.w	800914c <__sprint_r.part.0>
 80091cc:	b410      	push	{r4}
 80091ce:	4618      	mov	r0, r3
 80091d0:	6053      	str	r3, [r2, #4]
 80091d2:	bc10      	pop	{r4}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop

080091d8 <_vfiprintf_r>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	b0ad      	sub	sp, #180	; 0xb4
 80091de:	461c      	mov	r4, r3
 80091e0:	9102      	str	r1, [sp, #8]
 80091e2:	4691      	mov	r9, r2
 80091e4:	e9cd 0307 	strd	r0, r3, [sp, #28]
 80091e8:	b118      	cbz	r0, 80091f2 <_vfiprintf_r+0x1a>
 80091ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 83a3 	beq.w	8009938 <_vfiprintf_r+0x760>
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80091f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091fa:	07d8      	lsls	r0, r3, #31
 80091fc:	b28a      	uxth	r2, r1
 80091fe:	d402      	bmi.n	8009206 <_vfiprintf_r+0x2e>
 8009200:	0593      	lsls	r3, r2, #22
 8009202:	f140 8521 	bpl.w	8009c48 <_vfiprintf_r+0xa70>
 8009206:	0497      	lsls	r7, r2, #18
 8009208:	d408      	bmi.n	800921c <_vfiprintf_r+0x44>
 800920a:	9802      	ldr	r0, [sp, #8]
 800920c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800920e:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8009212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009216:	8182      	strh	r2, [r0, #12]
 8009218:	6643      	str	r3, [r0, #100]	; 0x64
 800921a:	b292      	uxth	r2, r2
 800921c:	0716      	lsls	r6, r2, #28
 800921e:	f140 8100 	bpl.w	8009422 <_vfiprintf_r+0x24a>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80fb 	beq.w	8009422 <_vfiprintf_r+0x24a>
 800922c:	f002 031a 	and.w	r3, r2, #26
 8009230:	2b0a      	cmp	r3, #10
 8009232:	f000 8368 	beq.w	8009906 <_vfiprintf_r+0x72e>
 8009236:	2300      	movs	r3, #0
 8009238:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800923c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8009240:	930a      	str	r3, [sp, #40]	; 0x28
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8009248:	46d3      	mov	fp, sl
 800924a:	f899 3000 	ldrb.w	r3, [r9]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 841e 	beq.w	8009a90 <_vfiprintf_r+0x8b8>
 8009254:	2b25      	cmp	r3, #37	; 0x25
 8009256:	464c      	mov	r4, r9
 8009258:	d102      	bne.n	8009260 <_vfiprintf_r+0x88>
 800925a:	e01e      	b.n	800929a <_vfiprintf_r+0xc2>
 800925c:	2b25      	cmp	r3, #37	; 0x25
 800925e:	d003      	beq.n	8009268 <_vfiprintf_r+0x90>
 8009260:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1f9      	bne.n	800925c <_vfiprintf_r+0x84>
 8009268:	eba4 0509 	sub.w	r5, r4, r9
 800926c:	b18d      	cbz	r5, 8009292 <_vfiprintf_r+0xba>
 800926e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8009272:	3301      	adds	r3, #1
 8009274:	442a      	add	r2, r5
 8009276:	2b07      	cmp	r3, #7
 8009278:	f8cb 9000 	str.w	r9, [fp]
 800927c:	f8cb 5004 	str.w	r5, [fp, #4]
 8009280:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009284:	f300 80e4 	bgt.w	8009450 <_vfiprintf_r+0x278>
 8009288:	f10b 0b08 	add.w	fp, fp, #8
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	442b      	add	r3, r5
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	7823      	ldrb	r3, [r4, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 83fb 	beq.w	8009a90 <_vfiprintf_r+0x8b8>
 800929a:	2100      	movs	r1, #0
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	7862      	ldrb	r2, [r4, #1]
 80092a2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80092a6:	4608      	mov	r0, r1
 80092a8:	9106      	str	r1, [sp, #24]
 80092aa:	460f      	mov	r7, r1
 80092ac:	f104 0901 	add.w	r9, r4, #1
 80092b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80092b4:	f109 0901 	add.w	r9, r9, #1
 80092b8:	f1a2 0320 	sub.w	r3, r2, #32
 80092bc:	2b58      	cmp	r3, #88	; 0x58
 80092be:	f200 8340 	bhi.w	8009942 <_vfiprintf_r+0x76a>
 80092c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80092c6:	02da      	.short	0x02da
 80092c8:	033e033e 	.word	0x033e033e
 80092cc:	033e02d5 	.word	0x033e02d5
 80092d0:	033e033e 	.word	0x033e033e
 80092d4:	033e033e 	.word	0x033e033e
 80092d8:	02c9033e 	.word	0x02c9033e
 80092dc:	033e02e7 	.word	0x033e02e7
 80092e0:	02ec02e2 	.word	0x02ec02e2
 80092e4:	00da033e 	.word	0x00da033e
 80092e8:	00cb00cb 	.word	0x00cb00cb
 80092ec:	00cb00cb 	.word	0x00cb00cb
 80092f0:	00cb00cb 	.word	0x00cb00cb
 80092f4:	00cb00cb 	.word	0x00cb00cb
 80092f8:	033e00cb 	.word	0x033e00cb
 80092fc:	033e033e 	.word	0x033e033e
 8009300:	033e033e 	.word	0x033e033e
 8009304:	033e033e 	.word	0x033e033e
 8009308:	033e033e 	.word	0x033e033e
 800930c:	02b4033e 	.word	0x02b4033e
 8009310:	033e033e 	.word	0x033e033e
 8009314:	033e033e 	.word	0x033e033e
 8009318:	033e033e 	.word	0x033e033e
 800931c:	033e033e 	.word	0x033e033e
 8009320:	033e033e 	.word	0x033e033e
 8009324:	033e009d 	.word	0x033e009d
 8009328:	033e033e 	.word	0x033e033e
 800932c:	033e033e 	.word	0x033e033e
 8009330:	033e0059 	.word	0x033e0059
 8009334:	029f033e 	.word	0x029f033e
 8009338:	033e033e 	.word	0x033e033e
 800933c:	033e033e 	.word	0x033e033e
 8009340:	033e033e 	.word	0x033e033e
 8009344:	033e033e 	.word	0x033e033e
 8009348:	033e033e 	.word	0x033e033e
 800934c:	017b0198 	.word	0x017b0198
 8009350:	033e033e 	.word	0x033e033e
 8009354:	0176033e 	.word	0x0176033e
 8009358:	033e017b 	.word	0x033e017b
 800935c:	0169033e 	.word	0x0169033e
 8009360:	0155033e 	.word	0x0155033e
 8009364:	0125009f 	.word	0x0125009f
 8009368:	033e0120 	.word	0x033e0120
 800936c:	033e0100 	.word	0x033e0100
 8009370:	033e005b 	.word	0x033e005b
 8009374:	00df033e 	.word	0x00df033e
 8009378:	f047 0710 	orr.w	r7, r7, #16
 800937c:	06bb      	lsls	r3, r7, #26
 800937e:	f140 82a8 	bpl.w	80098d2 <_vfiprintf_r+0x6fa>
 8009382:	9c08      	ldr	r4, [sp, #32]
 8009384:	3407      	adds	r4, #7
 8009386:	f024 0307 	bic.w	r3, r4, #7
 800938a:	f103 0208 	add.w	r2, r3, #8
 800938e:	9208      	str	r2, [sp, #32]
 8009390:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	e9d3 4500 	ldrd	r4, r5, [r3]
 800939c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 80093a0:	f04f 0301 	mov.w	r3, #1
 80093a4:	f040 80ca 	bne.w	800953c <_vfiprintf_r+0x364>
 80093a8:	2200      	movs	r2, #0
 80093aa:	9703      	str	r7, [sp, #12]
 80093ac:	9209      	str	r2, [sp, #36]	; 0x24
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	f000 83f9 	beq.w	8009ba6 <_vfiprintf_r+0x9ce>
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	f000 8385 	beq.w	8009ac4 <_vfiprintf_r+0x8ec>
 80093ba:	4651      	mov	r1, sl
 80093bc:	e000      	b.n	80093c0 <_vfiprintf_r+0x1e8>
 80093be:	4631      	mov	r1, r6
 80093c0:	08e2      	lsrs	r2, r4, #3
 80093c2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80093c6:	08e8      	lsrs	r0, r5, #3
 80093c8:	f004 0307 	and.w	r3, r4, #7
 80093cc:	4605      	mov	r5, r0
 80093ce:	4614      	mov	r4, r2
 80093d0:	3330      	adds	r3, #48	; 0x30
 80093d2:	ea54 0205 	orrs.w	r2, r4, r5
 80093d6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80093da:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80093de:	d1ee      	bne.n	80093be <_vfiprintf_r+0x1e6>
 80093e0:	9a03      	ldr	r2, [sp, #12]
 80093e2:	07d7      	lsls	r7, r2, #31
 80093e4:	f140 837e 	bpl.w	8009ae4 <_vfiprintf_r+0x90c>
 80093e8:	2b30      	cmp	r3, #48	; 0x30
 80093ea:	f000 837b 	beq.w	8009ae4 <_vfiprintf_r+0x90c>
 80093ee:	3902      	subs	r1, #2
 80093f0:	2330      	movs	r3, #48	; 0x30
 80093f2:	f806 3c01 	strb.w	r3, [r6, #-1]
 80093f6:	ebaa 0301 	sub.w	r3, sl, r1
 80093fa:	9305      	str	r3, [sp, #20]
 80093fc:	460e      	mov	r6, r1
 80093fe:	e374      	b.n	8009aea <_vfiprintf_r+0x912>
 8009400:	f047 0710 	orr.w	r7, r7, #16
 8009404:	f017 0320 	ands.w	r3, r7, #32
 8009408:	f000 826d 	beq.w	80098e6 <_vfiprintf_r+0x70e>
 800940c:	9c08      	ldr	r4, [sp, #32]
 800940e:	3407      	adds	r4, #7
 8009410:	f024 0307 	bic.w	r3, r4, #7
 8009414:	f103 0208 	add.w	r2, r3, #8
 8009418:	e9d3 4500 	ldrd	r4, r5, [r3]
 800941c:	9208      	str	r2, [sp, #32]
 800941e:	2300      	movs	r3, #0
 8009420:	e084      	b.n	800952c <_vfiprintf_r+0x354>
 8009422:	9d02      	ldr	r5, [sp, #8]
 8009424:	9807      	ldr	r0, [sp, #28]
 8009426:	4629      	mov	r1, r5
 8009428:	f000 fd36 	bl	8009e98 <__swsetup_r>
 800942c:	2800      	cmp	r0, #0
 800942e:	f000 8264 	beq.w	80098fa <_vfiprintf_r+0x722>
 8009432:	9a02      	ldr	r2, [sp, #8]
 8009434:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009436:	07dd      	lsls	r5, r3, #31
 8009438:	d403      	bmi.n	8009442 <_vfiprintf_r+0x26a>
 800943a:	8993      	ldrh	r3, [r2, #12]
 800943c:	059c      	lsls	r4, r3, #22
 800943e:	f140 843e 	bpl.w	8009cbe <_vfiprintf_r+0xae6>
 8009442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	9804      	ldr	r0, [sp, #16]
 800944a:	b02d      	add	sp, #180	; 0xb4
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	2a00      	cmp	r2, #0
 8009452:	f040 83b8 	bne.w	8009bc6 <_vfiprintf_r+0x9ee>
 8009456:	9210      	str	r2, [sp, #64]	; 0x40
 8009458:	46d3      	mov	fp, sl
 800945a:	e717      	b.n	800928c <_vfiprintf_r+0xb4>
 800945c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009460:	2400      	movs	r4, #0
 8009462:	f819 2b01 	ldrb.w	r2, [r9], #1
 8009466:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800946a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800946e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009472:	2b09      	cmp	r3, #9
 8009474:	d9f5      	bls.n	8009462 <_vfiprintf_r+0x28a>
 8009476:	9406      	str	r4, [sp, #24]
 8009478:	e71e      	b.n	80092b8 <_vfiprintf_r+0xe0>
 800947a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800947e:	f899 2000 	ldrb.w	r2, [r9]
 8009482:	e717      	b.n	80092b4 <_vfiprintf_r+0xdc>
 8009484:	2900      	cmp	r1, #0
 8009486:	f040 84ae 	bne.w	8009de6 <_vfiprintf_r+0xc0e>
 800948a:	4bc5      	ldr	r3, [pc, #788]	; (80097a0 <_vfiprintf_r+0x5c8>)
 800948c:	930a      	str	r3, [sp, #40]	; 0x28
 800948e:	06bc      	lsls	r4, r7, #26
 8009490:	f140 81c0 	bpl.w	8009814 <_vfiprintf_r+0x63c>
 8009494:	9c08      	ldr	r4, [sp, #32]
 8009496:	3407      	adds	r4, #7
 8009498:	f024 0307 	bic.w	r3, r4, #7
 800949c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80094a0:	f103 0108 	add.w	r1, r3, #8
 80094a4:	9108      	str	r1, [sp, #32]
 80094a6:	07fb      	lsls	r3, r7, #31
 80094a8:	f140 8249 	bpl.w	800993e <_vfiprintf_r+0x766>
 80094ac:	ea54 0305 	orrs.w	r3, r4, r5
 80094b0:	f000 8245 	beq.w	800993e <_vfiprintf_r+0x766>
 80094b4:	2330      	movs	r3, #48	; 0x30
 80094b6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 80094ba:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 80094be:	f047 0702 	orr.w	r7, r7, #2
 80094c2:	2302      	movs	r3, #2
 80094c4:	e032      	b.n	800952c <_vfiprintf_r+0x354>
 80094c6:	9b08      	ldr	r3, [sp, #32]
 80094c8:	681e      	ldr	r6, [r3, #0]
 80094ca:	f04f 0200 	mov.w	r2, #0
 80094ce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 80094d2:	1d1c      	adds	r4, r3, #4
 80094d4:	2e00      	cmp	r6, #0
 80094d6:	f000 83f9 	beq.w	8009ccc <_vfiprintf_r+0xaf4>
 80094da:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80094de:	f000 843d 	beq.w	8009d5c <_vfiprintf_r+0xb84>
 80094e2:	4642      	mov	r2, r8
 80094e4:	2100      	movs	r1, #0
 80094e6:	4630      	mov	r0, r6
 80094e8:	f001 fc22 	bl	800ad30 <memchr>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f000 844d 	beq.w	8009d8c <_vfiprintf_r+0xbb4>
 80094f2:	1b83      	subs	r3, r0, r6
 80094f4:	9305      	str	r3, [sp, #20]
 80094f6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80094fa:	9408      	str	r4, [sp, #32]
 80094fc:	9703      	str	r7, [sp, #12]
 80094fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009500:	f04f 0800 	mov.w	r8, #0
 8009504:	e2f1      	b.n	8009aea <_vfiprintf_r+0x912>
 8009506:	f047 0720 	orr.w	r7, r7, #32
 800950a:	f899 2000 	ldrb.w	r2, [r9]
 800950e:	e6d1      	b.n	80092b4 <_vfiprintf_r+0xdc>
 8009510:	9a08      	ldr	r2, [sp, #32]
 8009512:	4ba3      	ldr	r3, [pc, #652]	; (80097a0 <_vfiprintf_r+0x5c8>)
 8009514:	6814      	ldr	r4, [r2, #0]
 8009516:	930a      	str	r3, [sp, #40]	; 0x28
 8009518:	3204      	adds	r2, #4
 800951a:	f647 0330 	movw	r3, #30768	; 0x7830
 800951e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8009522:	f047 0702 	orr.w	r7, r7, #2
 8009526:	9208      	str	r2, [sp, #32]
 8009528:	2500      	movs	r5, #0
 800952a:	2302      	movs	r3, #2
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009534:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8009538:	f43f af36 	beq.w	80093a8 <_vfiprintf_r+0x1d0>
 800953c:	2200      	movs	r2, #0
 800953e:	9209      	str	r2, [sp, #36]	; 0x24
 8009540:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 8009544:	9203      	str	r2, [sp, #12]
 8009546:	ea54 0205 	orrs.w	r2, r4, r5
 800954a:	f47f af30 	bne.w	80093ae <_vfiprintf_r+0x1d6>
 800954e:	f1b8 0f00 	cmp.w	r8, #0
 8009552:	f040 83d7 	bne.w	8009d04 <_vfiprintf_r+0xb2c>
 8009556:	2b00      	cmp	r3, #0
 8009558:	f040 8331 	bne.w	8009bbe <_vfiprintf_r+0x9e6>
 800955c:	f017 0301 	ands.w	r3, r7, #1
 8009560:	9305      	str	r3, [sp, #20]
 8009562:	f000 837a 	beq.w	8009c5a <_vfiprintf_r+0xa82>
 8009566:	ae2c      	add	r6, sp, #176	; 0xb0
 8009568:	2330      	movs	r3, #48	; 0x30
 800956a:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800956e:	e2bc      	b.n	8009aea <_vfiprintf_r+0x912>
 8009570:	2900      	cmp	r1, #0
 8009572:	f040 843c 	bne.w	8009dee <_vfiprintf_r+0xc16>
 8009576:	9a08      	ldr	r2, [sp, #32]
 8009578:	06b8      	lsls	r0, r7, #26
 800957a:	f852 3b04 	ldr.w	r3, [r2], #4
 800957e:	9208      	str	r2, [sp, #32]
 8009580:	f100 837a 	bmi.w	8009c78 <_vfiprintf_r+0xaa0>
 8009584:	06f9      	lsls	r1, r7, #27
 8009586:	f100 83b9 	bmi.w	8009cfc <_vfiprintf_r+0xb24>
 800958a:	067a      	lsls	r2, r7, #25
 800958c:	f140 83b6 	bpl.w	8009cfc <_vfiprintf_r+0xb24>
 8009590:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8009594:	801a      	strh	r2, [r3, #0]
 8009596:	e658      	b.n	800924a <_vfiprintf_r+0x72>
 8009598:	f899 2000 	ldrb.w	r2, [r9]
 800959c:	2a6c      	cmp	r2, #108	; 0x6c
 800959e:	bf03      	ittte	eq
 80095a0:	f899 2001 	ldrbeq.w	r2, [r9, #1]
 80095a4:	f047 0720 	orreq.w	r7, r7, #32
 80095a8:	f109 0901 	addeq.w	r9, r9, #1
 80095ac:	f047 0710 	orrne.w	r7, r7, #16
 80095b0:	e680      	b.n	80092b4 <_vfiprintf_r+0xdc>
 80095b2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 80095b6:	f899 2000 	ldrb.w	r2, [r9]
 80095ba:	e67b      	b.n	80092b4 <_vfiprintf_r+0xdc>
 80095bc:	2900      	cmp	r1, #0
 80095be:	f040 840e 	bne.w	8009dde <_vfiprintf_r+0xc06>
 80095c2:	06bb      	lsls	r3, r7, #26
 80095c4:	f140 813b 	bpl.w	800983e <_vfiprintf_r+0x666>
 80095c8:	9c08      	ldr	r4, [sp, #32]
 80095ca:	3407      	adds	r4, #7
 80095cc:	f024 0307 	bic.w	r3, r4, #7
 80095d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80095d4:	f103 0208 	add.w	r2, r3, #8
 80095d8:	9208      	str	r2, [sp, #32]
 80095da:	2c00      	cmp	r4, #0
 80095dc:	f175 0300 	sbcs.w	r3, r5, #0
 80095e0:	f2c0 8304 	blt.w	8009bec <_vfiprintf_r+0xa14>
 80095e4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80095e8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ea:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80095ee:	f000 82d9 	beq.w	8009ba4 <_vfiprintf_r+0x9cc>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e7a4      	b.n	8009540 <_vfiprintf_r+0x368>
 80095f6:	9b08      	ldr	r3, [sp, #32]
 80095f8:	f04f 0100 	mov.w	r1, #0
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 8009602:	3304      	adds	r3, #4
 8009604:	2101      	movs	r1, #1
 8009606:	9101      	str	r1, [sp, #4]
 8009608:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 800960c:	9308      	str	r3, [sp, #32]
 800960e:	9105      	str	r1, [sp, #20]
 8009610:	ae12      	add	r6, sp, #72	; 0x48
 8009612:	9703      	str	r7, [sp, #12]
 8009614:	f04f 0800 	mov.w	r8, #0
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	f013 0302 	ands.w	r3, r3, #2
 800961e:	d002      	beq.n	8009626 <_vfiprintf_r+0x44e>
 8009620:	9a01      	ldr	r2, [sp, #4]
 8009622:	3202      	adds	r2, #2
 8009624:	9201      	str	r2, [sp, #4]
 8009626:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 800962a:	9c03      	ldr	r4, [sp, #12]
 800962c:	1c48      	adds	r0, r1, #1
 800962e:	f014 0484 	ands.w	r4, r4, #132	; 0x84
 8009632:	4684      	mov	ip, r0
 8009634:	9409      	str	r4, [sp, #36]	; 0x24
 8009636:	d138      	bne.n	80096aa <_vfiprintf_r+0x4d2>
 8009638:	9c06      	ldr	r4, [sp, #24]
 800963a:	9d01      	ldr	r5, [sp, #4]
 800963c:	1b64      	subs	r4, r4, r5
 800963e:	2c00      	cmp	r4, #0
 8009640:	dd33      	ble.n	80096aa <_vfiprintf_r+0x4d2>
 8009642:	2c10      	cmp	r4, #16
 8009644:	4d57      	ldr	r5, [pc, #348]	; (80097a4 <_vfiprintf_r+0x5cc>)
 8009646:	f340 8395 	ble.w	8009d74 <_vfiprintf_r+0xb9c>
 800964a:	46dc      	mov	ip, fp
 800964c:	2710      	movs	r7, #16
 800964e:	469b      	mov	fp, r3
 8009650:	4663      	mov	r3, ip
 8009652:	e007      	b.n	8009664 <_vfiprintf_r+0x48c>
 8009654:	f101 0e02 	add.w	lr, r1, #2
 8009658:	3308      	adds	r3, #8
 800965a:	4601      	mov	r1, r0
 800965c:	3c10      	subs	r4, #16
 800965e:	2c10      	cmp	r4, #16
 8009660:	dd11      	ble.n	8009686 <_vfiprintf_r+0x4ae>
 8009662:	1c48      	adds	r0, r1, #1
 8009664:	3210      	adds	r2, #16
 8009666:	2807      	cmp	r0, #7
 8009668:	9211      	str	r2, [sp, #68]	; 0x44
 800966a:	e9c3 5700 	strd	r5, r7, [r3]
 800966e:	9010      	str	r0, [sp, #64]	; 0x40
 8009670:	ddf0      	ble.n	8009654 <_vfiprintf_r+0x47c>
 8009672:	2a00      	cmp	r2, #0
 8009674:	f040 8245 	bne.w	8009b02 <_vfiprintf_r+0x92a>
 8009678:	3c10      	subs	r4, #16
 800967a:	2c10      	cmp	r4, #16
 800967c:	4611      	mov	r1, r2
 800967e:	f04f 0e01 	mov.w	lr, #1
 8009682:	4653      	mov	r3, sl
 8009684:	dced      	bgt.n	8009662 <_vfiprintf_r+0x48a>
 8009686:	4619      	mov	r1, r3
 8009688:	465b      	mov	r3, fp
 800968a:	468b      	mov	fp, r1
 800968c:	4422      	add	r2, r4
 800968e:	f1be 0f07 	cmp.w	lr, #7
 8009692:	9211      	str	r2, [sp, #68]	; 0x44
 8009694:	e9cb 5400 	strd	r5, r4, [fp]
 8009698:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800969c:	f300 8256 	bgt.w	8009b4c <_vfiprintf_r+0x974>
 80096a0:	f10b 0b08 	add.w	fp, fp, #8
 80096a4:	f10e 0c01 	add.w	ip, lr, #1
 80096a8:	4671      	mov	r1, lr
 80096aa:	f89d 4037 	ldrb.w	r4, [sp, #55]	; 0x37
 80096ae:	f10b 0008 	add.w	r0, fp, #8
 80096b2:	2c00      	cmp	r4, #0
 80096b4:	f000 8174 	beq.w	80099a0 <_vfiprintf_r+0x7c8>
 80096b8:	3201      	adds	r2, #1
 80096ba:	f10d 0437 	add.w	r4, sp, #55	; 0x37
 80096be:	2101      	movs	r1, #1
 80096c0:	f1bc 0f07 	cmp.w	ip, #7
 80096c4:	e9cd c210 	strd	ip, r2, [sp, #64]	; 0x40
 80096c8:	e9cb 4100 	strd	r4, r1, [fp]
 80096cc:	f340 824e 	ble.w	8009b6c <_vfiprintf_r+0x994>
 80096d0:	2a00      	cmp	r2, #0
 80096d2:	f040 8155 	bne.w	8009980 <_vfiprintf_r+0x7a8>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f040 824e 	bne.w	8009b78 <_vfiprintf_r+0x9a0>
 80096dc:	468c      	mov	ip, r1
 80096de:	a81e      	add	r0, sp, #120	; 0x78
 80096e0:	4611      	mov	r1, r2
 80096e2:	46d3      	mov	fp, sl
 80096e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e6:	2b80      	cmp	r3, #128	; 0x80
 80096e8:	f000 8174 	beq.w	80099d4 <_vfiprintf_r+0x7fc>
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	eba8 0503 	sub.w	r5, r8, r3
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	dd32      	ble.n	800975c <_vfiprintf_r+0x584>
 80096f6:	2d10      	cmp	r5, #16
 80096f8:	4c2b      	ldr	r4, [pc, #172]	; (80097a8 <_vfiprintf_r+0x5d0>)
 80096fa:	f340 832d 	ble.w	8009d58 <_vfiprintf_r+0xb80>
 80096fe:	2710      	movs	r7, #16
 8009700:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009704:	e007      	b.n	8009716 <_vfiprintf_r+0x53e>
 8009706:	f101 0c02 	add.w	ip, r1, #2
 800970a:	f10b 0b08 	add.w	fp, fp, #8
 800970e:	4619      	mov	r1, r3
 8009710:	3d10      	subs	r5, #16
 8009712:	2d10      	cmp	r5, #16
 8009714:	dd11      	ble.n	800973a <_vfiprintf_r+0x562>
 8009716:	1c4b      	adds	r3, r1, #1
 8009718:	3210      	adds	r2, #16
 800971a:	2b07      	cmp	r3, #7
 800971c:	9211      	str	r2, [sp, #68]	; 0x44
 800971e:	e9cb 4700 	strd	r4, r7, [fp]
 8009722:	9310      	str	r3, [sp, #64]	; 0x40
 8009724:	ddef      	ble.n	8009706 <_vfiprintf_r+0x52e>
 8009726:	2a00      	cmp	r2, #0
 8009728:	f040 811c 	bne.w	8009964 <_vfiprintf_r+0x78c>
 800972c:	3d10      	subs	r5, #16
 800972e:	2d10      	cmp	r5, #16
 8009730:	f04f 0c01 	mov.w	ip, #1
 8009734:	4611      	mov	r1, r2
 8009736:	46d3      	mov	fp, sl
 8009738:	dced      	bgt.n	8009716 <_vfiprintf_r+0x53e>
 800973a:	f10b 0108 	add.w	r1, fp, #8
 800973e:	442a      	add	r2, r5
 8009740:	f1bc 0f07 	cmp.w	ip, #7
 8009744:	9211      	str	r2, [sp, #68]	; 0x44
 8009746:	e9cb 4500 	strd	r4, r5, [fp]
 800974a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800974e:	f300 821f 	bgt.w	8009b90 <_vfiprintf_r+0x9b8>
 8009752:	f10c 0c01 	add.w	ip, ip, #1
 8009756:	f101 0008 	add.w	r0, r1, #8
 800975a:	468b      	mov	fp, r1
 800975c:	9b05      	ldr	r3, [sp, #20]
 800975e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8009762:	441a      	add	r2, r3
 8009764:	f1bc 0f07 	cmp.w	ip, #7
 8009768:	9211      	str	r2, [sp, #68]	; 0x44
 800976a:	e9cb 6300 	strd	r6, r3, [fp]
 800976e:	f340 816f 	ble.w	8009a50 <_vfiprintf_r+0x878>
 8009772:	2a00      	cmp	r2, #0
 8009774:	f040 8164 	bne.w	8009a40 <_vfiprintf_r+0x868>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	9210      	str	r2, [sp, #64]	; 0x40
 800977c:	075d      	lsls	r5, r3, #29
 800977e:	d538      	bpl.n	80097f2 <_vfiprintf_r+0x61a>
 8009780:	9b06      	ldr	r3, [sp, #24]
 8009782:	9901      	ldr	r1, [sp, #4]
 8009784:	1a5c      	subs	r4, r3, r1
 8009786:	2c00      	cmp	r4, #0
 8009788:	dd33      	ble.n	80097f2 <_vfiprintf_r+0x61a>
 800978a:	4650      	mov	r0, sl
 800978c:	2c10      	cmp	r4, #16
 800978e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009790:	4d04      	ldr	r5, [pc, #16]	; (80097a4 <_vfiprintf_r+0x5cc>)
 8009792:	f340 82f9 	ble.w	8009d88 <_vfiprintf_r+0xbb0>
 8009796:	2610      	movs	r6, #16
 8009798:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800979c:	e00c      	b.n	80097b8 <_vfiprintf_r+0x5e0>
 800979e:	bf00      	nop
 80097a0:	0800bfd4 	.word	0x0800bfd4
 80097a4:	0800bff0 	.word	0x0800bff0
 80097a8:	0800c000 	.word	0x0800c000
 80097ac:	1cbb      	adds	r3, r7, #2
 80097ae:	3008      	adds	r0, #8
 80097b0:	460f      	mov	r7, r1
 80097b2:	3c10      	subs	r4, #16
 80097b4:	2c10      	cmp	r4, #16
 80097b6:	dd11      	ble.n	80097dc <_vfiprintf_r+0x604>
 80097b8:	1c79      	adds	r1, r7, #1
 80097ba:	3210      	adds	r2, #16
 80097bc:	2907      	cmp	r1, #7
 80097be:	9211      	str	r2, [sp, #68]	; 0x44
 80097c0:	e9c0 5600 	strd	r5, r6, [r0]
 80097c4:	9110      	str	r1, [sp, #64]	; 0x40
 80097c6:	ddf1      	ble.n	80097ac <_vfiprintf_r+0x5d4>
 80097c8:	2a00      	cmp	r2, #0
 80097ca:	f040 81a7 	bne.w	8009b1c <_vfiprintf_r+0x944>
 80097ce:	3c10      	subs	r4, #16
 80097d0:	2c10      	cmp	r4, #16
 80097d2:	f04f 0301 	mov.w	r3, #1
 80097d6:	4617      	mov	r7, r2
 80097d8:	4650      	mov	r0, sl
 80097da:	dced      	bgt.n	80097b8 <_vfiprintf_r+0x5e0>
 80097dc:	4422      	add	r2, r4
 80097de:	2b07      	cmp	r3, #7
 80097e0:	9211      	str	r2, [sp, #68]	; 0x44
 80097e2:	e9c0 5400 	strd	r5, r4, [r0]
 80097e6:	9310      	str	r3, [sp, #64]	; 0x40
 80097e8:	f340 813b 	ble.w	8009a62 <_vfiprintf_r+0x88a>
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	f040 825c 	bne.w	8009caa <_vfiprintf_r+0xad2>
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	9a06      	ldr	r2, [sp, #24]
 80097f6:	9901      	ldr	r1, [sp, #4]
 80097f8:	428a      	cmp	r2, r1
 80097fa:	bfac      	ite	ge
 80097fc:	189b      	addge	r3, r3, r2
 80097fe:	185b      	addlt	r3, r3, r1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	e13d      	b.n	8009a80 <_vfiprintf_r+0x8a8>
 8009804:	2900      	cmp	r1, #0
 8009806:	f040 82e1 	bne.w	8009dcc <_vfiprintf_r+0xbf4>
 800980a:	4bac      	ldr	r3, [pc, #688]	; (8009abc <_vfiprintf_r+0x8e4>)
 800980c:	930a      	str	r3, [sp, #40]	; 0x28
 800980e:	06bc      	lsls	r4, r7, #26
 8009810:	f53f ae40 	bmi.w	8009494 <_vfiprintf_r+0x2bc>
 8009814:	9b08      	ldr	r3, [sp, #32]
 8009816:	06f8      	lsls	r0, r7, #27
 8009818:	f853 4b04 	ldr.w	r4, [r3], #4
 800981c:	9308      	str	r3, [sp, #32]
 800981e:	f100 81dd 	bmi.w	8009bdc <_vfiprintf_r+0xa04>
 8009822:	0679      	lsls	r1, r7, #25
 8009824:	f140 81da 	bpl.w	8009bdc <_vfiprintf_r+0xa04>
 8009828:	b2a4      	uxth	r4, r4
 800982a:	2500      	movs	r5, #0
 800982c:	e63b      	b.n	80094a6 <_vfiprintf_r+0x2ce>
 800982e:	2900      	cmp	r1, #0
 8009830:	f040 82d2 	bne.w	8009dd8 <_vfiprintf_r+0xc00>
 8009834:	f047 0710 	orr.w	r7, r7, #16
 8009838:	06bb      	lsls	r3, r7, #26
 800983a:	f53f aec5 	bmi.w	80095c8 <_vfiprintf_r+0x3f0>
 800983e:	9b08      	ldr	r3, [sp, #32]
 8009840:	06fe      	lsls	r6, r7, #27
 8009842:	f853 4b04 	ldr.w	r4, [r3], #4
 8009846:	9308      	str	r3, [sp, #32]
 8009848:	f100 81ca 	bmi.w	8009be0 <_vfiprintf_r+0xa08>
 800984c:	067d      	lsls	r5, r7, #25
 800984e:	f140 81c7 	bpl.w	8009be0 <_vfiprintf_r+0xa08>
 8009852:	b224      	sxth	r4, r4
 8009854:	17e5      	asrs	r5, r4, #31
 8009856:	e6c0      	b.n	80095da <_vfiprintf_r+0x402>
 8009858:	9b08      	ldr	r3, [sp, #32]
 800985a:	f899 2000 	ldrb.w	r2, [r9]
 800985e:	681c      	ldr	r4, [r3, #0]
 8009860:	9406      	str	r4, [sp, #24]
 8009862:	2c00      	cmp	r4, #0
 8009864:	f103 0304 	add.w	r3, r3, #4
 8009868:	f2c0 8215 	blt.w	8009c96 <_vfiprintf_r+0xabe>
 800986c:	9308      	str	r3, [sp, #32]
 800986e:	e521      	b.n	80092b4 <_vfiprintf_r+0xdc>
 8009870:	f047 0701 	orr.w	r7, r7, #1
 8009874:	f899 2000 	ldrb.w	r2, [r9]
 8009878:	e51c      	b.n	80092b4 <_vfiprintf_r+0xdc>
 800987a:	f899 2000 	ldrb.w	r2, [r9]
 800987e:	2800      	cmp	r0, #0
 8009880:	f47f ad18 	bne.w	80092b4 <_vfiprintf_r+0xdc>
 8009884:	2101      	movs	r1, #1
 8009886:	2020      	movs	r0, #32
 8009888:	e514      	b.n	80092b4 <_vfiprintf_r+0xdc>
 800988a:	f899 2000 	ldrb.w	r2, [r9]
 800988e:	f047 0704 	orr.w	r7, r7, #4
 8009892:	e50f      	b.n	80092b4 <_vfiprintf_r+0xdc>
 8009894:	f899 2000 	ldrb.w	r2, [r9]
 8009898:	2101      	movs	r1, #1
 800989a:	202b      	movs	r0, #43	; 0x2b
 800989c:	e50a      	b.n	80092b4 <_vfiprintf_r+0xdc>
 800989e:	f899 2000 	ldrb.w	r2, [r9]
 80098a2:	2a2a      	cmp	r2, #42	; 0x2a
 80098a4:	f109 0401 	add.w	r4, r9, #1
 80098a8:	f000 8285 	beq.w	8009db6 <_vfiprintf_r+0xbde>
 80098ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80098b0:	2b09      	cmp	r3, #9
 80098b2:	46a1      	mov	r9, r4
 80098b4:	f04f 0800 	mov.w	r8, #0
 80098b8:	f63f acfe 	bhi.w	80092b8 <_vfiprintf_r+0xe0>
 80098bc:	f819 2b01 	ldrb.w	r2, [r9], #1
 80098c0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80098c4:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 80098c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80098cc:	2b09      	cmp	r3, #9
 80098ce:	d9f5      	bls.n	80098bc <_vfiprintf_r+0x6e4>
 80098d0:	e4f2      	b.n	80092b8 <_vfiprintf_r+0xe0>
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	06fe      	lsls	r6, r7, #27
 80098d6:	f853 4b04 	ldr.w	r4, [r3], #4
 80098da:	9308      	str	r3, [sp, #32]
 80098dc:	f140 81c6 	bpl.w	8009c6c <_vfiprintf_r+0xa94>
 80098e0:	2500      	movs	r5, #0
 80098e2:	2301      	movs	r3, #1
 80098e4:	e622      	b.n	800952c <_vfiprintf_r+0x354>
 80098e6:	9a08      	ldr	r2, [sp, #32]
 80098e8:	f852 4b04 	ldr.w	r4, [r2], #4
 80098ec:	9208      	str	r2, [sp, #32]
 80098ee:	f017 0210 	ands.w	r2, r7, #16
 80098f2:	f000 81b4 	beq.w	8009c5e <_vfiprintf_r+0xa86>
 80098f6:	2500      	movs	r5, #0
 80098f8:	e618      	b.n	800952c <_vfiprintf_r+0x354>
 80098fa:	89aa      	ldrh	r2, [r5, #12]
 80098fc:	f002 031a 	and.w	r3, r2, #26
 8009900:	2b0a      	cmp	r3, #10
 8009902:	f47f ac98 	bne.w	8009236 <_vfiprintf_r+0x5e>
 8009906:	9902      	ldr	r1, [sp, #8]
 8009908:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f6ff ac92 	blt.w	8009236 <_vfiprintf_r+0x5e>
 8009912:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009914:	07d8      	lsls	r0, r3, #31
 8009916:	d404      	bmi.n	8009922 <_vfiprintf_r+0x74a>
 8009918:	0592      	lsls	r2, r2, #22
 800991a:	d402      	bmi.n	8009922 <_vfiprintf_r+0x74a>
 800991c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800991e:	f001 f965 	bl	800abec <__retarget_lock_release_recursive>
 8009922:	4623      	mov	r3, r4
 8009924:	464a      	mov	r2, r9
 8009926:	9902      	ldr	r1, [sp, #8]
 8009928:	9807      	ldr	r0, [sp, #28]
 800992a:	f000 fa73 	bl	8009e14 <__sbprintf>
 800992e:	9004      	str	r0, [sp, #16]
 8009930:	9804      	ldr	r0, [sp, #16]
 8009932:	b02d      	add	sp, #180	; 0xb4
 8009934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009938:	f000 fc80 	bl	800a23c <__sinit>
 800993c:	e459      	b.n	80091f2 <_vfiprintf_r+0x1a>
 800993e:	2302      	movs	r3, #2
 8009940:	e5f4      	b.n	800952c <_vfiprintf_r+0x354>
 8009942:	2900      	cmp	r1, #0
 8009944:	f040 8245 	bne.w	8009dd2 <_vfiprintf_r+0xbfa>
 8009948:	2a00      	cmp	r2, #0
 800994a:	f000 80a1 	beq.w	8009a90 <_vfiprintf_r+0x8b8>
 800994e:	2301      	movs	r3, #1
 8009950:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800995e:	9305      	str	r3, [sp, #20]
 8009960:	ae12      	add	r6, sp, #72	; 0x48
 8009962:	e656      	b.n	8009612 <_vfiprintf_r+0x43a>
 8009964:	aa0f      	add	r2, sp, #60	; 0x3c
 8009966:	9902      	ldr	r1, [sp, #8]
 8009968:	4640      	mov	r0, r8
 800996a:	f7ff fbef 	bl	800914c <__sprint_r.part.0>
 800996e:	2800      	cmp	r0, #0
 8009970:	f040 8094 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009974:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009978:	46d3      	mov	fp, sl
 800997a:	f101 0c01 	add.w	ip, r1, #1
 800997e:	e6c7      	b.n	8009710 <_vfiprintf_r+0x538>
 8009980:	aa0f      	add	r2, sp, #60	; 0x3c
 8009982:	9902      	ldr	r1, [sp, #8]
 8009984:	9807      	ldr	r0, [sp, #28]
 8009986:	930b      	str	r3, [sp, #44]	; 0x2c
 8009988:	f7ff fbe0 	bl	800914c <__sprint_r.part.0>
 800998c:	2800      	cmp	r0, #0
 800998e:	f040 8085 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009992:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009998:	f101 0c01 	add.w	ip, r1, #1
 800999c:	a81e      	add	r0, sp, #120	; 0x78
 800999e:	46d3      	mov	fp, sl
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f43f ae9f 	beq.w	80096e4 <_vfiprintf_r+0x50c>
 80099a6:	3202      	adds	r2, #2
 80099a8:	ac0e      	add	r4, sp, #56	; 0x38
 80099aa:	2102      	movs	r1, #2
 80099ac:	f1bc 0f07 	cmp.w	ip, #7
 80099b0:	e9cd c210 	strd	ip, r2, [sp, #64]	; 0x40
 80099b4:	e9cb 4100 	strd	r4, r1, [fp]
 80099b8:	f340 80e4 	ble.w	8009b84 <_vfiprintf_r+0x9ac>
 80099bc:	2a00      	cmp	r2, #0
 80099be:	f040 811d 	bne.w	8009bfc <_vfiprintf_r+0xa24>
 80099c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c4:	2b80      	cmp	r3, #128	; 0x80
 80099c6:	a81e      	add	r0, sp, #120	; 0x78
 80099c8:	f04f 0c01 	mov.w	ip, #1
 80099cc:	4611      	mov	r1, r2
 80099ce:	46d3      	mov	fp, sl
 80099d0:	f47f ae8c 	bne.w	80096ec <_vfiprintf_r+0x514>
 80099d4:	9b06      	ldr	r3, [sp, #24]
 80099d6:	9c01      	ldr	r4, [sp, #4]
 80099d8:	1b1d      	subs	r5, r3, r4
 80099da:	2d00      	cmp	r5, #0
 80099dc:	f77f ae86 	ble.w	80096ec <_vfiprintf_r+0x514>
 80099e0:	2d10      	cmp	r5, #16
 80099e2:	4c37      	ldr	r4, [pc, #220]	; (8009ac0 <_vfiprintf_r+0x8e8>)
 80099e4:	f340 81db 	ble.w	8009d9e <_vfiprintf_r+0xbc6>
 80099e8:	2710      	movs	r7, #16
 80099ea:	e006      	b.n	80099fa <_vfiprintf_r+0x822>
 80099ec:	1c88      	adds	r0, r1, #2
 80099ee:	f10b 0b08 	add.w	fp, fp, #8
 80099f2:	4619      	mov	r1, r3
 80099f4:	3d10      	subs	r5, #16
 80099f6:	2d10      	cmp	r5, #16
 80099f8:	dd11      	ble.n	8009a1e <_vfiprintf_r+0x846>
 80099fa:	1c4b      	adds	r3, r1, #1
 80099fc:	3210      	adds	r2, #16
 80099fe:	2b07      	cmp	r3, #7
 8009a00:	9211      	str	r2, [sp, #68]	; 0x44
 8009a02:	e9cb 4700 	strd	r4, r7, [fp]
 8009a06:	9310      	str	r3, [sp, #64]	; 0x40
 8009a08:	ddf0      	ble.n	80099ec <_vfiprintf_r+0x814>
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	f040 8092 	bne.w	8009b34 <_vfiprintf_r+0x95c>
 8009a10:	3d10      	subs	r5, #16
 8009a12:	2d10      	cmp	r5, #16
 8009a14:	f04f 0001 	mov.w	r0, #1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	46d3      	mov	fp, sl
 8009a1c:	dced      	bgt.n	80099fa <_vfiprintf_r+0x822>
 8009a1e:	f10b 0708 	add.w	r7, fp, #8
 8009a22:	442a      	add	r2, r5
 8009a24:	2807      	cmp	r0, #7
 8009a26:	9211      	str	r2, [sp, #68]	; 0x44
 8009a28:	e9cb 4500 	strd	r4, r5, [fp]
 8009a2c:	9010      	str	r0, [sp, #64]	; 0x40
 8009a2e:	f300 80f4 	bgt.w	8009c1a <_vfiprintf_r+0xa42>
 8009a32:	f100 0c01 	add.w	ip, r0, #1
 8009a36:	4601      	mov	r1, r0
 8009a38:	46bb      	mov	fp, r7
 8009a3a:	f107 0008 	add.w	r0, r7, #8
 8009a3e:	e655      	b.n	80096ec <_vfiprintf_r+0x514>
 8009a40:	aa0f      	add	r2, sp, #60	; 0x3c
 8009a42:	9902      	ldr	r1, [sp, #8]
 8009a44:	9807      	ldr	r0, [sp, #28]
 8009a46:	f7ff fb81 	bl	800914c <__sprint_r.part.0>
 8009a4a:	bb38      	cbnz	r0, 8009a9c <_vfiprintf_r+0x8c4>
 8009a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a4e:	4650      	mov	r0, sl
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	075c      	lsls	r4, r3, #29
 8009a54:	d505      	bpl.n	8009a62 <_vfiprintf_r+0x88a>
 8009a56:	9b06      	ldr	r3, [sp, #24]
 8009a58:	9901      	ldr	r1, [sp, #4]
 8009a5a:	1a5c      	subs	r4, r3, r1
 8009a5c:	2c00      	cmp	r4, #0
 8009a5e:	f73f ae95 	bgt.w	800978c <_vfiprintf_r+0x5b4>
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	9906      	ldr	r1, [sp, #24]
 8009a66:	9801      	ldr	r0, [sp, #4]
 8009a68:	4281      	cmp	r1, r0
 8009a6a:	bfac      	ite	ge
 8009a6c:	185b      	addge	r3, r3, r1
 8009a6e:	181b      	addlt	r3, r3, r0
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	b12a      	cbz	r2, 8009a80 <_vfiprintf_r+0x8a8>
 8009a74:	aa0f      	add	r2, sp, #60	; 0x3c
 8009a76:	9902      	ldr	r1, [sp, #8]
 8009a78:	9807      	ldr	r0, [sp, #28]
 8009a7a:	f7ff fb67 	bl	800914c <__sprint_r.part.0>
 8009a7e:	b968      	cbnz	r0, 8009a9c <_vfiprintf_r+0x8c4>
 8009a80:	2300      	movs	r3, #0
 8009a82:	9310      	str	r3, [sp, #64]	; 0x40
 8009a84:	f899 3000 	ldrb.w	r3, [r9]
 8009a88:	46d3      	mov	fp, sl
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f47f abe2 	bne.w	8009254 <_vfiprintf_r+0x7c>
 8009a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f040 8186 	bne.w	8009da4 <_vfiprintf_r+0xbcc>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9310      	str	r3, [sp, #64]	; 0x40
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009aa0:	899b      	ldrh	r3, [r3, #12]
 8009aa2:	07d1      	lsls	r1, r2, #31
 8009aa4:	d402      	bmi.n	8009aac <_vfiprintf_r+0x8d4>
 8009aa6:	059a      	lsls	r2, r3, #22
 8009aa8:	f140 80f9 	bpl.w	8009c9e <_vfiprintf_r+0xac6>
 8009aac:	065b      	lsls	r3, r3, #25
 8009aae:	f53f acc8 	bmi.w	8009442 <_vfiprintf_r+0x26a>
 8009ab2:	9804      	ldr	r0, [sp, #16]
 8009ab4:	b02d      	add	sp, #180	; 0xb4
 8009ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aba:	bf00      	nop
 8009abc:	0800bfc0 	.word	0x0800bfc0
 8009ac0:	0800c000 	.word	0x0800c000
 8009ac4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ac6:	4656      	mov	r6, sl
 8009ac8:	0923      	lsrs	r3, r4, #4
 8009aca:	f004 010f 	and.w	r1, r4, #15
 8009ace:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8009ad2:	092a      	lsrs	r2, r5, #4
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	4615      	mov	r5, r2
 8009ad8:	5c43      	ldrb	r3, [r0, r1]
 8009ada:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8009ade:	ea54 0305 	orrs.w	r3, r4, r5
 8009ae2:	d1f1      	bne.n	8009ac8 <_vfiprintf_r+0x8f0>
 8009ae4:	ebaa 0306 	sub.w	r3, sl, r6
 8009ae8:	9305      	str	r3, [sp, #20]
 8009aea:	9b05      	ldr	r3, [sp, #20]
 8009aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aee:	4543      	cmp	r3, r8
 8009af0:	bfb8      	it	lt
 8009af2:	4643      	movlt	r3, r8
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	2a00      	cmp	r2, #0
 8009af8:	f43f ad8e 	beq.w	8009618 <_vfiprintf_r+0x440>
 8009afc:	3301      	adds	r3, #1
 8009afe:	9301      	str	r3, [sp, #4]
 8009b00:	e58a      	b.n	8009618 <_vfiprintf_r+0x440>
 8009b02:	aa0f      	add	r2, sp, #60	; 0x3c
 8009b04:	9902      	ldr	r1, [sp, #8]
 8009b06:	9807      	ldr	r0, [sp, #28]
 8009b08:	f7ff fb20 	bl	800914c <__sprint_r.part.0>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d1c5      	bne.n	8009a9c <_vfiprintf_r+0x8c4>
 8009b10:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009b14:	4653      	mov	r3, sl
 8009b16:	f101 0e01 	add.w	lr, r1, #1
 8009b1a:	e59f      	b.n	800965c <_vfiprintf_r+0x484>
 8009b1c:	aa0f      	add	r2, sp, #60	; 0x3c
 8009b1e:	9902      	ldr	r1, [sp, #8]
 8009b20:	4640      	mov	r0, r8
 8009b22:	f7ff fb13 	bl	800914c <__sprint_r.part.0>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d1b8      	bne.n	8009a9c <_vfiprintf_r+0x8c4>
 8009b2a:	e9dd 7210 	ldrd	r7, r2, [sp, #64]	; 0x40
 8009b2e:	4650      	mov	r0, sl
 8009b30:	1c7b      	adds	r3, r7, #1
 8009b32:	e63e      	b.n	80097b2 <_vfiprintf_r+0x5da>
 8009b34:	aa0f      	add	r2, sp, #60	; 0x3c
 8009b36:	9902      	ldr	r1, [sp, #8]
 8009b38:	9807      	ldr	r0, [sp, #28]
 8009b3a:	f7ff fb07 	bl	800914c <__sprint_r.part.0>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d1ac      	bne.n	8009a9c <_vfiprintf_r+0x8c4>
 8009b42:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009b46:	46d3      	mov	fp, sl
 8009b48:	1c48      	adds	r0, r1, #1
 8009b4a:	e753      	b.n	80099f4 <_vfiprintf_r+0x81c>
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	f040 80f3 	bne.w	8009d38 <_vfiprintf_r+0xb60>
 8009b52:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
 8009b56:	2900      	cmp	r1, #0
 8009b58:	f000 8095 	beq.w	8009c86 <_vfiprintf_r+0xaae>
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 8009b62:	901c      	str	r0, [sp, #112]	; 0x70
 8009b64:	460a      	mov	r2, r1
 8009b66:	911d      	str	r1, [sp, #116]	; 0x74
 8009b68:	468c      	mov	ip, r1
 8009b6a:	a81e      	add	r0, sp, #120	; 0x78
 8009b6c:	4661      	mov	r1, ip
 8009b6e:	4683      	mov	fp, r0
 8009b70:	f10c 0c01 	add.w	ip, ip, #1
 8009b74:	3008      	adds	r0, #8
 8009b76:	e713      	b.n	80099a0 <_vfiprintf_r+0x7c8>
 8009b78:	a80e      	add	r0, sp, #56	; 0x38
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	e9cd 021c 	strd	r0, r2, [sp, #112]	; 0x70
 8009b80:	468c      	mov	ip, r1
 8009b82:	a81e      	add	r0, sp, #120	; 0x78
 8009b84:	4661      	mov	r1, ip
 8009b86:	4683      	mov	fp, r0
 8009b88:	f10c 0c01 	add.w	ip, ip, #1
 8009b8c:	3008      	adds	r0, #8
 8009b8e:	e5a9      	b.n	80096e4 <_vfiprintf_r+0x50c>
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	d14a      	bne.n	8009c2a <_vfiprintf_r+0xa52>
 8009b94:	9a05      	ldr	r2, [sp, #20]
 8009b96:	921d      	str	r2, [sp, #116]	; 0x74
 8009b98:	2101      	movs	r1, #1
 8009b9a:	9211      	str	r2, [sp, #68]	; 0x44
 8009b9c:	961c      	str	r6, [sp, #112]	; 0x70
 8009b9e:	9110      	str	r1, [sp, #64]	; 0x40
 8009ba0:	a81e      	add	r0, sp, #120	; 0x78
 8009ba2:	e755      	b.n	8009a50 <_vfiprintf_r+0x878>
 8009ba4:	9703      	str	r7, [sp, #12]
 8009ba6:	2d00      	cmp	r5, #0
 8009ba8:	bf08      	it	eq
 8009baa:	2c0a      	cmpeq	r4, #10
 8009bac:	f080 80ae 	bcs.w	8009d0c <_vfiprintf_r+0xb34>
 8009bb0:	ae2c      	add	r6, sp, #176	; 0xb0
 8009bb2:	3430      	adds	r4, #48	; 0x30
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8009bba:	9305      	str	r3, [sp, #20]
 8009bbc:	e795      	b.n	8009aea <_vfiprintf_r+0x912>
 8009bbe:	f8cd 8014 	str.w	r8, [sp, #20]
 8009bc2:	4656      	mov	r6, sl
 8009bc4:	e791      	b.n	8009aea <_vfiprintf_r+0x912>
 8009bc6:	aa0f      	add	r2, sp, #60	; 0x3c
 8009bc8:	9902      	ldr	r1, [sp, #8]
 8009bca:	9807      	ldr	r0, [sp, #28]
 8009bcc:	f7ff fabe 	bl	800914c <__sprint_r.part.0>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	f47f af63 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009bd6:	46d3      	mov	fp, sl
 8009bd8:	f7ff bb58 	b.w	800928c <_vfiprintf_r+0xb4>
 8009bdc:	2500      	movs	r5, #0
 8009bde:	e462      	b.n	80094a6 <_vfiprintf_r+0x2ce>
 8009be0:	17e5      	asrs	r5, r4, #31
 8009be2:	2c00      	cmp	r4, #0
 8009be4:	f175 0300 	sbcs.w	r3, r5, #0
 8009be8:	f6bf acfc 	bge.w	80095e4 <_vfiprintf_r+0x40c>
 8009bec:	232d      	movs	r3, #45	; 0x2d
 8009bee:	4264      	negs	r4, r4
 8009bf0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009bf4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8009bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfa:	e4f6      	b.n	80095ea <_vfiprintf_r+0x412>
 8009bfc:	aa0f      	add	r2, sp, #60	; 0x3c
 8009bfe:	9902      	ldr	r1, [sp, #8]
 8009c00:	9807      	ldr	r0, [sp, #28]
 8009c02:	f7ff faa3 	bl	800914c <__sprint_r.part.0>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f47f af48 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009c0c:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009c10:	a81e      	add	r0, sp, #120	; 0x78
 8009c12:	f101 0c01 	add.w	ip, r1, #1
 8009c16:	46d3      	mov	fp, sl
 8009c18:	e564      	b.n	80096e4 <_vfiprintf_r+0x50c>
 8009c1a:	2a00      	cmp	r2, #0
 8009c1c:	d15f      	bne.n	8009cde <_vfiprintf_r+0xb06>
 8009c1e:	a81e      	add	r0, sp, #120	; 0x78
 8009c20:	f04f 0c01 	mov.w	ip, #1
 8009c24:	4611      	mov	r1, r2
 8009c26:	46d3      	mov	fp, sl
 8009c28:	e560      	b.n	80096ec <_vfiprintf_r+0x514>
 8009c2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009c2c:	9902      	ldr	r1, [sp, #8]
 8009c2e:	9807      	ldr	r0, [sp, #28]
 8009c30:	f7ff fa8c 	bl	800914c <__sprint_r.part.0>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f47f af31 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009c3a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009c3e:	a81e      	add	r0, sp, #120	; 0x78
 8009c40:	f101 0c01 	add.w	ip, r1, #1
 8009c44:	46d3      	mov	fp, sl
 8009c46:	e589      	b.n	800975c <_vfiprintf_r+0x584>
 8009c48:	9d02      	ldr	r5, [sp, #8]
 8009c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4c:	f000 ffc6 	bl	800abdc <__retarget_lock_acquire_recursive>
 8009c50:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8009c54:	b28a      	uxth	r2, r1
 8009c56:	f7ff bad6 	b.w	8009206 <_vfiprintf_r+0x2e>
 8009c5a:	4656      	mov	r6, sl
 8009c5c:	e745      	b.n	8009aea <_vfiprintf_r+0x912>
 8009c5e:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8009c62:	bf1c      	itt	ne
 8009c64:	4613      	movne	r3, r2
 8009c66:	b2a4      	uxthne	r4, r4
 8009c68:	2500      	movs	r5, #0
 8009c6a:	e45f      	b.n	800952c <_vfiprintf_r+0x354>
 8009c6c:	067d      	lsls	r5, r7, #25
 8009c6e:	bf48      	it	mi
 8009c70:	b2a4      	uxthmi	r4, r4
 8009c72:	2500      	movs	r5, #0
 8009c74:	2301      	movs	r3, #1
 8009c76:	e459      	b.n	800952c <_vfiprintf_r+0x354>
 8009c78:	9a04      	ldr	r2, [sp, #16]
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	17d1      	asrs	r1, r2, #31
 8009c7e:	e9c3 0100 	strd	r0, r1, [r3]
 8009c82:	f7ff bae2 	b.w	800924a <_vfiprintf_r+0x72>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d176      	bne.n	8009d78 <_vfiprintf_r+0xba0>
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	a81e      	add	r0, sp, #120	; 0x78
 8009c8e:	f04f 0c01 	mov.w	ip, #1
 8009c92:	46d3      	mov	fp, sl
 8009c94:	e52a      	b.n	80096ec <_vfiprintf_r+0x514>
 8009c96:	4264      	negs	r4, r4
 8009c98:	9406      	str	r4, [sp, #24]
 8009c9a:	9308      	str	r3, [sp, #32]
 8009c9c:	e5f7      	b.n	800988e <_vfiprintf_r+0x6b6>
 8009c9e:	9c02      	ldr	r4, [sp, #8]
 8009ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca2:	f000 ffa3 	bl	800abec <__retarget_lock_release_recursive>
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	e700      	b.n	8009aac <_vfiprintf_r+0x8d4>
 8009caa:	aa0f      	add	r2, sp, #60	; 0x3c
 8009cac:	9902      	ldr	r1, [sp, #8]
 8009cae:	9807      	ldr	r0, [sp, #28]
 8009cb0:	f7ff fa4c 	bl	800914c <__sprint_r.part.0>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f47f aef1 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009cbc:	e6d1      	b.n	8009a62 <_vfiprintf_r+0x88a>
 8009cbe:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8009cc0:	f000 ff94 	bl	800abec <__retarget_lock_release_recursive>
 8009cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	e6f2      	b.n	8009ab2 <_vfiprintf_r+0x8da>
 8009ccc:	4643      	mov	r3, r8
 8009cce:	2b06      	cmp	r3, #6
 8009cd0:	bf28      	it	cs
 8009cd2:	2306      	movcs	r3, #6
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	9408      	str	r4, [sp, #32]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	4e47      	ldr	r6, [pc, #284]	; (8009df8 <_vfiprintf_r+0xc20>)
 8009cdc:	e499      	b.n	8009612 <_vfiprintf_r+0x43a>
 8009cde:	aa0f      	add	r2, sp, #60	; 0x3c
 8009ce0:	9902      	ldr	r1, [sp, #8]
 8009ce2:	9807      	ldr	r0, [sp, #28]
 8009ce4:	f7ff fa32 	bl	800914c <__sprint_r.part.0>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f47f aed7 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009cee:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009cf2:	a81e      	add	r0, sp, #120	; 0x78
 8009cf4:	f101 0c01 	add.w	ip, r1, #1
 8009cf8:	46d3      	mov	fp, sl
 8009cfa:	e4f7      	b.n	80096ec <_vfiprintf_r+0x514>
 8009cfc:	9a04      	ldr	r2, [sp, #16]
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f7ff baa3 	b.w	800924a <_vfiprintf_r+0x72>
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	f47f ab55 	bne.w	80093b4 <_vfiprintf_r+0x1dc>
 8009d0a:	e751      	b.n	8009bb0 <_vfiprintf_r+0x9d8>
 8009d0c:	4656      	mov	r6, sl
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	220a      	movs	r2, #10
 8009d14:	2300      	movs	r3, #0
 8009d16:	f001 fdc1 	bl	800b89c <__aeabi_uldivmod>
 8009d1a:	3230      	adds	r2, #48	; 0x30
 8009d1c:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8009d20:	4620      	mov	r0, r4
 8009d22:	4629      	mov	r1, r5
 8009d24:	2300      	movs	r3, #0
 8009d26:	220a      	movs	r2, #10
 8009d28:	f001 fdb8 	bl	800b89c <__aeabi_uldivmod>
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	460d      	mov	r5, r1
 8009d30:	ea54 0305 	orrs.w	r3, r4, r5
 8009d34:	d1eb      	bne.n	8009d0e <_vfiprintf_r+0xb36>
 8009d36:	e6d5      	b.n	8009ae4 <_vfiprintf_r+0x90c>
 8009d38:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d3a:	9902      	ldr	r1, [sp, #8]
 8009d3c:	9807      	ldr	r0, [sp, #28]
 8009d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d40:	f7ff fa04 	bl	800914c <__sprint_r.part.0>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f47f aea9 	bne.w	8009a9c <_vfiprintf_r+0x8c4>
 8009d4a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8009d4e:	46d3      	mov	fp, sl
 8009d50:	f101 0c01 	add.w	ip, r1, #1
 8009d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d56:	e4a8      	b.n	80096aa <_vfiprintf_r+0x4d2>
 8009d58:	4601      	mov	r1, r0
 8009d5a:	e4f0      	b.n	800973e <_vfiprintf_r+0x566>
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	9408      	str	r4, [sp, #32]
 8009d60:	9703      	str	r7, [sp, #12]
 8009d62:	f7ff f94d 	bl	8009000 <strlen>
 8009d66:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8009d6a:	9005      	str	r0, [sp, #20]
 8009d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	e6ba      	b.n	8009aea <_vfiprintf_r+0x912>
 8009d74:	4686      	mov	lr, r0
 8009d76:	e489      	b.n	800968c <_vfiprintf_r+0x4b4>
 8009d78:	a90e      	add	r1, sp, #56	; 0x38
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
 8009d80:	a81e      	add	r0, sp, #120	; 0x78
 8009d82:	f04f 0c01 	mov.w	ip, #1
 8009d86:	e6fd      	b.n	8009b84 <_vfiprintf_r+0x9ac>
 8009d88:	1c7b      	adds	r3, r7, #1
 8009d8a:	e527      	b.n	80097dc <_vfiprintf_r+0x604>
 8009d8c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8009d90:	f8cd 8014 	str.w	r8, [sp, #20]
 8009d94:	9309      	str	r3, [sp, #36]	; 0x24
 8009d96:	9408      	str	r4, [sp, #32]
 8009d98:	9703      	str	r7, [sp, #12]
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	e6a5      	b.n	8009aea <_vfiprintf_r+0x912>
 8009d9e:	4607      	mov	r7, r0
 8009da0:	4660      	mov	r0, ip
 8009da2:	e63e      	b.n	8009a22 <_vfiprintf_r+0x84a>
 8009da4:	9807      	ldr	r0, [sp, #28]
 8009da6:	9902      	ldr	r1, [sp, #8]
 8009da8:	aa0f      	add	r2, sp, #60	; 0x3c
 8009daa:	f7ff f9cf 	bl	800914c <__sprint_r.part.0>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f43f ae72 	beq.w	8009a98 <_vfiprintf_r+0x8c0>
 8009db4:	e672      	b.n	8009a9c <_vfiprintf_r+0x8c4>
 8009db6:	9d08      	ldr	r5, [sp, #32]
 8009db8:	f899 2001 	ldrb.w	r2, [r9, #1]
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	ea43 78e3 	orr.w	r8, r3, r3, asr #31
 8009dc2:	1d2b      	adds	r3, r5, #4
 8009dc4:	46a1      	mov	r9, r4
 8009dc6:	9308      	str	r3, [sp, #32]
 8009dc8:	f7ff ba74 	b.w	80092b4 <_vfiprintf_r+0xdc>
 8009dcc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8009dd0:	e51b      	b.n	800980a <_vfiprintf_r+0x632>
 8009dd2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8009dd6:	e5b7      	b.n	8009948 <_vfiprintf_r+0x770>
 8009dd8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8009ddc:	e52a      	b.n	8009834 <_vfiprintf_r+0x65c>
 8009dde:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8009de2:	f7ff bbee 	b.w	80095c2 <_vfiprintf_r+0x3ea>
 8009de6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8009dea:	f7ff bb4e 	b.w	800948a <_vfiprintf_r+0x2b2>
 8009dee:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8009df2:	f7ff bbc0 	b.w	8009576 <_vfiprintf_r+0x39e>
 8009df6:	bf00      	nop
 8009df8:	0800bfe8 	.word	0x0800bfe8

08009dfc <vfiprintf>:
 8009dfc:	b410      	push	{r4}
 8009dfe:	4c04      	ldr	r4, [pc, #16]	; (8009e10 <vfiprintf+0x14>)
 8009e00:	4613      	mov	r3, r2
 8009e02:	460a      	mov	r2, r1
 8009e04:	4601      	mov	r1, r0
 8009e06:	6820      	ldr	r0, [r4, #0]
 8009e08:	bc10      	pop	{r4}
 8009e0a:	f7ff b9e5 	b.w	80091d8 <_vfiprintf_r>
 8009e0e:	bf00      	nop
 8009e10:	200000d4 	.word	0x200000d4

08009e14 <__sbprintf>:
 8009e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e18:	460c      	mov	r4, r1
 8009e1a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8009e1e:	8989      	ldrh	r1, [r1, #12]
 8009e20:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8009e22:	89e5      	ldrh	r5, [r4, #14]
 8009e24:	9619      	str	r6, [sp, #100]	; 0x64
 8009e26:	f021 0102 	bic.w	r1, r1, #2
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	69e0      	ldr	r0, [r4, #28]
 8009e2e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8009e32:	4617      	mov	r7, r2
 8009e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e3a:	f8ad 500e 	strh.w	r5, [sp, #14]
 8009e3e:	4698      	mov	r8, r3
 8009e40:	ad1a      	add	r5, sp, #104	; 0x68
 8009e42:	2300      	movs	r3, #0
 8009e44:	9007      	str	r0, [sp, #28]
 8009e46:	a816      	add	r0, sp, #88	; 0x58
 8009e48:	9209      	str	r2, [sp, #36]	; 0x24
 8009e4a:	9306      	str	r3, [sp, #24]
 8009e4c:	9500      	str	r5, [sp, #0]
 8009e4e:	9504      	str	r5, [sp, #16]
 8009e50:	9102      	str	r1, [sp, #8]
 8009e52:	9105      	str	r1, [sp, #20]
 8009e54:	f000 feba 	bl	800abcc <__retarget_lock_init_recursive>
 8009e58:	4643      	mov	r3, r8
 8009e5a:	463a      	mov	r2, r7
 8009e5c:	4669      	mov	r1, sp
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff f9ba 	bl	80091d8 <_vfiprintf_r>
 8009e64:	1e05      	subs	r5, r0, #0
 8009e66:	db07      	blt.n	8009e78 <__sbprintf+0x64>
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4669      	mov	r1, sp
 8009e6c:	f000 f93a 	bl	800a0e4 <_fflush_r>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	bf18      	it	ne
 8009e74:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8009e78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009e7c:	065b      	lsls	r3, r3, #25
 8009e7e:	d503      	bpl.n	8009e88 <__sbprintf+0x74>
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009e8a:	f000 fea3 	bl	800abd4 <__retarget_lock_close_recursive>
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8009e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009e98 <__swsetup_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4b31      	ldr	r3, [pc, #196]	; (8009f60 <__swsetup_r+0xc8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	b113      	cbz	r3, 8009eaa <__swsetup_r+0x12>
 8009ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	d03a      	beq.n	8009f20 <__swsetup_r+0x88>
 8009eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eae:	b293      	uxth	r3, r2
 8009eb0:	0718      	lsls	r0, r3, #28
 8009eb2:	d50c      	bpl.n	8009ece <__swsetup_r+0x36>
 8009eb4:	6920      	ldr	r0, [r4, #16]
 8009eb6:	b1a8      	cbz	r0, 8009ee4 <__swsetup_r+0x4c>
 8009eb8:	f013 0201 	ands.w	r2, r3, #1
 8009ebc:	d020      	beq.n	8009f00 <__swsetup_r+0x68>
 8009ebe:	6963      	ldr	r3, [r4, #20]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	425b      	negs	r3, r3
 8009ec4:	61a3      	str	r3, [r4, #24]
 8009ec6:	60a2      	str	r2, [r4, #8]
 8009ec8:	b300      	cbz	r0, 8009f0c <__swsetup_r+0x74>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	bd38      	pop	{r3, r4, r5, pc}
 8009ece:	06d9      	lsls	r1, r3, #27
 8009ed0:	d53e      	bpl.n	8009f50 <__swsetup_r+0xb8>
 8009ed2:	0758      	lsls	r0, r3, #29
 8009ed4:	d428      	bmi.n	8009f28 <__swsetup_r+0x90>
 8009ed6:	6920      	ldr	r0, [r4, #16]
 8009ed8:	f042 0308 	orr.w	r3, r2, #8
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d1e9      	bne.n	8009eb8 <__swsetup_r+0x20>
 8009ee4:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8009ee8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009eec:	d0e4      	beq.n	8009eb8 <__swsetup_r+0x20>
 8009eee:	4628      	mov	r0, r5
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f000 feab 	bl	800ac4c <__smakebuf_r>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	6920      	ldr	r0, [r4, #16]
 8009efa:	f013 0201 	ands.w	r2, r3, #1
 8009efe:	d1de      	bne.n	8009ebe <__swsetup_r+0x26>
 8009f00:	0799      	lsls	r1, r3, #30
 8009f02:	bf58      	it	pl
 8009f04:	6962      	ldrpl	r2, [r4, #20]
 8009f06:	60a2      	str	r2, [r4, #8]
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d1de      	bne.n	8009eca <__swsetup_r+0x32>
 8009f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f10:	061a      	lsls	r2, r3, #24
 8009f12:	d5db      	bpl.n	8009ecc <__swsetup_r+0x34>
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 f98b 	bl	800a23c <__sinit>
 8009f26:	e7c0      	b.n	8009eaa <__swsetup_r+0x12>
 8009f28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009f2a:	b151      	cbz	r1, 8009f42 <__swsetup_r+0xaa>
 8009f2c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009f30:	4299      	cmp	r1, r3
 8009f32:	d004      	beq.n	8009f3e <__swsetup_r+0xa6>
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 fb29 	bl	800a58c <_free_r>
 8009f3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6323      	str	r3, [r4, #48]	; 0x30
 8009f42:	2300      	movs	r3, #0
 8009f44:	6920      	ldr	r0, [r4, #16]
 8009f46:	6063      	str	r3, [r4, #4]
 8009f48:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8009f4c:	6020      	str	r0, [r4, #0]
 8009f4e:	e7c3      	b.n	8009ed8 <__swsetup_r+0x40>
 8009f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f54:	2309      	movs	r3, #9
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f5c:	81a2      	strh	r2, [r4, #12]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	200000d4 	.word	0x200000d4

08009f64 <bzero>:
 8009f64:	460a      	mov	r2, r1
 8009f66:	2100      	movs	r1, #0
 8009f68:	f7fe bf00 	b.w	8008d6c <memset>

08009f6c <_close_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4c07      	ldr	r4, [pc, #28]	; (8009f8c <_close_r+0x20>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4605      	mov	r5, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	f001 fe10 	bl	800bb9c <_close>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d000      	beq.n	8009f82 <_close_r+0x16>
 8009f80:	bd38      	pop	{r3, r4, r5, pc}
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0fb      	beq.n	8009f80 <_close_r+0x14>
 8009f88:	602b      	str	r3, [r5, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	2000121c 	.word	0x2000121c

08009f90 <__sflush_r>:
 8009f90:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	0711      	lsls	r1, r2, #28
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	d444      	bmi.n	800a02c <__sflush_r+0x9c>
 8009fa2:	6862      	ldr	r2, [r4, #4]
 8009fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	dd59      	ble.n	800a062 <__sflush_r+0xd2>
 8009fae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009fb0:	2d00      	cmp	r5, #0
 8009fb2:	d053      	beq.n	800a05c <__sflush_r+0xcc>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	f8d8 6000 	ldr.w	r6, [r8]
 8009fbc:	69e1      	ldr	r1, [r4, #28]
 8009fbe:	f8c8 2000 	str.w	r2, [r8]
 8009fc2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8009fc6:	f040 8083 	bne.w	800a0d0 <__sflush_r+0x140>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4640      	mov	r0, r8
 8009fce:	47a8      	blx	r5
 8009fd0:	1c42      	adds	r2, r0, #1
 8009fd2:	d04a      	beq.n	800a06a <__sflush_r+0xda>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009fd8:	69e1      	ldr	r1, [r4, #28]
 8009fda:	075b      	lsls	r3, r3, #29
 8009fdc:	d505      	bpl.n	8009fea <__sflush_r+0x5a>
 8009fde:	6862      	ldr	r2, [r4, #4]
 8009fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009fe2:	1a80      	subs	r0, r0, r2
 8009fe4:	b10b      	cbz	r3, 8009fea <__sflush_r+0x5a>
 8009fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009fe8:	1ac0      	subs	r0, r0, r3
 8009fea:	4602      	mov	r2, r0
 8009fec:	2300      	movs	r3, #0
 8009fee:	4640      	mov	r0, r8
 8009ff0:	47a8      	blx	r5
 8009ff2:	1c47      	adds	r7, r0, #1
 8009ff4:	d045      	beq.n	800a082 <__sflush_r+0xf2>
 8009ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffa:	6922      	ldr	r2, [r4, #16]
 8009ffc:	6022      	str	r2, [r4, #0]
 8009ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a002:	2200      	movs	r2, #0
 800a004:	81a3      	strh	r3, [r4, #12]
 800a006:	04db      	lsls	r3, r3, #19
 800a008:	6062      	str	r2, [r4, #4]
 800a00a:	d500      	bpl.n	800a00e <__sflush_r+0x7e>
 800a00c:	6520      	str	r0, [r4, #80]	; 0x50
 800a00e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a010:	f8c8 6000 	str.w	r6, [r8]
 800a014:	b311      	cbz	r1, 800a05c <__sflush_r+0xcc>
 800a016:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a01a:	4299      	cmp	r1, r3
 800a01c:	d002      	beq.n	800a024 <__sflush_r+0x94>
 800a01e:	4640      	mov	r0, r8
 800a020:	f000 fab4 	bl	800a58c <_free_r>
 800a024:	2000      	movs	r0, #0
 800a026:	6320      	str	r0, [r4, #48]	; 0x30
 800a028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a02c:	6926      	ldr	r6, [r4, #16]
 800a02e:	b1ae      	cbz	r6, 800a05c <__sflush_r+0xcc>
 800a030:	6825      	ldr	r5, [r4, #0]
 800a032:	6026      	str	r6, [r4, #0]
 800a034:	0792      	lsls	r2, r2, #30
 800a036:	bf0c      	ite	eq
 800a038:	6963      	ldreq	r3, [r4, #20]
 800a03a:	2300      	movne	r3, #0
 800a03c:	1bad      	subs	r5, r5, r6
 800a03e:	60a3      	str	r3, [r4, #8]
 800a040:	e00a      	b.n	800a058 <__sflush_r+0xc8>
 800a042:	462b      	mov	r3, r5
 800a044:	4632      	mov	r2, r6
 800a046:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800a048:	69e1      	ldr	r1, [r4, #28]
 800a04a:	4640      	mov	r0, r8
 800a04c:	47b8      	blx	r7
 800a04e:	2800      	cmp	r0, #0
 800a050:	eba5 0500 	sub.w	r5, r5, r0
 800a054:	4406      	add	r6, r0
 800a056:	dd2b      	ble.n	800a0b0 <__sflush_r+0x120>
 800a058:	2d00      	cmp	r5, #0
 800a05a:	dcf2      	bgt.n	800a042 <__sflush_r+0xb2>
 800a05c:	2000      	movs	r0, #0
 800a05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a062:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a064:	2a00      	cmp	r2, #0
 800a066:	dca2      	bgt.n	8009fae <__sflush_r+0x1e>
 800a068:	e7f8      	b.n	800a05c <__sflush_r+0xcc>
 800a06a:	f8d8 3000 	ldr.w	r3, [r8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0b0      	beq.n	8009fd4 <__sflush_r+0x44>
 800a072:	2b1d      	cmp	r3, #29
 800a074:	d001      	beq.n	800a07a <__sflush_r+0xea>
 800a076:	2b16      	cmp	r3, #22
 800a078:	d12c      	bne.n	800a0d4 <__sflush_r+0x144>
 800a07a:	f8c8 6000 	str.w	r6, [r8]
 800a07e:	2000      	movs	r0, #0
 800a080:	e7ed      	b.n	800a05e <__sflush_r+0xce>
 800a082:	f8d8 1000 	ldr.w	r1, [r8]
 800a086:	291d      	cmp	r1, #29
 800a088:	d81a      	bhi.n	800a0c0 <__sflush_r+0x130>
 800a08a:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <__sflush_r+0x150>)
 800a08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a090:	40cb      	lsrs	r3, r1
 800a092:	43db      	mvns	r3, r3
 800a094:	f013 0301 	ands.w	r3, r3, #1
 800a098:	d114      	bne.n	800a0c4 <__sflush_r+0x134>
 800a09a:	6925      	ldr	r5, [r4, #16]
 800a09c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0a0:	e9c4 5300 	strd	r5, r3, [r4]
 800a0a4:	04d5      	lsls	r5, r2, #19
 800a0a6:	81a2      	strh	r2, [r4, #12]
 800a0a8:	d5b1      	bpl.n	800a00e <__sflush_r+0x7e>
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	d1af      	bne.n	800a00e <__sflush_r+0x7e>
 800a0ae:	e7ad      	b.n	800a00c <__sflush_r+0x7c>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0c8:	81a2      	strh	r2, [r4, #12]
 800a0ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ce:	e7c6      	b.n	800a05e <__sflush_r+0xce>
 800a0d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a0d2:	e782      	b.n	8009fda <__sflush_r+0x4a>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	e7bf      	b.n	800a05e <__sflush_r+0xce>
 800a0de:	bf00      	nop
 800a0e0:	20400001 	.word	0x20400001

0800a0e4 <_fflush_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	b108      	cbz	r0, 800a0f0 <_fflush_r+0xc>
 800a0ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a0ee:	b1a3      	cbz	r3, 800a11a <_fflush_r+0x36>
 800a0f0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800a0f4:	b1b8      	cbz	r0, 800a126 <_fflush_r+0x42>
 800a0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f8:	07db      	lsls	r3, r3, #31
 800a0fa:	d401      	bmi.n	800a100 <_fflush_r+0x1c>
 800a0fc:	0581      	lsls	r1, r0, #22
 800a0fe:	d51a      	bpl.n	800a136 <_fflush_r+0x52>
 800a100:	4620      	mov	r0, r4
 800a102:	4629      	mov	r1, r5
 800a104:	f7ff ff44 	bl	8009f90 <__sflush_r>
 800a108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a10a:	07da      	lsls	r2, r3, #31
 800a10c:	4604      	mov	r4, r0
 800a10e:	d402      	bmi.n	800a116 <_fflush_r+0x32>
 800a110:	89ab      	ldrh	r3, [r5, #12]
 800a112:	059b      	lsls	r3, r3, #22
 800a114:	d50a      	bpl.n	800a12c <_fflush_r+0x48>
 800a116:	4620      	mov	r0, r4
 800a118:	bd38      	pop	{r3, r4, r5, pc}
 800a11a:	f000 f88f 	bl	800a23c <__sinit>
 800a11e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800a122:	2800      	cmp	r0, #0
 800a124:	d1e7      	bne.n	800a0f6 <_fflush_r+0x12>
 800a126:	4604      	mov	r4, r0
 800a128:	4620      	mov	r0, r4
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12e:	f000 fd5d 	bl	800abec <__retarget_lock_release_recursive>
 800a132:	4620      	mov	r0, r4
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a138:	f000 fd50 	bl	800abdc <__retarget_lock_acquire_recursive>
 800a13c:	e7e0      	b.n	800a100 <_fflush_r+0x1c>
 800a13e:	bf00      	nop

0800a140 <fflush>:
 800a140:	b120      	cbz	r0, 800a14c <fflush+0xc>
 800a142:	4b05      	ldr	r3, [pc, #20]	; (800a158 <fflush+0x18>)
 800a144:	4601      	mov	r1, r0
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	f7ff bfcc 	b.w	800a0e4 <_fflush_r>
 800a14c:	4b03      	ldr	r3, [pc, #12]	; (800a15c <fflush+0x1c>)
 800a14e:	4904      	ldr	r1, [pc, #16]	; (800a160 <fflush+0x20>)
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	f000 bcc7 	b.w	800aae4 <_fwalk_reent>
 800a156:	bf00      	nop
 800a158:	200000d4 	.word	0x200000d4
 800a15c:	0800bfbc 	.word	0x0800bfbc
 800a160:	0800a0e5 	.word	0x0800a0e5

0800a164 <std>:
 800a164:	b510      	push	{r4, lr}
 800a166:	2300      	movs	r3, #0
 800a168:	4604      	mov	r4, r0
 800a16a:	8181      	strh	r1, [r0, #12]
 800a16c:	81c2      	strh	r2, [r0, #14]
 800a16e:	e9c0 3300 	strd	r3, r3, [r0]
 800a172:	6083      	str	r3, [r0, #8]
 800a174:	6643      	str	r3, [r0, #100]	; 0x64
 800a176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a17a:	6183      	str	r3, [r0, #24]
 800a17c:	4619      	mov	r1, r3
 800a17e:	2208      	movs	r2, #8
 800a180:	305c      	adds	r0, #92	; 0x5c
 800a182:	f7fe fdf3 	bl	8008d6c <memset>
 800a186:	4807      	ldr	r0, [pc, #28]	; (800a1a4 <std+0x40>)
 800a188:	4907      	ldr	r1, [pc, #28]	; (800a1a8 <std+0x44>)
 800a18a:	4a08      	ldr	r2, [pc, #32]	; (800a1ac <std+0x48>)
 800a18c:	4b08      	ldr	r3, [pc, #32]	; (800a1b0 <std+0x4c>)
 800a18e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a190:	e9c4 4007 	strd	r4, r0, [r4, #28]
 800a194:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 800a198:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a0:	f000 bd14 	b.w	800abcc <__retarget_lock_init_recursive>
 800a1a4:	0800b235 	.word	0x0800b235
 800a1a8:	0800b25d 	.word	0x0800b25d
 800a1ac:	0800b299 	.word	0x0800b299
 800a1b0:	0800b2b9 	.word	0x0800b2b9

0800a1b4 <_cleanup_r>:
 800a1b4:	4901      	ldr	r1, [pc, #4]	; (800a1bc <_cleanup_r+0x8>)
 800a1b6:	f000 bc95 	b.w	800aae4 <_fwalk_reent>
 800a1ba:	bf00      	nop
 800a1bc:	0800b76d 	.word	0x0800b76d

0800a1c0 <__fp_lock>:
 800a1c0:	b508      	push	{r3, lr}
 800a1c2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a1c4:	07da      	lsls	r2, r3, #31
 800a1c6:	d402      	bmi.n	800a1ce <__fp_lock+0xe>
 800a1c8:	8983      	ldrh	r3, [r0, #12]
 800a1ca:	059b      	lsls	r3, r3, #22
 800a1cc:	d501      	bpl.n	800a1d2 <__fp_lock+0x12>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	bd08      	pop	{r3, pc}
 800a1d2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800a1d4:	f000 fd02 	bl	800abdc <__retarget_lock_acquire_recursive>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	bd08      	pop	{r3, pc}

0800a1dc <__fp_unlock>:
 800a1dc:	b508      	push	{r3, lr}
 800a1de:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a1e0:	07da      	lsls	r2, r3, #31
 800a1e2:	d402      	bmi.n	800a1ea <__fp_unlock+0xe>
 800a1e4:	8983      	ldrh	r3, [r0, #12]
 800a1e6:	059b      	lsls	r3, r3, #22
 800a1e8:	d501      	bpl.n	800a1ee <__fp_unlock+0x12>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	bd08      	pop	{r3, pc}
 800a1ee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800a1f0:	f000 fcfc 	bl	800abec <__retarget_lock_release_recursive>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	bd08      	pop	{r3, pc}

0800a1f8 <__sfmoreglue>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	1e4a      	subs	r2, r1, #1
 800a1fc:	2568      	movs	r5, #104	; 0x68
 800a1fe:	fb05 f502 	mul.w	r5, r5, r2
 800a202:	460e      	mov	r6, r1
 800a204:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a208:	f7fe fa0e 	bl	8008628 <_malloc_r>
 800a20c:	4604      	mov	r4, r0
 800a20e:	b140      	cbz	r0, 800a222 <__sfmoreglue+0x2a>
 800a210:	2100      	movs	r1, #0
 800a212:	300c      	adds	r0, #12
 800a214:	6066      	str	r6, [r4, #4]
 800a216:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a21a:	6021      	str	r1, [r4, #0]
 800a21c:	60a0      	str	r0, [r4, #8]
 800a21e:	f7fe fda5 	bl	8008d6c <memset>
 800a222:	4620      	mov	r0, r4
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	bf00      	nop

0800a228 <_cleanup>:
 800a228:	4b02      	ldr	r3, [pc, #8]	; (800a234 <_cleanup+0xc>)
 800a22a:	4903      	ldr	r1, [pc, #12]	; (800a238 <_cleanup+0x10>)
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	f000 bc59 	b.w	800aae4 <_fwalk_reent>
 800a232:	bf00      	nop
 800a234:	0800bfbc 	.word	0x0800bfbc
 800a238:	0800b76d 	.word	0x0800b76d

0800a23c <__sinit>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	4604      	mov	r4, r0
 800a240:	4812      	ldr	r0, [pc, #72]	; (800a28c <__sinit+0x50>)
 800a242:	f000 fccb 	bl	800abdc <__retarget_lock_acquire_recursive>
 800a246:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a248:	b9d2      	cbnz	r2, 800a280 <__sinit+0x44>
 800a24a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a24e:	4810      	ldr	r0, [pc, #64]	; (800a290 <__sinit+0x54>)
 800a250:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a254:	2103      	movs	r1, #3
 800a256:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a25a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800a25c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
 800a260:	6860      	ldr	r0, [r4, #4]
 800a262:	2104      	movs	r1, #4
 800a264:	f7ff ff7e 	bl	800a164 <std>
 800a268:	2201      	movs	r2, #1
 800a26a:	2109      	movs	r1, #9
 800a26c:	68a0      	ldr	r0, [r4, #8]
 800a26e:	f7ff ff79 	bl	800a164 <std>
 800a272:	2202      	movs	r2, #2
 800a274:	2112      	movs	r1, #18
 800a276:	68e0      	ldr	r0, [r4, #12]
 800a278:	f7ff ff74 	bl	800a164 <std>
 800a27c:	2301      	movs	r3, #1
 800a27e:	63a3      	str	r3, [r4, #56]	; 0x38
 800a280:	4802      	ldr	r0, [pc, #8]	; (800a28c <__sinit+0x50>)
 800a282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a286:	f000 bcb1 	b.w	800abec <__retarget_lock_release_recursive>
 800a28a:	bf00      	nop
 800a28c:	20001204 	.word	0x20001204
 800a290:	0800a1b5 	.word	0x0800a1b5

0800a294 <__sfp>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	4606      	mov	r6, r0
 800a298:	4824      	ldr	r0, [pc, #144]	; (800a32c <__sfp+0x98>)
 800a29a:	f000 fc9f 	bl	800abdc <__retarget_lock_acquire_recursive>
 800a29e:	4b24      	ldr	r3, [pc, #144]	; (800a330 <__sfp+0x9c>)
 800a2a0:	681d      	ldr	r5, [r3, #0]
 800a2a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a2a4:	b383      	cbz	r3, 800a308 <__sfp+0x74>
 800a2a6:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800a2aa:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	d505      	bpl.n	800a2be <__sfp+0x2a>
 800a2b2:	e025      	b.n	800a300 <__sfp+0x6c>
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800a2bc:	d020      	beq.n	800a300 <__sfp+0x6c>
 800a2be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	d1f6      	bne.n	800a2b4 <__sfp+0x20>
 800a2c6:	2500      	movs	r5, #0
 800a2c8:	4b1a      	ldr	r3, [pc, #104]	; (800a334 <__sfp+0xa0>)
 800a2ca:	60e3      	str	r3, [r4, #12]
 800a2cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2d0:	6665      	str	r5, [r4, #100]	; 0x64
 800a2d2:	f000 fc7b 	bl	800abcc <__retarget_lock_init_recursive>
 800a2d6:	4815      	ldr	r0, [pc, #84]	; (800a32c <__sfp+0x98>)
 800a2d8:	f000 fc88 	bl	800abec <__retarget_lock_release_recursive>
 800a2dc:	6025      	str	r5, [r4, #0]
 800a2de:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2e2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2e6:	61a5      	str	r5, [r4, #24]
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	2208      	movs	r2, #8
 800a2ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2f0:	f7fe fd3c 	bl	8008d6c <memset>
 800a2f4:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 800a2f8:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}
 800a300:	682c      	ldr	r4, [r5, #0]
 800a302:	b12c      	cbz	r4, 800a310 <__sfp+0x7c>
 800a304:	4625      	mov	r5, r4
 800a306:	e7d0      	b.n	800a2aa <__sfp+0x16>
 800a308:	4628      	mov	r0, r5
 800a30a:	f7ff ff97 	bl	800a23c <__sinit>
 800a30e:	e7ca      	b.n	800a2a6 <__sfp+0x12>
 800a310:	2104      	movs	r1, #4
 800a312:	4630      	mov	r0, r6
 800a314:	f7ff ff70 	bl	800a1f8 <__sfmoreglue>
 800a318:	4604      	mov	r4, r0
 800a31a:	6028      	str	r0, [r5, #0]
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d1f1      	bne.n	800a304 <__sfp+0x70>
 800a320:	4802      	ldr	r0, [pc, #8]	; (800a32c <__sfp+0x98>)
 800a322:	f000 fc63 	bl	800abec <__retarget_lock_release_recursive>
 800a326:	230c      	movs	r3, #12
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	e7e7      	b.n	800a2fc <__sfp+0x68>
 800a32c:	20001218 	.word	0x20001218
 800a330:	0800bfbc 	.word	0x0800bfbc
 800a334:	ffff0001 	.word	0xffff0001

0800a338 <__sfp_lock_acquire>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__sfp_lock_acquire+0x8>)
 800a33a:	f000 bc4f 	b.w	800abdc <__retarget_lock_acquire_recursive>
 800a33e:	bf00      	nop
 800a340:	20001218 	.word	0x20001218

0800a344 <__sfp_lock_release>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__sfp_lock_release+0x8>)
 800a346:	f000 bc51 	b.w	800abec <__retarget_lock_release_recursive>
 800a34a:	bf00      	nop
 800a34c:	20001218 	.word	0x20001218

0800a350 <__sinit_lock_acquire>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__sinit_lock_acquire+0x8>)
 800a352:	f000 bc43 	b.w	800abdc <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	20001204 	.word	0x20001204

0800a35c <__sinit_lock_release>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__sinit_lock_release+0x8>)
 800a35e:	f000 bc45 	b.w	800abec <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	20001204 	.word	0x20001204

0800a368 <__fp_lock_all>:
 800a368:	b508      	push	{r3, lr}
 800a36a:	4805      	ldr	r0, [pc, #20]	; (800a380 <__fp_lock_all+0x18>)
 800a36c:	f000 fc36 	bl	800abdc <__retarget_lock_acquire_recursive>
 800a370:	4b04      	ldr	r3, [pc, #16]	; (800a384 <__fp_lock_all+0x1c>)
 800a372:	4905      	ldr	r1, [pc, #20]	; (800a388 <__fp_lock_all+0x20>)
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a37a:	f000 bb8d 	b.w	800aa98 <_fwalk>
 800a37e:	bf00      	nop
 800a380:	20001218 	.word	0x20001218
 800a384:	200000d4 	.word	0x200000d4
 800a388:	0800a1c1 	.word	0x0800a1c1

0800a38c <__fp_unlock_all>:
 800a38c:	b508      	push	{r3, lr}
 800a38e:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <__fp_unlock_all+0x18>)
 800a390:	4905      	ldr	r1, [pc, #20]	; (800a3a8 <__fp_unlock_all+0x1c>)
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	f000 fb80 	bl	800aa98 <_fwalk>
 800a398:	4804      	ldr	r0, [pc, #16]	; (800a3ac <__fp_unlock_all+0x20>)
 800a39a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a39e:	f000 bc25 	b.w	800abec <__retarget_lock_release_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	200000d4 	.word	0x200000d4
 800a3a8:	0800a1dd 	.word	0x0800a1dd
 800a3ac:	20001218 	.word	0x20001218

0800a3b0 <__fputwc>:
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	4681      	mov	r9, r0
 800a3b8:	4688      	mov	r8, r1
 800a3ba:	4614      	mov	r4, r2
 800a3bc:	f000 fbdc 	bl	800ab78 <__locale_mb_cur_max>
 800a3c0:	2801      	cmp	r0, #1
 800a3c2:	d103      	bne.n	800a3cc <__fputwc+0x1c>
 800a3c4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800a3c8:	2bfe      	cmp	r3, #254	; 0xfe
 800a3ca:	d933      	bls.n	800a434 <__fputwc+0x84>
 800a3cc:	4642      	mov	r2, r8
 800a3ce:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a3d2:	a901      	add	r1, sp, #4
 800a3d4:	4648      	mov	r0, r9
 800a3d6:	f001 f941 	bl	800b65c <_wcrtomb_r>
 800a3da:	1c42      	adds	r2, r0, #1
 800a3dc:	4606      	mov	r6, r0
 800a3de:	d02f      	beq.n	800a440 <__fputwc+0x90>
 800a3e0:	b320      	cbz	r0, 800a42c <__fputwc+0x7c>
 800a3e2:	f89d c004 	ldrb.w	ip, [sp, #4]
 800a3e6:	2500      	movs	r5, #0
 800a3e8:	f10d 0a04 	add.w	sl, sp, #4
 800a3ec:	e009      	b.n	800a402 <__fputwc+0x52>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	6022      	str	r2, [r4, #0]
 800a3f4:	f883 c000 	strb.w	ip, [r3]
 800a3f8:	3501      	adds	r5, #1
 800a3fa:	42b5      	cmp	r5, r6
 800a3fc:	d216      	bcs.n	800a42c <__fputwc+0x7c>
 800a3fe:	f815 c00a 	ldrb.w	ip, [r5, sl]
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	3b01      	subs	r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	60a3      	str	r3, [r4, #8]
 800a40a:	daf0      	bge.n	800a3ee <__fputwc+0x3e>
 800a40c:	69a7      	ldr	r7, [r4, #24]
 800a40e:	42bb      	cmp	r3, r7
 800a410:	4661      	mov	r1, ip
 800a412:	4622      	mov	r2, r4
 800a414:	4648      	mov	r0, r9
 800a416:	db02      	blt.n	800a41e <__fputwc+0x6e>
 800a418:	f1bc 0f0a 	cmp.w	ip, #10
 800a41c:	d1e7      	bne.n	800a3ee <__fputwc+0x3e>
 800a41e:	f001 f8bd 	bl	800b59c <__swbuf_r>
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	d1e8      	bne.n	800a3f8 <__fputwc+0x48>
 800a426:	b002      	add	sp, #8
 800a428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a42c:	4640      	mov	r0, r8
 800a42e:	b002      	add	sp, #8
 800a430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a434:	fa5f fc88 	uxtb.w	ip, r8
 800a438:	4606      	mov	r6, r0
 800a43a:	f88d c004 	strb.w	ip, [sp, #4]
 800a43e:	e7d2      	b.n	800a3e6 <__fputwc+0x36>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	b002      	add	sp, #8
 800a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44e:	bf00      	nop

0800a450 <_fputwc_r>:
 800a450:	b530      	push	{r4, r5, lr}
 800a452:	4605      	mov	r5, r0
 800a454:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800a456:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a45a:	07c0      	lsls	r0, r0, #31
 800a45c:	4614      	mov	r4, r2
 800a45e:	b083      	sub	sp, #12
 800a460:	b29a      	uxth	r2, r3
 800a462:	d401      	bmi.n	800a468 <_fputwc_r+0x18>
 800a464:	0590      	lsls	r0, r2, #22
 800a466:	d51c      	bpl.n	800a4a2 <_fputwc_r+0x52>
 800a468:	0490      	lsls	r0, r2, #18
 800a46a:	d406      	bmi.n	800a47a <_fputwc_r+0x2a>
 800a46c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a46e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a476:	81a3      	strh	r3, [r4, #12]
 800a478:	6662      	str	r2, [r4, #100]	; 0x64
 800a47a:	4628      	mov	r0, r5
 800a47c:	4622      	mov	r2, r4
 800a47e:	f7ff ff97 	bl	800a3b0 <__fputwc>
 800a482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a484:	07da      	lsls	r2, r3, #31
 800a486:	4605      	mov	r5, r0
 800a488:	d402      	bmi.n	800a490 <_fputwc_r+0x40>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	059b      	lsls	r3, r3, #22
 800a48e:	d502      	bpl.n	800a496 <_fputwc_r+0x46>
 800a490:	4628      	mov	r0, r5
 800a492:	b003      	add	sp, #12
 800a494:	bd30      	pop	{r4, r5, pc}
 800a496:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a498:	f000 fba8 	bl	800abec <__retarget_lock_release_recursive>
 800a49c:	4628      	mov	r0, r5
 800a49e:	b003      	add	sp, #12
 800a4a0:	bd30      	pop	{r4, r5, pc}
 800a4a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4a4:	9101      	str	r1, [sp, #4]
 800a4a6:	f000 fb99 	bl	800abdc <__retarget_lock_acquire_recursive>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	9901      	ldr	r1, [sp, #4]
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	e7d9      	b.n	800a468 <_fputwc_r+0x18>

0800a4b4 <fputwc>:
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <fputwc+0x34>)
 800a4b6:	b570      	push	{r4, r5, r6, lr}
 800a4b8:	681c      	ldr	r4, [r3, #0]
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	460e      	mov	r6, r1
 800a4be:	b10c      	cbz	r4, 800a4c4 <fputwc+0x10>
 800a4c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4c2:	b133      	cbz	r3, 800a4d2 <fputwc+0x1e>
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4ce:	f7ff bfbf 	b.w	800a450 <_fputwc_r>
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f7ff feb2 	bl	800a23c <__sinit>
 800a4d8:	4632      	mov	r2, r6
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4620      	mov	r0, r4
 800a4de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4e2:	f7ff bfb5 	b.w	800a450 <_fputwc_r>
 800a4e6:	bf00      	nop
 800a4e8:	200000d4 	.word	0x200000d4

0800a4ec <_malloc_trim_r>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	4f24      	ldr	r7, [pc, #144]	; (800a580 <_malloc_trim_r+0x94>)
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	f7fe fc84 	bl	8008e00 <__malloc_lock>
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	685d      	ldr	r5, [r3, #4]
 800a4fc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800a500:	310f      	adds	r1, #15
 800a502:	f025 0503 	bic.w	r5, r5, #3
 800a506:	4429      	add	r1, r5
 800a508:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800a50c:	f021 010f 	bic.w	r1, r1, #15
 800a510:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800a514:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800a518:	db07      	blt.n	800a52a <_malloc_trim_r+0x3e>
 800a51a:	2100      	movs	r1, #0
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7fe fc7b 	bl	8008e18 <_sbrk_r>
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	442b      	add	r3, r5
 800a526:	4298      	cmp	r0, r3
 800a528:	d004      	beq.n	800a534 <_malloc_trim_r+0x48>
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7fe fc6e 	bl	8008e0c <__malloc_unlock>
 800a530:	2000      	movs	r0, #0
 800a532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a534:	4261      	negs	r1, r4
 800a536:	4630      	mov	r0, r6
 800a538:	f7fe fc6e 	bl	8008e18 <_sbrk_r>
 800a53c:	3001      	adds	r0, #1
 800a53e:	d00d      	beq.n	800a55c <_malloc_trim_r+0x70>
 800a540:	4b10      	ldr	r3, [pc, #64]	; (800a584 <_malloc_trim_r+0x98>)
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	6819      	ldr	r1, [r3, #0]
 800a546:	1b2d      	subs	r5, r5, r4
 800a548:	f045 0501 	orr.w	r5, r5, #1
 800a54c:	4630      	mov	r0, r6
 800a54e:	1b09      	subs	r1, r1, r4
 800a550:	6055      	str	r5, [r2, #4]
 800a552:	6019      	str	r1, [r3, #0]
 800a554:	f7fe fc5a 	bl	8008e0c <__malloc_unlock>
 800a558:	2001      	movs	r0, #1
 800a55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a55c:	2100      	movs	r1, #0
 800a55e:	4630      	mov	r0, r6
 800a560:	f7fe fc5a 	bl	8008e18 <_sbrk_r>
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	1a83      	subs	r3, r0, r2
 800a568:	2b0f      	cmp	r3, #15
 800a56a:	ddde      	ble.n	800a52a <_malloc_trim_r+0x3e>
 800a56c:	4c06      	ldr	r4, [pc, #24]	; (800a588 <_malloc_trim_r+0x9c>)
 800a56e:	4905      	ldr	r1, [pc, #20]	; (800a584 <_malloc_trim_r+0x98>)
 800a570:	6824      	ldr	r4, [r4, #0]
 800a572:	f043 0301 	orr.w	r3, r3, #1
 800a576:	1b00      	subs	r0, r0, r4
 800a578:	6053      	str	r3, [r2, #4]
 800a57a:	6008      	str	r0, [r1, #0]
 800a57c:	e7d5      	b.n	800a52a <_malloc_trim_r+0x3e>
 800a57e:	bf00      	nop
 800a580:	20000500 	.word	0x20000500
 800a584:	20000b28 	.word	0x20000b28
 800a588:	20000908 	.word	0x20000908

0800a58c <_free_r>:
 800a58c:	2900      	cmp	r1, #0
 800a58e:	d053      	beq.n	800a638 <_free_r+0xac>
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	460c      	mov	r4, r1
 800a594:	4606      	mov	r6, r0
 800a596:	f7fe fc33 	bl	8008e00 <__malloc_lock>
 800a59a:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800a59e:	4f71      	ldr	r7, [pc, #452]	; (800a764 <_free_r+0x1d8>)
 800a5a0:	f02c 0101 	bic.w	r1, ip, #1
 800a5a4:	f1a4 0508 	sub.w	r5, r4, #8
 800a5a8:	186b      	adds	r3, r5, r1
 800a5aa:	68b8      	ldr	r0, [r7, #8]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	4298      	cmp	r0, r3
 800a5b0:	f022 0203 	bic.w	r2, r2, #3
 800a5b4:	d053      	beq.n	800a65e <_free_r+0xd2>
 800a5b6:	f01c 0f01 	tst.w	ip, #1
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	eb03 0002 	add.w	r0, r3, r2
 800a5c0:	d13b      	bne.n	800a63a <_free_r+0xae>
 800a5c2:	f854 cc08 	ldr.w	ip, [r4, #-8]
 800a5c6:	6840      	ldr	r0, [r0, #4]
 800a5c8:	eba5 050c 	sub.w	r5, r5, ip
 800a5cc:	f107 0e08 	add.w	lr, r7, #8
 800a5d0:	68ac      	ldr	r4, [r5, #8]
 800a5d2:	4574      	cmp	r4, lr
 800a5d4:	4461      	add	r1, ip
 800a5d6:	f000 0001 	and.w	r0, r0, #1
 800a5da:	d075      	beq.n	800a6c8 <_free_r+0x13c>
 800a5dc:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800a5e0:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a5e4:	f8cc 4008 	str.w	r4, [ip, #8]
 800a5e8:	b360      	cbz	r0, 800a644 <_free_r+0xb8>
 800a5ea:	f041 0301 	orr.w	r3, r1, #1
 800a5ee:	606b      	str	r3, [r5, #4]
 800a5f0:	5069      	str	r1, [r5, r1]
 800a5f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a5f6:	d350      	bcc.n	800a69a <_free_r+0x10e>
 800a5f8:	0a4b      	lsrs	r3, r1, #9
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d870      	bhi.n	800a6e0 <_free_r+0x154>
 800a5fe:	098b      	lsrs	r3, r1, #6
 800a600:	f103 0439 	add.w	r4, r3, #57	; 0x39
 800a604:	00e4      	lsls	r4, r4, #3
 800a606:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a60a:	1938      	adds	r0, r7, r4
 800a60c:	593b      	ldr	r3, [r7, r4]
 800a60e:	3808      	subs	r0, #8
 800a610:	4298      	cmp	r0, r3
 800a612:	d078      	beq.n	800a706 <_free_r+0x17a>
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	f022 0203 	bic.w	r2, r2, #3
 800a61a:	428a      	cmp	r2, r1
 800a61c:	d971      	bls.n	800a702 <_free_r+0x176>
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	4298      	cmp	r0, r3
 800a622:	d1f7      	bne.n	800a614 <_free_r+0x88>
 800a624:	68c3      	ldr	r3, [r0, #12]
 800a626:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800a62a:	609d      	str	r5, [r3, #8]
 800a62c:	60c5      	str	r5, [r0, #12]
 800a62e:	4630      	mov	r0, r6
 800a630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a634:	f7fe bbea 	b.w	8008e0c <__malloc_unlock>
 800a638:	4770      	bx	lr
 800a63a:	6840      	ldr	r0, [r0, #4]
 800a63c:	f000 0001 	and.w	r0, r0, #1
 800a640:	2800      	cmp	r0, #0
 800a642:	d1d2      	bne.n	800a5ea <_free_r+0x5e>
 800a644:	6898      	ldr	r0, [r3, #8]
 800a646:	4c48      	ldr	r4, [pc, #288]	; (800a768 <_free_r+0x1dc>)
 800a648:	4411      	add	r1, r2
 800a64a:	42a0      	cmp	r0, r4
 800a64c:	f041 0201 	orr.w	r2, r1, #1
 800a650:	d062      	beq.n	800a718 <_free_r+0x18c>
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	60c3      	str	r3, [r0, #12]
 800a656:	6098      	str	r0, [r3, #8]
 800a658:	606a      	str	r2, [r5, #4]
 800a65a:	5069      	str	r1, [r5, r1]
 800a65c:	e7c9      	b.n	800a5f2 <_free_r+0x66>
 800a65e:	f01c 0f01 	tst.w	ip, #1
 800a662:	440a      	add	r2, r1
 800a664:	d107      	bne.n	800a676 <_free_r+0xea>
 800a666:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a66a:	1aed      	subs	r5, r5, r3
 800a66c:	441a      	add	r2, r3
 800a66e:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800a672:	60cb      	str	r3, [r1, #12]
 800a674:	6099      	str	r1, [r3, #8]
 800a676:	4b3d      	ldr	r3, [pc, #244]	; (800a76c <_free_r+0x1e0>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0101 	orr.w	r1, r2, #1
 800a67e:	4293      	cmp	r3, r2
 800a680:	6069      	str	r1, [r5, #4]
 800a682:	60bd      	str	r5, [r7, #8]
 800a684:	d804      	bhi.n	800a690 <_free_r+0x104>
 800a686:	4b3a      	ldr	r3, [pc, #232]	; (800a770 <_free_r+0x1e4>)
 800a688:	4630      	mov	r0, r6
 800a68a:	6819      	ldr	r1, [r3, #0]
 800a68c:	f7ff ff2e 	bl	800a4ec <_malloc_trim_r>
 800a690:	4630      	mov	r0, r6
 800a692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a696:	f7fe bbb9 	b.w	8008e0c <__malloc_unlock>
 800a69a:	08c9      	lsrs	r1, r1, #3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	1c4a      	adds	r2, r1, #1
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	1089      	asrs	r1, r1, #2
 800a6a4:	408b      	lsls	r3, r1
 800a6a6:	4303      	orrs	r3, r0
 800a6a8:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800a6ac:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 800a6b0:	607b      	str	r3, [r7, #4]
 800a6b2:	3908      	subs	r1, #8
 800a6b4:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a6b8:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 800a6bc:	60c5      	str	r5, [r0, #12]
 800a6be:	4630      	mov	r0, r6
 800a6c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6c4:	f7fe bba2 	b.w	8008e0c <__malloc_unlock>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d145      	bne.n	800a758 <_free_r+0x1cc>
 800a6cc:	440a      	add	r2, r1
 800a6ce:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 800a6d2:	f042 0001 	orr.w	r0, r2, #1
 800a6d6:	60cb      	str	r3, [r1, #12]
 800a6d8:	6099      	str	r1, [r3, #8]
 800a6da:	6068      	str	r0, [r5, #4]
 800a6dc:	50aa      	str	r2, [r5, r2]
 800a6de:	e7d7      	b.n	800a690 <_free_r+0x104>
 800a6e0:	2b14      	cmp	r3, #20
 800a6e2:	d908      	bls.n	800a6f6 <_free_r+0x16a>
 800a6e4:	2b54      	cmp	r3, #84	; 0x54
 800a6e6:	d81e      	bhi.n	800a726 <_free_r+0x19a>
 800a6e8:	0b0b      	lsrs	r3, r1, #12
 800a6ea:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800a6ee:	00e4      	lsls	r4, r4, #3
 800a6f0:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800a6f4:	e789      	b.n	800a60a <_free_r+0x7e>
 800a6f6:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800a6fa:	00e4      	lsls	r4, r4, #3
 800a6fc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800a700:	e783      	b.n	800a60a <_free_r+0x7e>
 800a702:	4618      	mov	r0, r3
 800a704:	e78e      	b.n	800a624 <_free_r+0x98>
 800a706:	1093      	asrs	r3, r2, #2
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	fa02 f303 	lsl.w	r3, r2, r3
 800a710:	430b      	orrs	r3, r1
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	4603      	mov	r3, r0
 800a716:	e786      	b.n	800a626 <_free_r+0x9a>
 800a718:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800a71c:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800a720:	606a      	str	r2, [r5, #4]
 800a722:	5069      	str	r1, [r5, r1]
 800a724:	e7b4      	b.n	800a690 <_free_r+0x104>
 800a726:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a72a:	d806      	bhi.n	800a73a <_free_r+0x1ae>
 800a72c:	0bcb      	lsrs	r3, r1, #15
 800a72e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800a732:	00e4      	lsls	r4, r4, #3
 800a734:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800a738:	e767      	b.n	800a60a <_free_r+0x7e>
 800a73a:	f240 5254 	movw	r2, #1364	; 0x554
 800a73e:	4293      	cmp	r3, r2
 800a740:	d806      	bhi.n	800a750 <_free_r+0x1c4>
 800a742:	0c8b      	lsrs	r3, r1, #18
 800a744:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800a748:	00e4      	lsls	r4, r4, #3
 800a74a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800a74e:	e75c      	b.n	800a60a <_free_r+0x7e>
 800a750:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 800a754:	227e      	movs	r2, #126	; 0x7e
 800a756:	e758      	b.n	800a60a <_free_r+0x7e>
 800a758:	f041 0201 	orr.w	r2, r1, #1
 800a75c:	606a      	str	r2, [r5, #4]
 800a75e:	6019      	str	r1, [r3, #0]
 800a760:	e796      	b.n	800a690 <_free_r+0x104>
 800a762:	bf00      	nop
 800a764:	20000500 	.word	0x20000500
 800a768:	20000508 	.word	0x20000508
 800a76c:	2000090c 	.word	0x2000090c
 800a770:	20000b58 	.word	0x20000b58

0800a774 <_fstat_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	460b      	mov	r3, r1
 800a778:	4c07      	ldr	r4, [pc, #28]	; (800a798 <_fstat_r+0x24>)
 800a77a:	4605      	mov	r5, r0
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	2300      	movs	r3, #0
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	f001 fa12 	bl	800bbac <_fstat>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d000      	beq.n	800a78e <_fstat_r+0x1a>
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0fb      	beq.n	800a78c <_fstat_r+0x18>
 800a794:	602b      	str	r3, [r5, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	2000121c 	.word	0x2000121c

0800a79c <__sfvwrite_r>:
 800a79c:	6893      	ldr	r3, [r2, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80e4 	beq.w	800a96c <__sfvwrite_r+0x1d0>
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	0719      	lsls	r1, r3, #28
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	4690      	mov	r8, r2
 800a7b8:	d535      	bpl.n	800a826 <__sfvwrite_r+0x8a>
 800a7ba:	6922      	ldr	r2, [r4, #16]
 800a7bc:	b39a      	cbz	r2, 800a826 <__sfvwrite_r+0x8a>
 800a7be:	f013 0202 	ands.w	r2, r3, #2
 800a7c2:	f8d8 6000 	ldr.w	r6, [r8]
 800a7c6:	d03d      	beq.n	800a844 <__sfvwrite_r+0xa8>
 800a7c8:	2700      	movs	r7, #0
 800a7ca:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800a7ce:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800a7d2:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800aa94 <__sfvwrite_r+0x2f8>
 800a7d6:	463d      	mov	r5, r7
 800a7d8:	454d      	cmp	r5, r9
 800a7da:	462b      	mov	r3, r5
 800a7dc:	463a      	mov	r2, r7
 800a7de:	bf28      	it	cs
 800a7e0:	464b      	movcs	r3, r9
 800a7e2:	4661      	mov	r1, ip
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	b1d5      	cbz	r5, 800a81e <__sfvwrite_r+0x82>
 800a7e8:	47d8      	blx	fp
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	f340 80c6 	ble.w	800a97c <__sfvwrite_r+0x1e0>
 800a7f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7f4:	1a1b      	subs	r3, r3, r0
 800a7f6:	4407      	add	r7, r0
 800a7f8:	1a2d      	subs	r5, r5, r0
 800a7fa:	f8c8 3008 	str.w	r3, [r8, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 80b0 	beq.w	800a964 <__sfvwrite_r+0x1c8>
 800a804:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800a808:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800a80c:	454d      	cmp	r5, r9
 800a80e:	462b      	mov	r3, r5
 800a810:	463a      	mov	r2, r7
 800a812:	bf28      	it	cs
 800a814:	464b      	movcs	r3, r9
 800a816:	4661      	mov	r1, ip
 800a818:	4650      	mov	r0, sl
 800a81a:	2d00      	cmp	r5, #0
 800a81c:	d1e4      	bne.n	800a7e8 <__sfvwrite_r+0x4c>
 800a81e:	e9d6 7500 	ldrd	r7, r5, [r6]
 800a822:	3608      	adds	r6, #8
 800a824:	e7d8      	b.n	800a7d8 <__sfvwrite_r+0x3c>
 800a826:	4621      	mov	r1, r4
 800a828:	4650      	mov	r0, sl
 800a82a:	f7ff fb35 	bl	8009e98 <__swsetup_r>
 800a82e:	2800      	cmp	r0, #0
 800a830:	f040 812a 	bne.w	800aa88 <__sfvwrite_r+0x2ec>
 800a834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a838:	f8d8 6000 	ldr.w	r6, [r8]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	f013 0202 	ands.w	r2, r3, #2
 800a842:	d1c1      	bne.n	800a7c8 <__sfvwrite_r+0x2c>
 800a844:	f013 0901 	ands.w	r9, r3, #1
 800a848:	d15d      	bne.n	800a906 <__sfvwrite_r+0x16a>
 800a84a:	68a7      	ldr	r7, [r4, #8]
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	464d      	mov	r5, r9
 800a850:	2d00      	cmp	r5, #0
 800a852:	d054      	beq.n	800a8fe <__sfvwrite_r+0x162>
 800a854:	059a      	lsls	r2, r3, #22
 800a856:	f140 809b 	bpl.w	800a990 <__sfvwrite_r+0x1f4>
 800a85a:	42af      	cmp	r7, r5
 800a85c:	46bb      	mov	fp, r7
 800a85e:	f200 80d8 	bhi.w	800aa12 <__sfvwrite_r+0x276>
 800a862:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a866:	d02f      	beq.n	800a8c8 <__sfvwrite_r+0x12c>
 800a868:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 800a86c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800a870:	eba0 0b01 	sub.w	fp, r0, r1
 800a874:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800a878:	1c68      	adds	r0, r5, #1
 800a87a:	107f      	asrs	r7, r7, #1
 800a87c:	4458      	add	r0, fp
 800a87e:	42b8      	cmp	r0, r7
 800a880:	463a      	mov	r2, r7
 800a882:	bf84      	itt	hi
 800a884:	4607      	movhi	r7, r0
 800a886:	463a      	movhi	r2, r7
 800a888:	055b      	lsls	r3, r3, #21
 800a88a:	f140 80d3 	bpl.w	800aa34 <__sfvwrite_r+0x298>
 800a88e:	4611      	mov	r1, r2
 800a890:	4650      	mov	r0, sl
 800a892:	f7fd fec9 	bl	8008628 <_malloc_r>
 800a896:	2800      	cmp	r0, #0
 800a898:	f000 80f0 	beq.w	800aa7c <__sfvwrite_r+0x2e0>
 800a89c:	465a      	mov	r2, fp
 800a89e:	6921      	ldr	r1, [r4, #16]
 800a8a0:	9001      	str	r0, [sp, #4]
 800a8a2:	f7fe f965 	bl	8008b70 <memcpy>
 800a8a6:	89a2      	ldrh	r2, [r4, #12]
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a8ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a8b2:	81a2      	strh	r2, [r4, #12]
 800a8b4:	eba7 020b 	sub.w	r2, r7, fp
 800a8b8:	eb03 000b 	add.w	r0, r3, fp
 800a8bc:	6167      	str	r7, [r4, #20]
 800a8be:	6123      	str	r3, [r4, #16]
 800a8c0:	6020      	str	r0, [r4, #0]
 800a8c2:	60a2      	str	r2, [r4, #8]
 800a8c4:	462f      	mov	r7, r5
 800a8c6:	46ab      	mov	fp, r5
 800a8c8:	465a      	mov	r2, fp
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	f7fe f9ea 	bl	8008ca4 <memmove>
 800a8d0:	68a2      	ldr	r2, [r4, #8]
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	1bd2      	subs	r2, r2, r7
 800a8d6:	445b      	add	r3, fp
 800a8d8:	462f      	mov	r7, r5
 800a8da:	60a2      	str	r2, [r4, #8]
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	2500      	movs	r5, #0
 800a8e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8e4:	1bdb      	subs	r3, r3, r7
 800a8e6:	44b9      	add	r9, r7
 800a8e8:	f8c8 3008 	str.w	r3, [r8, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d039      	beq.n	800a964 <__sfvwrite_r+0x1c8>
 800a8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f4:	68a7      	ldr	r7, [r4, #8]
 800a8f6:	6820      	ldr	r0, [r4, #0]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	2d00      	cmp	r5, #0
 800a8fc:	d1aa      	bne.n	800a854 <__sfvwrite_r+0xb8>
 800a8fe:	e9d6 9500 	ldrd	r9, r5, [r6]
 800a902:	3608      	adds	r6, #8
 800a904:	e7a4      	b.n	800a850 <__sfvwrite_r+0xb4>
 800a906:	4633      	mov	r3, r6
 800a908:	4691      	mov	r9, r2
 800a90a:	4610      	mov	r0, r2
 800a90c:	4617      	mov	r7, r2
 800a90e:	464e      	mov	r6, r9
 800a910:	469b      	mov	fp, r3
 800a912:	2f00      	cmp	r7, #0
 800a914:	d06b      	beq.n	800a9ee <__sfvwrite_r+0x252>
 800a916:	2800      	cmp	r0, #0
 800a918:	d071      	beq.n	800a9fe <__sfvwrite_r+0x262>
 800a91a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800a91e:	6820      	ldr	r0, [r4, #0]
 800a920:	45b9      	cmp	r9, r7
 800a922:	464b      	mov	r3, r9
 800a924:	bf28      	it	cs
 800a926:	463b      	movcs	r3, r7
 800a928:	4288      	cmp	r0, r1
 800a92a:	d903      	bls.n	800a934 <__sfvwrite_r+0x198>
 800a92c:	68a5      	ldr	r5, [r4, #8]
 800a92e:	4415      	add	r5, r2
 800a930:	42ab      	cmp	r3, r5
 800a932:	dc71      	bgt.n	800aa18 <__sfvwrite_r+0x27c>
 800a934:	429a      	cmp	r2, r3
 800a936:	f300 8093 	bgt.w	800aa60 <__sfvwrite_r+0x2c4>
 800a93a:	4613      	mov	r3, r2
 800a93c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a93e:	69e1      	ldr	r1, [r4, #28]
 800a940:	4632      	mov	r2, r6
 800a942:	4650      	mov	r0, sl
 800a944:	47a8      	blx	r5
 800a946:	1e05      	subs	r5, r0, #0
 800a948:	dd18      	ble.n	800a97c <__sfvwrite_r+0x1e0>
 800a94a:	ebb9 0905 	subs.w	r9, r9, r5
 800a94e:	d00f      	beq.n	800a970 <__sfvwrite_r+0x1d4>
 800a950:	2001      	movs	r0, #1
 800a952:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a956:	1b5b      	subs	r3, r3, r5
 800a958:	442e      	add	r6, r5
 800a95a:	1b7f      	subs	r7, r7, r5
 800a95c:	f8c8 3008 	str.w	r3, [r8, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1d6      	bne.n	800a912 <__sfvwrite_r+0x176>
 800a964:	2000      	movs	r0, #0
 800a966:	b003      	add	sp, #12
 800a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96c:	2000      	movs	r0, #0
 800a96e:	4770      	bx	lr
 800a970:	4621      	mov	r1, r4
 800a972:	4650      	mov	r0, sl
 800a974:	f7ff fbb6 	bl	800a0e4 <_fflush_r>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d0ea      	beq.n	800a952 <__sfvwrite_r+0x1b6>
 800a97c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	b003      	add	sp, #12
 800a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	4283      	cmp	r3, r0
 800a994:	d315      	bcc.n	800a9c2 <__sfvwrite_r+0x226>
 800a996:	6961      	ldr	r1, [r4, #20]
 800a998:	42a9      	cmp	r1, r5
 800a99a:	d812      	bhi.n	800a9c2 <__sfvwrite_r+0x226>
 800a99c:	4b3c      	ldr	r3, [pc, #240]	; (800aa90 <__sfvwrite_r+0x2f4>)
 800a99e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800a9a0:	429d      	cmp	r5, r3
 800a9a2:	bf94      	ite	ls
 800a9a4:	462b      	movls	r3, r5
 800a9a6:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800a9aa:	464a      	mov	r2, r9
 800a9ac:	fb93 f3f1 	sdiv	r3, r3, r1
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	fb01 f303 	mul.w	r3, r1, r3
 800a9b6:	69e1      	ldr	r1, [r4, #28]
 800a9b8:	47b8      	blx	r7
 800a9ba:	1e07      	subs	r7, r0, #0
 800a9bc:	ddde      	ble.n	800a97c <__sfvwrite_r+0x1e0>
 800a9be:	1bed      	subs	r5, r5, r7
 800a9c0:	e78e      	b.n	800a8e0 <__sfvwrite_r+0x144>
 800a9c2:	42af      	cmp	r7, r5
 800a9c4:	bf28      	it	cs
 800a9c6:	462f      	movcs	r7, r5
 800a9c8:	463a      	mov	r2, r7
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	f7fe f96a 	bl	8008ca4 <memmove>
 800a9d0:	68a3      	ldr	r3, [r4, #8]
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	1bdb      	subs	r3, r3, r7
 800a9d6:	443a      	add	r2, r7
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	6022      	str	r2, [r4, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1ee      	bne.n	800a9be <__sfvwrite_r+0x222>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4650      	mov	r0, sl
 800a9e4:	f7ff fb7e 	bl	800a0e4 <_fflush_r>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d0e8      	beq.n	800a9be <__sfvwrite_r+0x222>
 800a9ec:	e7c6      	b.n	800a97c <__sfvwrite_r+0x1e0>
 800a9ee:	f10b 0308 	add.w	r3, fp, #8
 800a9f2:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 800a9f6:	469b      	mov	fp, r3
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	2f00      	cmp	r7, #0
 800a9fc:	d0f9      	beq.n	800a9f2 <__sfvwrite_r+0x256>
 800a9fe:	463a      	mov	r2, r7
 800aa00:	210a      	movs	r1, #10
 800aa02:	4630      	mov	r0, r6
 800aa04:	f000 f994 	bl	800ad30 <memchr>
 800aa08:	b338      	cbz	r0, 800aa5a <__sfvwrite_r+0x2be>
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	eba0 0906 	sub.w	r9, r0, r6
 800aa10:	e783      	b.n	800a91a <__sfvwrite_r+0x17e>
 800aa12:	462f      	mov	r7, r5
 800aa14:	46ab      	mov	fp, r5
 800aa16:	e757      	b.n	800a8c8 <__sfvwrite_r+0x12c>
 800aa18:	4631      	mov	r1, r6
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	f7fe f942 	bl	8008ca4 <memmove>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	442b      	add	r3, r5
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	4621      	mov	r1, r4
 800aa28:	4650      	mov	r0, sl
 800aa2a:	f7ff fb5b 	bl	800a0e4 <_fflush_r>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d08b      	beq.n	800a94a <__sfvwrite_r+0x1ae>
 800aa32:	e7a3      	b.n	800a97c <__sfvwrite_r+0x1e0>
 800aa34:	4650      	mov	r0, sl
 800aa36:	f000 f9f7 	bl	800ae28 <_realloc_r>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f47f af39 	bne.w	800a8b4 <__sfvwrite_r+0x118>
 800aa42:	6921      	ldr	r1, [r4, #16]
 800aa44:	4650      	mov	r0, sl
 800aa46:	f7ff fda1 	bl	800a58c <_free_r>
 800aa4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4e:	220c      	movs	r2, #12
 800aa50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa54:	f8ca 2000 	str.w	r2, [sl]
 800aa58:	e792      	b.n	800a980 <__sfvwrite_r+0x1e4>
 800aa5a:	f107 0901 	add.w	r9, r7, #1
 800aa5e:	e75c      	b.n	800a91a <__sfvwrite_r+0x17e>
 800aa60:	461a      	mov	r2, r3
 800aa62:	4631      	mov	r1, r6
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	f7fe f91d 	bl	8008ca4 <memmove>
 800aa6a:	9b01      	ldr	r3, [sp, #4]
 800aa6c:	68a1      	ldr	r1, [r4, #8]
 800aa6e:	6822      	ldr	r2, [r4, #0]
 800aa70:	1ac9      	subs	r1, r1, r3
 800aa72:	441a      	add	r2, r3
 800aa74:	60a1      	str	r1, [r4, #8]
 800aa76:	6022      	str	r2, [r4, #0]
 800aa78:	461d      	mov	r5, r3
 800aa7a:	e766      	b.n	800a94a <__sfvwrite_r+0x1ae>
 800aa7c:	230c      	movs	r3, #12
 800aa7e:	f8ca 3000 	str.w	r3, [sl]
 800aa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa86:	e77b      	b.n	800a980 <__sfvwrite_r+0x1e4>
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa8c:	e76b      	b.n	800a966 <__sfvwrite_r+0x1ca>
 800aa8e:	bf00      	nop
 800aa90:	7ffffffe 	.word	0x7ffffffe
 800aa94:	7ffffc00 	.word	0x7ffffc00

0800aa98 <_fwalk>:
 800aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800aaa0:	d01b      	beq.n	800aada <_fwalk+0x42>
 800aaa2:	4688      	mov	r8, r1
 800aaa4:	2600      	movs	r6, #0
 800aaa6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800aaaa:	3d01      	subs	r5, #1
 800aaac:	d40f      	bmi.n	800aace <_fwalk+0x36>
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800aab6:	4620      	mov	r0, r4
 800aab8:	d905      	bls.n	800aac6 <_fwalk+0x2e>
 800aaba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800aabe:	3301      	adds	r3, #1
 800aac0:	d001      	beq.n	800aac6 <_fwalk+0x2e>
 800aac2:	47c0      	blx	r8
 800aac4:	4306      	orrs	r6, r0
 800aac6:	1c6b      	adds	r3, r5, #1
 800aac8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800aacc:	d1ef      	bne.n	800aaae <_fwalk+0x16>
 800aace:	683f      	ldr	r7, [r7, #0]
 800aad0:	2f00      	cmp	r7, #0
 800aad2:	d1e8      	bne.n	800aaa6 <_fwalk+0xe>
 800aad4:	4630      	mov	r0, r6
 800aad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aada:	463e      	mov	r6, r7
 800aadc:	4630      	mov	r0, r6
 800aade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae2:	bf00      	nop

0800aae4 <_fwalk_reent>:
 800aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800aaec:	d01f      	beq.n	800ab2e <_fwalk_reent+0x4a>
 800aaee:	4688      	mov	r8, r1
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	f04f 0900 	mov.w	r9, #0
 800aaf6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800aafa:	3d01      	subs	r5, #1
 800aafc:	d411      	bmi.n	800ab22 <_fwalk_reent+0x3e>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800ab06:	4621      	mov	r1, r4
 800ab08:	4630      	mov	r0, r6
 800ab0a:	d906      	bls.n	800ab1a <_fwalk_reent+0x36>
 800ab0c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ab10:	3301      	adds	r3, #1
 800ab12:	d002      	beq.n	800ab1a <_fwalk_reent+0x36>
 800ab14:	47c0      	blx	r8
 800ab16:	ea49 0900 	orr.w	r9, r9, r0
 800ab1a:	1c6b      	adds	r3, r5, #1
 800ab1c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800ab20:	d1ed      	bne.n	800aafe <_fwalk_reent+0x1a>
 800ab22:	683f      	ldr	r7, [r7, #0]
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	d1e6      	bne.n	800aaf6 <_fwalk_reent+0x12>
 800ab28:	4648      	mov	r0, r9
 800ab2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab2e:	46b9      	mov	r9, r7
 800ab30:	4648      	mov	r0, r9
 800ab32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab36:	bf00      	nop

0800ab38 <_setlocale_r>:
 800ab38:	b1b2      	cbz	r2, 800ab68 <_setlocale_r+0x30>
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	490b      	ldr	r1, [pc, #44]	; (800ab6c <_setlocale_r+0x34>)
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4614      	mov	r4, r2
 800ab42:	f000 fbc1 	bl	800b2c8 <strcmp>
 800ab46:	b908      	cbnz	r0, 800ab4c <_setlocale_r+0x14>
 800ab48:	4809      	ldr	r0, [pc, #36]	; (800ab70 <_setlocale_r+0x38>)
 800ab4a:	bd10      	pop	{r4, pc}
 800ab4c:	4908      	ldr	r1, [pc, #32]	; (800ab70 <_setlocale_r+0x38>)
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 fbba 	bl	800b2c8 <strcmp>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d0f7      	beq.n	800ab48 <_setlocale_r+0x10>
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4906      	ldr	r1, [pc, #24]	; (800ab74 <_setlocale_r+0x3c>)
 800ab5c:	f000 fbb4 	bl	800b2c8 <strcmp>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d0f1      	beq.n	800ab48 <_setlocale_r+0x10>
 800ab64:	2000      	movs	r0, #0
 800ab66:	bd10      	pop	{r4, pc}
 800ab68:	4801      	ldr	r0, [pc, #4]	; (800ab70 <_setlocale_r+0x38>)
 800ab6a:	4770      	bx	lr
 800ab6c:	0800c014 	.word	0x0800c014
 800ab70:	0800c010 	.word	0x0800c010
 800ab74:	0800bf88 	.word	0x0800bf88

0800ab78 <__locale_mb_cur_max>:
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <__locale_mb_cur_max+0x14>)
 800ab7a:	4a05      	ldr	r2, [pc, #20]	; (800ab90 <__locale_mb_cur_max+0x18>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	bf08      	it	eq
 800ab84:	4613      	moveq	r3, r2
 800ab86:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800ab8a:	4770      	bx	lr
 800ab8c:	200000d4 	.word	0x200000d4
 800ab90:	20000910 	.word	0x20000910

0800ab94 <__locale_ctype_ptr_l>:
 800ab94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop

0800ab9c <__locale_ctype_ptr>:
 800ab9c:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <__locale_ctype_ptr+0x14>)
 800ab9e:	4a05      	ldr	r2, [pc, #20]	; (800abb4 <__locale_ctype_ptr+0x18>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bf08      	it	eq
 800aba8:	4613      	moveq	r3, r2
 800abaa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800abae:	4770      	bx	lr
 800abb0:	200000d4 	.word	0x200000d4
 800abb4:	20000910 	.word	0x20000910

0800abb8 <setlocale>:
 800abb8:	4b02      	ldr	r3, [pc, #8]	; (800abc4 <setlocale+0xc>)
 800abba:	460a      	mov	r2, r1
 800abbc:	4601      	mov	r1, r0
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	f7ff bfba 	b.w	800ab38 <_setlocale_r>
 800abc4:	200000d4 	.word	0x200000d4

0800abc8 <__retarget_lock_init>:
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <__retarget_lock_init_recursive>:
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop

0800abd0 <__retarget_lock_close>:
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop

0800abd4 <__retarget_lock_close_recursive>:
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop

0800abd8 <__retarget_lock_acquire>:
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop

0800abdc <__retarget_lock_acquire_recursive>:
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop

0800abe0 <__retarget_lock_try_acquire>:
 800abe0:	2001      	movs	r0, #1
 800abe2:	4770      	bx	lr

0800abe4 <__retarget_lock_try_acquire_recursive>:
 800abe4:	2001      	movs	r0, #1
 800abe6:	4770      	bx	lr

0800abe8 <__retarget_lock_release>:
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop

0800abec <__retarget_lock_release_recursive>:
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop

0800abf0 <__swhatbuf_r>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	2900      	cmp	r1, #0
 800abfa:	b096      	sub	sp, #88	; 0x58
 800abfc:	4615      	mov	r5, r2
 800abfe:	461e      	mov	r6, r3
 800ac00:	da0f      	bge.n	800ac22 <__swhatbuf_r+0x32>
 800ac02:	89a2      	ldrh	r2, [r4, #12]
 800ac04:	2300      	movs	r3, #0
 800ac06:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 800ac0a:	6033      	str	r3, [r6, #0]
 800ac0c:	d104      	bne.n	800ac18 <__swhatbuf_r+0x28>
 800ac0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac12:	602b      	str	r3, [r5, #0]
 800ac14:	b016      	add	sp, #88	; 0x58
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	2240      	movs	r2, #64	; 0x40
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	602a      	str	r2, [r5, #0]
 800ac1e:	b016      	add	sp, #88	; 0x58
 800ac20:	bd70      	pop	{r4, r5, r6, pc}
 800ac22:	466a      	mov	r2, sp
 800ac24:	f7ff fda6 	bl	800a774 <_fstat_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	dbea      	blt.n	800ac02 <__swhatbuf_r+0x12>
 800ac2c:	9b01      	ldr	r3, [sp, #4]
 800ac2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ac32:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800ac36:	fab3 f383 	clz	r3, r3
 800ac3a:	095b      	lsrs	r3, r3, #5
 800ac3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ac44:	6033      	str	r3, [r6, #0]
 800ac46:	602a      	str	r2, [r5, #0]
 800ac48:	b016      	add	sp, #88	; 0x58
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}

0800ac4c <__smakebuf_r>:
 800ac4c:	898a      	ldrh	r2, [r1, #12]
 800ac4e:	0792      	lsls	r2, r2, #30
 800ac50:	460b      	mov	r3, r1
 800ac52:	d506      	bpl.n	800ac62 <__smakebuf_r+0x16>
 800ac54:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac58:	2101      	movs	r1, #1
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	e9c3 2104 	strd	r2, r1, [r3, #16]
 800ac60:	4770      	bx	lr
 800ac62:	b570      	push	{r4, r5, r6, lr}
 800ac64:	b082      	sub	sp, #8
 800ac66:	ab01      	add	r3, sp, #4
 800ac68:	466a      	mov	r2, sp
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	f7ff ffbf 	bl	800abf0 <__swhatbuf_r>
 800ac72:	9900      	ldr	r1, [sp, #0]
 800ac74:	4606      	mov	r6, r0
 800ac76:	4628      	mov	r0, r5
 800ac78:	f7fd fcd6 	bl	8008628 <_malloc_r>
 800ac7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac80:	b1d8      	cbz	r0, 800acba <__smakebuf_r+0x6e>
 800ac82:	4916      	ldr	r1, [pc, #88]	; (800acdc <__smakebuf_r+0x90>)
 800ac84:	63e9      	str	r1, [r5, #60]	; 0x3c
 800ac86:	9a01      	ldr	r2, [sp, #4]
 800ac88:	9900      	ldr	r1, [sp, #0]
 800ac8a:	6020      	str	r0, [r4, #0]
 800ac8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800ac96:	b91a      	cbnz	r2, 800aca0 <__smakebuf_r+0x54>
 800ac98:	4333      	orrs	r3, r6
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	b002      	add	sp, #8
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	4628      	mov	r0, r5
 800aca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca6:	f000 fdd1 	bl	800b84c <_isatty_r>
 800acaa:	b1a0      	cbz	r0, 800acd6 <__smakebuf_r+0x8a>
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	f043 0301 	orr.w	r3, r3, #1
 800acb6:	b21b      	sxth	r3, r3
 800acb8:	e7ee      	b.n	800ac98 <__smakebuf_r+0x4c>
 800acba:	059a      	lsls	r2, r3, #22
 800acbc:	d4ee      	bmi.n	800ac9c <__smakebuf_r+0x50>
 800acbe:	f023 0303 	bic.w	r3, r3, #3
 800acc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acc6:	f043 0302 	orr.w	r3, r3, #2
 800acca:	2101      	movs	r1, #1
 800accc:	81a3      	strh	r3, [r4, #12]
 800acce:	6022      	str	r2, [r4, #0]
 800acd0:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800acd4:	e7e2      	b.n	800ac9c <__smakebuf_r+0x50>
 800acd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acda:	e7dd      	b.n	800ac98 <__smakebuf_r+0x4c>
 800acdc:	0800a1b5 	.word	0x0800a1b5

0800ace0 <_mbtowc_r>:
 800ace0:	b430      	push	{r4, r5}
 800ace2:	4c06      	ldr	r4, [pc, #24]	; (800acfc <_mbtowc_r+0x1c>)
 800ace4:	4d06      	ldr	r5, [pc, #24]	; (800ad00 <_mbtowc_r+0x20>)
 800ace6:	6824      	ldr	r4, [r4, #0]
 800ace8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800acea:	2c00      	cmp	r4, #0
 800acec:	bf08      	it	eq
 800acee:	462c      	moveq	r4, r5
 800acf0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 800acf4:	46a4      	mov	ip, r4
 800acf6:	bc30      	pop	{r4, r5}
 800acf8:	4760      	bx	ip
 800acfa:	bf00      	nop
 800acfc:	200000d4 	.word	0x200000d4
 800ad00:	20000910 	.word	0x20000910

0800ad04 <__ascii_mbtowc>:
 800ad04:	b082      	sub	sp, #8
 800ad06:	b149      	cbz	r1, 800ad1c <__ascii_mbtowc+0x18>
 800ad08:	b15a      	cbz	r2, 800ad22 <__ascii_mbtowc+0x1e>
 800ad0a:	b16b      	cbz	r3, 800ad28 <__ascii_mbtowc+0x24>
 800ad0c:	7813      	ldrb	r3, [r2, #0]
 800ad0e:	600b      	str	r3, [r1, #0]
 800ad10:	7812      	ldrb	r2, [r2, #0]
 800ad12:	1c10      	adds	r0, r2, #0
 800ad14:	bf18      	it	ne
 800ad16:	2001      	movne	r0, #1
 800ad18:	b002      	add	sp, #8
 800ad1a:	4770      	bx	lr
 800ad1c:	a901      	add	r1, sp, #4
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d1f3      	bne.n	800ad0a <__ascii_mbtowc+0x6>
 800ad22:	4610      	mov	r0, r2
 800ad24:	b002      	add	sp, #8
 800ad26:	4770      	bx	lr
 800ad28:	f06f 0001 	mvn.w	r0, #1
 800ad2c:	e7f4      	b.n	800ad18 <__ascii_mbtowc+0x14>
 800ad2e:	bf00      	nop

0800ad30 <memchr>:
 800ad30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800ad34:	2a10      	cmp	r2, #16
 800ad36:	db2b      	blt.n	800ad90 <memchr+0x60>
 800ad38:	f010 0f07 	tst.w	r0, #7
 800ad3c:	d008      	beq.n	800ad50 <memchr+0x20>
 800ad3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad42:	3a01      	subs	r2, #1
 800ad44:	428b      	cmp	r3, r1
 800ad46:	d02d      	beq.n	800ada4 <memchr+0x74>
 800ad48:	f010 0f07 	tst.w	r0, #7
 800ad4c:	b342      	cbz	r2, 800ada0 <memchr+0x70>
 800ad4e:	d1f6      	bne.n	800ad3e <memchr+0xe>
 800ad50:	b4f0      	push	{r4, r5, r6, r7}
 800ad52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800ad56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800ad5a:	f022 0407 	bic.w	r4, r2, #7
 800ad5e:	f07f 0700 	mvns.w	r7, #0
 800ad62:	2300      	movs	r3, #0
 800ad64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800ad68:	3c08      	subs	r4, #8
 800ad6a:	ea85 0501 	eor.w	r5, r5, r1
 800ad6e:	ea86 0601 	eor.w	r6, r6, r1
 800ad72:	fa85 f547 	uadd8	r5, r5, r7
 800ad76:	faa3 f587 	sel	r5, r3, r7
 800ad7a:	fa86 f647 	uadd8	r6, r6, r7
 800ad7e:	faa5 f687 	sel	r6, r5, r7
 800ad82:	b98e      	cbnz	r6, 800ada8 <memchr+0x78>
 800ad84:	d1ee      	bne.n	800ad64 <memchr+0x34>
 800ad86:	bcf0      	pop	{r4, r5, r6, r7}
 800ad88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800ad8c:	f002 0207 	and.w	r2, r2, #7
 800ad90:	b132      	cbz	r2, 800ada0 <memchr+0x70>
 800ad92:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad96:	3a01      	subs	r2, #1
 800ad98:	ea83 0301 	eor.w	r3, r3, r1
 800ad9c:	b113      	cbz	r3, 800ada4 <memchr+0x74>
 800ad9e:	d1f8      	bne.n	800ad92 <memchr+0x62>
 800ada0:	2000      	movs	r0, #0
 800ada2:	4770      	bx	lr
 800ada4:	3801      	subs	r0, #1
 800ada6:	4770      	bx	lr
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	bf06      	itte	eq
 800adac:	4635      	moveq	r5, r6
 800adae:	3803      	subeq	r0, #3
 800adb0:	3807      	subne	r0, #7
 800adb2:	f015 0f01 	tst.w	r5, #1
 800adb6:	d107      	bne.n	800adc8 <memchr+0x98>
 800adb8:	3001      	adds	r0, #1
 800adba:	f415 7f80 	tst.w	r5, #256	; 0x100
 800adbe:	bf02      	ittt	eq
 800adc0:	3001      	addeq	r0, #1
 800adc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800adc6:	3001      	addeq	r0, #1
 800adc8:	bcf0      	pop	{r4, r5, r6, r7}
 800adca:	3801      	subs	r0, #1
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop

0800add0 <_open_r>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	460d      	mov	r5, r1
 800add4:	4c08      	ldr	r4, [pc, #32]	; (800adf8 <_open_r+0x28>)
 800add6:	4611      	mov	r1, r2
 800add8:	4606      	mov	r6, r0
 800adda:	461a      	mov	r2, r3
 800addc:	4628      	mov	r0, r5
 800adde:	2300      	movs	r3, #0
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	f000 ff0b 	bl	800bbfc <_open>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	d000      	beq.n	800adec <_open_r+0x1c>
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0fb      	beq.n	800adea <_open_r+0x1a>
 800adf2:	6033      	str	r3, [r6, #0]
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	bf00      	nop
 800adf8:	2000121c 	.word	0x2000121c

0800adfc <_read_r>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	460d      	mov	r5, r1
 800ae00:	4c08      	ldr	r4, [pc, #32]	; (800ae24 <_read_r+0x28>)
 800ae02:	4611      	mov	r1, r2
 800ae04:	4606      	mov	r6, r0
 800ae06:	461a      	mov	r2, r3
 800ae08:	4628      	mov	r0, r5
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	f000 fefd 	bl	800bc0c <_read>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d000      	beq.n	800ae18 <_read_r+0x1c>
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0fb      	beq.n	800ae16 <_read_r+0x1a>
 800ae1e:	6033      	str	r3, [r6, #0]
 800ae20:	bd70      	pop	{r4, r5, r6, pc}
 800ae22:	bf00      	nop
 800ae24:	2000121c 	.word	0x2000121c

0800ae28 <_realloc_r>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	4692      	mov	sl, r2
 800ae2e:	b083      	sub	sp, #12
 800ae30:	2900      	cmp	r1, #0
 800ae32:	f000 80a1 	beq.w	800af78 <_realloc_r+0x150>
 800ae36:	460d      	mov	r5, r1
 800ae38:	4680      	mov	r8, r0
 800ae3a:	f10a 040b 	add.w	r4, sl, #11
 800ae3e:	f7fd ffdf 	bl	8008e00 <__malloc_lock>
 800ae42:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800ae46:	2c16      	cmp	r4, #22
 800ae48:	f022 0603 	bic.w	r6, r2, #3
 800ae4c:	f1a5 0708 	sub.w	r7, r5, #8
 800ae50:	d83e      	bhi.n	800aed0 <_realloc_r+0xa8>
 800ae52:	2410      	movs	r4, #16
 800ae54:	4621      	mov	r1, r4
 800ae56:	45a2      	cmp	sl, r4
 800ae58:	d83f      	bhi.n	800aeda <_realloc_r+0xb2>
 800ae5a:	428e      	cmp	r6, r1
 800ae5c:	eb07 0906 	add.w	r9, r7, r6
 800ae60:	da74      	bge.n	800af4c <_realloc_r+0x124>
 800ae62:	4bc7      	ldr	r3, [pc, #796]	; (800b180 <_realloc_r+0x358>)
 800ae64:	6898      	ldr	r0, [r3, #8]
 800ae66:	4548      	cmp	r0, r9
 800ae68:	f000 80aa 	beq.w	800afc0 <_realloc_r+0x198>
 800ae6c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ae70:	f020 0301 	bic.w	r3, r0, #1
 800ae74:	444b      	add	r3, r9
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	07db      	lsls	r3, r3, #31
 800ae7a:	f140 8083 	bpl.w	800af84 <_realloc_r+0x15c>
 800ae7e:	07d2      	lsls	r2, r2, #31
 800ae80:	d534      	bpl.n	800aeec <_realloc_r+0xc4>
 800ae82:	4651      	mov	r1, sl
 800ae84:	4640      	mov	r0, r8
 800ae86:	f7fd fbcf 	bl	8008628 <_malloc_r>
 800ae8a:	4682      	mov	sl, r0
 800ae8c:	b1e0      	cbz	r0, 800aec8 <_realloc_r+0xa0>
 800ae8e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ae92:	f023 0301 	bic.w	r3, r3, #1
 800ae96:	443b      	add	r3, r7
 800ae98:	f1a0 0208 	sub.w	r2, r0, #8
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	f000 80f9 	beq.w	800b094 <_realloc_r+0x26c>
 800aea2:	1f32      	subs	r2, r6, #4
 800aea4:	2a24      	cmp	r2, #36	; 0x24
 800aea6:	f200 8107 	bhi.w	800b0b8 <_realloc_r+0x290>
 800aeaa:	2a13      	cmp	r2, #19
 800aeac:	6829      	ldr	r1, [r5, #0]
 800aeae:	f200 80e6 	bhi.w	800b07e <_realloc_r+0x256>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	6019      	str	r1, [r3, #0]
 800aeb8:	6851      	ldr	r1, [r2, #4]
 800aeba:	6059      	str	r1, [r3, #4]
 800aebc:	6892      	ldr	r2, [r2, #8]
 800aebe:	609a      	str	r2, [r3, #8]
 800aec0:	4629      	mov	r1, r5
 800aec2:	4640      	mov	r0, r8
 800aec4:	f7ff fb62 	bl	800a58c <_free_r>
 800aec8:	4640      	mov	r0, r8
 800aeca:	f7fd ff9f 	bl	8008e0c <__malloc_unlock>
 800aece:	e04f      	b.n	800af70 <_realloc_r+0x148>
 800aed0:	f024 0407 	bic.w	r4, r4, #7
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	4621      	mov	r1, r4
 800aed8:	dabd      	bge.n	800ae56 <_realloc_r+0x2e>
 800aeda:	f04f 0a00 	mov.w	sl, #0
 800aede:	230c      	movs	r3, #12
 800aee0:	4650      	mov	r0, sl
 800aee2:	f8c8 3000 	str.w	r3, [r8]
 800aee6:	b003      	add	sp, #12
 800aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeec:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800aef0:	eba7 0b03 	sub.w	fp, r7, r3
 800aef4:	f8db 2004 	ldr.w	r2, [fp, #4]
 800aef8:	f022 0203 	bic.w	r2, r2, #3
 800aefc:	18b3      	adds	r3, r6, r2
 800aefe:	428b      	cmp	r3, r1
 800af00:	dbbf      	blt.n	800ae82 <_realloc_r+0x5a>
 800af02:	46da      	mov	sl, fp
 800af04:	f8db 100c 	ldr.w	r1, [fp, #12]
 800af08:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800af0c:	1f32      	subs	r2, r6, #4
 800af0e:	2a24      	cmp	r2, #36	; 0x24
 800af10:	60c1      	str	r1, [r0, #12]
 800af12:	eb0b 0903 	add.w	r9, fp, r3
 800af16:	6088      	str	r0, [r1, #8]
 800af18:	f200 80c6 	bhi.w	800b0a8 <_realloc_r+0x280>
 800af1c:	2a13      	cmp	r2, #19
 800af1e:	6829      	ldr	r1, [r5, #0]
 800af20:	f240 80c0 	bls.w	800b0a4 <_realloc_r+0x27c>
 800af24:	f8cb 1008 	str.w	r1, [fp, #8]
 800af28:	6869      	ldr	r1, [r5, #4]
 800af2a:	f8cb 100c 	str.w	r1, [fp, #12]
 800af2e:	2a1b      	cmp	r2, #27
 800af30:	68a9      	ldr	r1, [r5, #8]
 800af32:	f200 80d8 	bhi.w	800b0e6 <_realloc_r+0x2be>
 800af36:	f10b 0210 	add.w	r2, fp, #16
 800af3a:	3508      	adds	r5, #8
 800af3c:	6011      	str	r1, [r2, #0]
 800af3e:	6869      	ldr	r1, [r5, #4]
 800af40:	6051      	str	r1, [r2, #4]
 800af42:	68a9      	ldr	r1, [r5, #8]
 800af44:	6091      	str	r1, [r2, #8]
 800af46:	461e      	mov	r6, r3
 800af48:	465f      	mov	r7, fp
 800af4a:	4655      	mov	r5, sl
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	1b32      	subs	r2, r6, r4
 800af50:	2a0f      	cmp	r2, #15
 800af52:	f003 0301 	and.w	r3, r3, #1
 800af56:	d822      	bhi.n	800af9e <_realloc_r+0x176>
 800af58:	4333      	orrs	r3, r6
 800af5a:	607b      	str	r3, [r7, #4]
 800af5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af60:	f043 0301 	orr.w	r3, r3, #1
 800af64:	f8c9 3004 	str.w	r3, [r9, #4]
 800af68:	4640      	mov	r0, r8
 800af6a:	f7fd ff4f 	bl	8008e0c <__malloc_unlock>
 800af6e:	46aa      	mov	sl, r5
 800af70:	4650      	mov	r0, sl
 800af72:	b003      	add	sp, #12
 800af74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af78:	4611      	mov	r1, r2
 800af7a:	b003      	add	sp, #12
 800af7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	f7fd bb52 	b.w	8008628 <_malloc_r>
 800af84:	f020 0003 	bic.w	r0, r0, #3
 800af88:	1833      	adds	r3, r6, r0
 800af8a:	428b      	cmp	r3, r1
 800af8c:	db61      	blt.n	800b052 <_realloc_r+0x22a>
 800af8e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800af92:	461e      	mov	r6, r3
 800af94:	60ca      	str	r2, [r1, #12]
 800af96:	eb07 0903 	add.w	r9, r7, r3
 800af9a:	6091      	str	r1, [r2, #8]
 800af9c:	e7d6      	b.n	800af4c <_realloc_r+0x124>
 800af9e:	1939      	adds	r1, r7, r4
 800afa0:	4323      	orrs	r3, r4
 800afa2:	f042 0201 	orr.w	r2, r2, #1
 800afa6:	607b      	str	r3, [r7, #4]
 800afa8:	604a      	str	r2, [r1, #4]
 800afaa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800afae:	f043 0301 	orr.w	r3, r3, #1
 800afb2:	3108      	adds	r1, #8
 800afb4:	f8c9 3004 	str.w	r3, [r9, #4]
 800afb8:	4640      	mov	r0, r8
 800afba:	f7ff fae7 	bl	800a58c <_free_r>
 800afbe:	e7d3      	b.n	800af68 <_realloc_r+0x140>
 800afc0:	6840      	ldr	r0, [r0, #4]
 800afc2:	f020 0903 	bic.w	r9, r0, #3
 800afc6:	44b1      	add	r9, r6
 800afc8:	f104 0010 	add.w	r0, r4, #16
 800afcc:	4581      	cmp	r9, r0
 800afce:	da77      	bge.n	800b0c0 <_realloc_r+0x298>
 800afd0:	07d2      	lsls	r2, r2, #31
 800afd2:	f53f af56 	bmi.w	800ae82 <_realloc_r+0x5a>
 800afd6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800afda:	eba7 0b02 	sub.w	fp, r7, r2
 800afde:	f8db 2004 	ldr.w	r2, [fp, #4]
 800afe2:	f022 0203 	bic.w	r2, r2, #3
 800afe6:	4491      	add	r9, r2
 800afe8:	4548      	cmp	r0, r9
 800afea:	dc87      	bgt.n	800aefc <_realloc_r+0xd4>
 800afec:	46da      	mov	sl, fp
 800afee:	f8db 100c 	ldr.w	r1, [fp, #12]
 800aff2:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800aff6:	1f32      	subs	r2, r6, #4
 800aff8:	2a24      	cmp	r2, #36	; 0x24
 800affa:	60c1      	str	r1, [r0, #12]
 800affc:	6088      	str	r0, [r1, #8]
 800affe:	f200 80a1 	bhi.w	800b144 <_realloc_r+0x31c>
 800b002:	2a13      	cmp	r2, #19
 800b004:	6829      	ldr	r1, [r5, #0]
 800b006:	f240 809b 	bls.w	800b140 <_realloc_r+0x318>
 800b00a:	f8cb 1008 	str.w	r1, [fp, #8]
 800b00e:	6869      	ldr	r1, [r5, #4]
 800b010:	f8cb 100c 	str.w	r1, [fp, #12]
 800b014:	2a1b      	cmp	r2, #27
 800b016:	68a9      	ldr	r1, [r5, #8]
 800b018:	f200 809b 	bhi.w	800b152 <_realloc_r+0x32a>
 800b01c:	f10b 0210 	add.w	r2, fp, #16
 800b020:	3508      	adds	r5, #8
 800b022:	6011      	str	r1, [r2, #0]
 800b024:	6869      	ldr	r1, [r5, #4]
 800b026:	6051      	str	r1, [r2, #4]
 800b028:	68a9      	ldr	r1, [r5, #8]
 800b02a:	6091      	str	r1, [r2, #8]
 800b02c:	eb0b 0104 	add.w	r1, fp, r4
 800b030:	eba9 0204 	sub.w	r2, r9, r4
 800b034:	f042 0201 	orr.w	r2, r2, #1
 800b038:	6099      	str	r1, [r3, #8]
 800b03a:	604a      	str	r2, [r1, #4]
 800b03c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	431c      	orrs	r4, r3
 800b046:	4640      	mov	r0, r8
 800b048:	f8cb 4004 	str.w	r4, [fp, #4]
 800b04c:	f7fd fede 	bl	8008e0c <__malloc_unlock>
 800b050:	e78e      	b.n	800af70 <_realloc_r+0x148>
 800b052:	07d3      	lsls	r3, r2, #31
 800b054:	f53f af15 	bmi.w	800ae82 <_realloc_r+0x5a>
 800b058:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b05c:	eba7 0b03 	sub.w	fp, r7, r3
 800b060:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b064:	f022 0203 	bic.w	r2, r2, #3
 800b068:	4410      	add	r0, r2
 800b06a:	1983      	adds	r3, r0, r6
 800b06c:	428b      	cmp	r3, r1
 800b06e:	f6ff af45 	blt.w	800aefc <_realloc_r+0xd4>
 800b072:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800b076:	46da      	mov	sl, fp
 800b078:	60ca      	str	r2, [r1, #12]
 800b07a:	6091      	str	r1, [r2, #8]
 800b07c:	e742      	b.n	800af04 <_realloc_r+0xdc>
 800b07e:	6001      	str	r1, [r0, #0]
 800b080:	686b      	ldr	r3, [r5, #4]
 800b082:	6043      	str	r3, [r0, #4]
 800b084:	2a1b      	cmp	r2, #27
 800b086:	d83a      	bhi.n	800b0fe <_realloc_r+0x2d6>
 800b088:	f105 0208 	add.w	r2, r5, #8
 800b08c:	f100 0308 	add.w	r3, r0, #8
 800b090:	68a9      	ldr	r1, [r5, #8]
 800b092:	e710      	b.n	800aeb6 <_realloc_r+0x8e>
 800b094:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b098:	f023 0303 	bic.w	r3, r3, #3
 800b09c:	441e      	add	r6, r3
 800b09e:	eb07 0906 	add.w	r9, r7, r6
 800b0a2:	e753      	b.n	800af4c <_realloc_r+0x124>
 800b0a4:	4652      	mov	r2, sl
 800b0a6:	e749      	b.n	800af3c <_realloc_r+0x114>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	461e      	mov	r6, r3
 800b0ae:	465f      	mov	r7, fp
 800b0b0:	f7fd fdf8 	bl	8008ca4 <memmove>
 800b0b4:	4655      	mov	r5, sl
 800b0b6:	e749      	b.n	800af4c <_realloc_r+0x124>
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7fd fdf3 	bl	8008ca4 <memmove>
 800b0be:	e6ff      	b.n	800aec0 <_realloc_r+0x98>
 800b0c0:	4427      	add	r7, r4
 800b0c2:	eba9 0904 	sub.w	r9, r9, r4
 800b0c6:	f049 0201 	orr.w	r2, r9, #1
 800b0ca:	609f      	str	r7, [r3, #8]
 800b0cc:	607a      	str	r2, [r7, #4]
 800b0ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	431c      	orrs	r4, r3
 800b0d8:	4640      	mov	r0, r8
 800b0da:	f845 4c04 	str.w	r4, [r5, #-4]
 800b0de:	f7fd fe95 	bl	8008e0c <__malloc_unlock>
 800b0e2:	46aa      	mov	sl, r5
 800b0e4:	e744      	b.n	800af70 <_realloc_r+0x148>
 800b0e6:	f8cb 1010 	str.w	r1, [fp, #16]
 800b0ea:	68e9      	ldr	r1, [r5, #12]
 800b0ec:	f8cb 1014 	str.w	r1, [fp, #20]
 800b0f0:	2a24      	cmp	r2, #36	; 0x24
 800b0f2:	d010      	beq.n	800b116 <_realloc_r+0x2ee>
 800b0f4:	6929      	ldr	r1, [r5, #16]
 800b0f6:	f10b 0218 	add.w	r2, fp, #24
 800b0fa:	3510      	adds	r5, #16
 800b0fc:	e71e      	b.n	800af3c <_realloc_r+0x114>
 800b0fe:	68ab      	ldr	r3, [r5, #8]
 800b100:	6083      	str	r3, [r0, #8]
 800b102:	68eb      	ldr	r3, [r5, #12]
 800b104:	60c3      	str	r3, [r0, #12]
 800b106:	2a24      	cmp	r2, #36	; 0x24
 800b108:	d010      	beq.n	800b12c <_realloc_r+0x304>
 800b10a:	f105 0210 	add.w	r2, r5, #16
 800b10e:	f100 0310 	add.w	r3, r0, #16
 800b112:	6929      	ldr	r1, [r5, #16]
 800b114:	e6cf      	b.n	800aeb6 <_realloc_r+0x8e>
 800b116:	692a      	ldr	r2, [r5, #16]
 800b118:	f8cb 2018 	str.w	r2, [fp, #24]
 800b11c:	696a      	ldr	r2, [r5, #20]
 800b11e:	f8cb 201c 	str.w	r2, [fp, #28]
 800b122:	69a9      	ldr	r1, [r5, #24]
 800b124:	f10b 0220 	add.w	r2, fp, #32
 800b128:	3518      	adds	r5, #24
 800b12a:	e707      	b.n	800af3c <_realloc_r+0x114>
 800b12c:	692b      	ldr	r3, [r5, #16]
 800b12e:	6103      	str	r3, [r0, #16]
 800b130:	696b      	ldr	r3, [r5, #20]
 800b132:	6143      	str	r3, [r0, #20]
 800b134:	69a9      	ldr	r1, [r5, #24]
 800b136:	f105 0218 	add.w	r2, r5, #24
 800b13a:	f100 0318 	add.w	r3, r0, #24
 800b13e:	e6ba      	b.n	800aeb6 <_realloc_r+0x8e>
 800b140:	4652      	mov	r2, sl
 800b142:	e76e      	b.n	800b022 <_realloc_r+0x1fa>
 800b144:	4629      	mov	r1, r5
 800b146:	4650      	mov	r0, sl
 800b148:	9301      	str	r3, [sp, #4]
 800b14a:	f7fd fdab 	bl	8008ca4 <memmove>
 800b14e:	9b01      	ldr	r3, [sp, #4]
 800b150:	e76c      	b.n	800b02c <_realloc_r+0x204>
 800b152:	f8cb 1010 	str.w	r1, [fp, #16]
 800b156:	68e9      	ldr	r1, [r5, #12]
 800b158:	f8cb 1014 	str.w	r1, [fp, #20]
 800b15c:	2a24      	cmp	r2, #36	; 0x24
 800b15e:	d004      	beq.n	800b16a <_realloc_r+0x342>
 800b160:	6929      	ldr	r1, [r5, #16]
 800b162:	f10b 0218 	add.w	r2, fp, #24
 800b166:	3510      	adds	r5, #16
 800b168:	e75b      	b.n	800b022 <_realloc_r+0x1fa>
 800b16a:	692a      	ldr	r2, [r5, #16]
 800b16c:	f8cb 2018 	str.w	r2, [fp, #24]
 800b170:	696a      	ldr	r2, [r5, #20]
 800b172:	f8cb 201c 	str.w	r2, [fp, #28]
 800b176:	69a9      	ldr	r1, [r5, #24]
 800b178:	f10b 0220 	add.w	r2, fp, #32
 800b17c:	3518      	adds	r5, #24
 800b17e:	e750      	b.n	800b022 <_realloc_r+0x1fa>
 800b180:	20000500 	.word	0x20000500

0800b184 <cleanup_glue>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	460c      	mov	r4, r1
 800b188:	6809      	ldr	r1, [r1, #0]
 800b18a:	4605      	mov	r5, r0
 800b18c:	b929      	cbnz	r1, 800b19a <cleanup_glue+0x16>
 800b18e:	4621      	mov	r1, r4
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b196:	f7ff b9f9 	b.w	800a58c <_free_r>
 800b19a:	f7ff fff3 	bl	800b184 <cleanup_glue>
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a6:	f7ff b9f1 	b.w	800a58c <_free_r>
 800b1aa:	bf00      	nop

0800b1ac <_reclaim_reent>:
 800b1ac:	4b20      	ldr	r3, [pc, #128]	; (800b230 <_reclaim_reent+0x84>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4283      	cmp	r3, r0
 800b1b2:	d03b      	beq.n	800b22c <_reclaim_reent+0x80>
 800b1b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b1b6:	b570      	push	{r4, r5, r6, lr}
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	b18b      	cbz	r3, 800b1e0 <_reclaim_reent+0x34>
 800b1bc:	2600      	movs	r6, #0
 800b1be:	5999      	ldr	r1, [r3, r6]
 800b1c0:	b139      	cbz	r1, 800b1d2 <_reclaim_reent+0x26>
 800b1c2:	680c      	ldr	r4, [r1, #0]
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f7ff f9e1 	bl	800a58c <_free_r>
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	2c00      	cmp	r4, #0
 800b1ce:	d1f8      	bne.n	800b1c2 <_reclaim_reent+0x16>
 800b1d0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b1d2:	3604      	adds	r6, #4
 800b1d4:	2e80      	cmp	r6, #128	; 0x80
 800b1d6:	d1f2      	bne.n	800b1be <_reclaim_reent+0x12>
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f7ff f9d6 	bl	800a58c <_free_r>
 800b1e0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800b1e2:	b111      	cbz	r1, 800b1ea <_reclaim_reent+0x3e>
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f7ff f9d1 	bl	800a58c <_free_r>
 800b1ea:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800b1ee:	b151      	cbz	r1, 800b206 <_reclaim_reent+0x5a>
 800b1f0:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800b1f4:	42b1      	cmp	r1, r6
 800b1f6:	d006      	beq.n	800b206 <_reclaim_reent+0x5a>
 800b1f8:	680c      	ldr	r4, [r1, #0]
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f7ff f9c6 	bl	800a58c <_free_r>
 800b200:	42a6      	cmp	r6, r4
 800b202:	4621      	mov	r1, r4
 800b204:	d1f8      	bne.n	800b1f8 <_reclaim_reent+0x4c>
 800b206:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800b208:	b111      	cbz	r1, 800b210 <_reclaim_reent+0x64>
 800b20a:	4628      	mov	r0, r5
 800b20c:	f7ff f9be 	bl	800a58c <_free_r>
 800b210:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b212:	b153      	cbz	r3, 800b22a <_reclaim_reent+0x7e>
 800b214:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b216:	4628      	mov	r0, r5
 800b218:	4798      	blx	r3
 800b21a:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800b21e:	b121      	cbz	r1, 800b22a <_reclaim_reent+0x7e>
 800b220:	4628      	mov	r0, r5
 800b222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b226:	f7ff bfad 	b.w	800b184 <cleanup_glue>
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	200000d4 	.word	0x200000d4

0800b234 <__sread>:
 800b234:	b510      	push	{r4, lr}
 800b236:	460c      	mov	r4, r1
 800b238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23c:	f7ff fdde 	bl	800adfc <_read_r>
 800b240:	2800      	cmp	r0, #0
 800b242:	db03      	blt.n	800b24c <__sread+0x18>
 800b244:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b246:	4403      	add	r3, r0
 800b248:	6523      	str	r3, [r4, #80]	; 0x50
 800b24a:	bd10      	pop	{r4, pc}
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	bd10      	pop	{r4, pc}
 800b256:	bf00      	nop

0800b258 <__seofread>:
 800b258:	2000      	movs	r0, #0
 800b25a:	4770      	bx	lr

0800b25c <__swrite>:
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	4616      	mov	r6, r2
 800b262:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b266:	461f      	mov	r7, r3
 800b268:	05d3      	lsls	r3, r2, #23
 800b26a:	460c      	mov	r4, r1
 800b26c:	4605      	mov	r5, r0
 800b26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b272:	d507      	bpl.n	800b284 <__swrite+0x28>
 800b274:	2200      	movs	r2, #0
 800b276:	2302      	movs	r3, #2
 800b278:	f000 fafa 	bl	800b870 <_lseek_r>
 800b27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b288:	81a2      	strh	r2, [r4, #12]
 800b28a:	463b      	mov	r3, r7
 800b28c:	4632      	mov	r2, r6
 800b28e:	4628      	mov	r0, r5
 800b290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b294:	f000 ba54 	b.w	800b740 <_write_r>

0800b298 <__sseek>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	460c      	mov	r4, r1
 800b29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a0:	f000 fae6 	bl	800b870 <_lseek_r>
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	1c42      	adds	r2, r0, #1
 800b2a8:	bf0e      	itee	eq
 800b2aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2b2:	6520      	strne	r0, [r4, #80]	; 0x50
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	bd10      	pop	{r4, pc}

0800b2b8 <__sclose>:
 800b2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2bc:	f7fe be56 	b.w	8009f6c <_close_r>
 800b2c0:	eba2 0003 	sub.w	r0, r2, r3
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop

0800b2c8 <strcmp>:
 800b2c8:	7802      	ldrb	r2, [r0, #0]
 800b2ca:	780b      	ldrb	r3, [r1, #0]
 800b2cc:	2a01      	cmp	r2, #1
 800b2ce:	bf28      	it	cs
 800b2d0:	429a      	cmpcs	r2, r3
 800b2d2:	d1f5      	bne.n	800b2c0 <__sclose+0x8>
 800b2d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800b2d8:	ea40 0401 	orr.w	r4, r0, r1
 800b2dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b2e0:	f06f 0c00 	mvn.w	ip, #0
 800b2e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800b2e8:	b312      	cbz	r2, 800b330 <strcmp+0x68>
 800b2ea:	ea80 0401 	eor.w	r4, r0, r1
 800b2ee:	f014 0f07 	tst.w	r4, #7
 800b2f2:	d16a      	bne.n	800b3ca <strcmp+0x102>
 800b2f4:	f000 0407 	and.w	r4, r0, #7
 800b2f8:	f020 0007 	bic.w	r0, r0, #7
 800b2fc:	f004 0503 	and.w	r5, r4, #3
 800b300:	f021 0107 	bic.w	r1, r1, #7
 800b304:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800b308:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800b30c:	f014 0f04 	tst.w	r4, #4
 800b310:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800b314:	fa0c f405 	lsl.w	r4, ip, r5
 800b318:	ea62 0204 	orn	r2, r2, r4
 800b31c:	ea66 0604 	orn	r6, r6, r4
 800b320:	d00a      	beq.n	800b338 <strcmp+0x70>
 800b322:	ea63 0304 	orn	r3, r3, r4
 800b326:	4662      	mov	r2, ip
 800b328:	ea67 0704 	orn	r7, r7, r4
 800b32c:	4666      	mov	r6, ip
 800b32e:	e003      	b.n	800b338 <strcmp+0x70>
 800b330:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800b334:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800b338:	fa82 f54c 	uadd8	r5, r2, ip
 800b33c:	ea82 0406 	eor.w	r4, r2, r6
 800b340:	faa4 f48c 	sel	r4, r4, ip
 800b344:	bb6c      	cbnz	r4, 800b3a2 <strcmp+0xda>
 800b346:	fa83 f54c 	uadd8	r5, r3, ip
 800b34a:	ea83 0507 	eor.w	r5, r3, r7
 800b34e:	faa5 f58c 	sel	r5, r5, ip
 800b352:	b995      	cbnz	r5, 800b37a <strcmp+0xb2>
 800b354:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800b358:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800b35c:	fa82 f54c 	uadd8	r5, r2, ip
 800b360:	ea82 0406 	eor.w	r4, r2, r6
 800b364:	faa4 f48c 	sel	r4, r4, ip
 800b368:	fa83 f54c 	uadd8	r5, r3, ip
 800b36c:	ea83 0507 	eor.w	r5, r3, r7
 800b370:	faa5 f58c 	sel	r5, r5, ip
 800b374:	4325      	orrs	r5, r4
 800b376:	d0db      	beq.n	800b330 <strcmp+0x68>
 800b378:	b99c      	cbnz	r4, 800b3a2 <strcmp+0xda>
 800b37a:	ba2d      	rev	r5, r5
 800b37c:	fab5 f485 	clz	r4, r5
 800b380:	f024 0407 	bic.w	r4, r4, #7
 800b384:	fa27 f104 	lsr.w	r1, r7, r4
 800b388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b38c:	fa23 f304 	lsr.w	r3, r3, r4
 800b390:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800b394:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800b398:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800b39c:	eba0 0001 	sub.w	r0, r0, r1
 800b3a0:	4770      	bx	lr
 800b3a2:	ba24      	rev	r4, r4
 800b3a4:	fab4 f484 	clz	r4, r4
 800b3a8:	f024 0407 	bic.w	r4, r4, #7
 800b3ac:	fa26 f104 	lsr.w	r1, r6, r4
 800b3b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3b4:	fa22 f204 	lsr.w	r2, r2, r4
 800b3b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800b3bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800b3c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800b3c4:	eba0 0001 	sub.w	r0, r0, r1
 800b3c8:	4770      	bx	lr
 800b3ca:	f014 0f03 	tst.w	r4, #3
 800b3ce:	d13c      	bne.n	800b44a <strcmp+0x182>
 800b3d0:	f010 0403 	ands.w	r4, r0, #3
 800b3d4:	d128      	bne.n	800b428 <strcmp+0x160>
 800b3d6:	f850 2b08 	ldr.w	r2, [r0], #8
 800b3da:	f851 3b08 	ldr.w	r3, [r1], #8
 800b3de:	fa82 f54c 	uadd8	r5, r2, ip
 800b3e2:	ea82 0503 	eor.w	r5, r2, r3
 800b3e6:	faa5 f58c 	sel	r5, r5, ip
 800b3ea:	b95d      	cbnz	r5, 800b404 <strcmp+0x13c>
 800b3ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f4:	fa82 f54c 	uadd8	r5, r2, ip
 800b3f8:	ea82 0503 	eor.w	r5, r2, r3
 800b3fc:	faa5 f58c 	sel	r5, r5, ip
 800b400:	2d00      	cmp	r5, #0
 800b402:	d0e8      	beq.n	800b3d6 <strcmp+0x10e>
 800b404:	ba2d      	rev	r5, r5
 800b406:	fab5 f485 	clz	r4, r5
 800b40a:	f024 0407 	bic.w	r4, r4, #7
 800b40e:	fa23 f104 	lsr.w	r1, r3, r4
 800b412:	fa22 f204 	lsr.w	r2, r2, r4
 800b416:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800b41a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800b41e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800b422:	eba0 0001 	sub.w	r0, r0, r1
 800b426:	4770      	bx	lr
 800b428:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800b42c:	f020 0003 	bic.w	r0, r0, #3
 800b430:	f850 2b08 	ldr.w	r2, [r0], #8
 800b434:	f021 0103 	bic.w	r1, r1, #3
 800b438:	f851 3b08 	ldr.w	r3, [r1], #8
 800b43c:	fa0c f404 	lsl.w	r4, ip, r4
 800b440:	ea62 0204 	orn	r2, r2, r4
 800b444:	ea63 0304 	orn	r3, r3, r4
 800b448:	e7c9      	b.n	800b3de <strcmp+0x116>
 800b44a:	f010 0403 	ands.w	r4, r0, #3
 800b44e:	d01a      	beq.n	800b486 <strcmp+0x1be>
 800b450:	eba1 0104 	sub.w	r1, r1, r4
 800b454:	f020 0003 	bic.w	r0, r0, #3
 800b458:	07e4      	lsls	r4, r4, #31
 800b45a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b45e:	d006      	beq.n	800b46e <strcmp+0x1a6>
 800b460:	d20f      	bcs.n	800b482 <strcmp+0x1ba>
 800b462:	788b      	ldrb	r3, [r1, #2]
 800b464:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800b468:	1ae4      	subs	r4, r4, r3
 800b46a:	d106      	bne.n	800b47a <strcmp+0x1b2>
 800b46c:	b12b      	cbz	r3, 800b47a <strcmp+0x1b2>
 800b46e:	78cb      	ldrb	r3, [r1, #3]
 800b470:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800b474:	1ae4      	subs	r4, r4, r3
 800b476:	d100      	bne.n	800b47a <strcmp+0x1b2>
 800b478:	b91b      	cbnz	r3, 800b482 <strcmp+0x1ba>
 800b47a:	4620      	mov	r0, r4
 800b47c:	f85d 4b10 	ldr.w	r4, [sp], #16
 800b480:	4770      	bx	lr
 800b482:	f101 0104 	add.w	r1, r1, #4
 800b486:	f850 2b04 	ldr.w	r2, [r0], #4
 800b48a:	07cc      	lsls	r4, r1, #31
 800b48c:	f021 0103 	bic.w	r1, r1, #3
 800b490:	f851 3b04 	ldr.w	r3, [r1], #4
 800b494:	d848      	bhi.n	800b528 <strcmp+0x260>
 800b496:	d224      	bcs.n	800b4e2 <strcmp+0x21a>
 800b498:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800b49c:	fa82 f54c 	uadd8	r5, r2, ip
 800b4a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800b4a4:	faa5 f58c 	sel	r5, r5, ip
 800b4a8:	d10a      	bne.n	800b4c0 <strcmp+0x1f8>
 800b4aa:	b965      	cbnz	r5, 800b4c6 <strcmp+0x1fe>
 800b4ac:	f851 3b04 	ldr.w	r3, [r1], #4
 800b4b0:	ea84 0402 	eor.w	r4, r4, r2
 800b4b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800b4b8:	d10e      	bne.n	800b4d8 <strcmp+0x210>
 800b4ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4be:	e7eb      	b.n	800b498 <strcmp+0x1d0>
 800b4c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b4c4:	e055      	b.n	800b572 <strcmp+0x2aa>
 800b4c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800b4ca:	d14d      	bne.n	800b568 <strcmp+0x2a0>
 800b4cc:	7808      	ldrb	r0, [r1, #0]
 800b4ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800b4d2:	f1c0 0000 	rsb	r0, r0, #0
 800b4d6:	4770      	bx	lr
 800b4d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800b4dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800b4e0:	e047      	b.n	800b572 <strcmp+0x2aa>
 800b4e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800b4e6:	fa82 f54c 	uadd8	r5, r2, ip
 800b4ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800b4ee:	faa5 f58c 	sel	r5, r5, ip
 800b4f2:	d10a      	bne.n	800b50a <strcmp+0x242>
 800b4f4:	b965      	cbnz	r5, 800b510 <strcmp+0x248>
 800b4f6:	f851 3b04 	ldr.w	r3, [r1], #4
 800b4fa:	ea84 0402 	eor.w	r4, r4, r2
 800b4fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800b502:	d10c      	bne.n	800b51e <strcmp+0x256>
 800b504:	f850 2b04 	ldr.w	r2, [r0], #4
 800b508:	e7eb      	b.n	800b4e2 <strcmp+0x21a>
 800b50a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b50e:	e030      	b.n	800b572 <strcmp+0x2aa>
 800b510:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800b514:	d128      	bne.n	800b568 <strcmp+0x2a0>
 800b516:	880b      	ldrh	r3, [r1, #0]
 800b518:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b51c:	e029      	b.n	800b572 <strcmp+0x2aa>
 800b51e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b522:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800b526:	e024      	b.n	800b572 <strcmp+0x2aa>
 800b528:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800b52c:	fa82 f54c 	uadd8	r5, r2, ip
 800b530:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800b534:	faa5 f58c 	sel	r5, r5, ip
 800b538:	d10a      	bne.n	800b550 <strcmp+0x288>
 800b53a:	b965      	cbnz	r5, 800b556 <strcmp+0x28e>
 800b53c:	f851 3b04 	ldr.w	r3, [r1], #4
 800b540:	ea84 0402 	eor.w	r4, r4, r2
 800b544:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800b548:	d109      	bne.n	800b55e <strcmp+0x296>
 800b54a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b54e:	e7eb      	b.n	800b528 <strcmp+0x260>
 800b550:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800b554:	e00d      	b.n	800b572 <strcmp+0x2aa>
 800b556:	f015 0fff 	tst.w	r5, #255	; 0xff
 800b55a:	d105      	bne.n	800b568 <strcmp+0x2a0>
 800b55c:	680b      	ldr	r3, [r1, #0]
 800b55e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800b562:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b566:	e004      	b.n	800b572 <strcmp+0x2aa>
 800b568:	f04f 0000 	mov.w	r0, #0
 800b56c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800b570:	4770      	bx	lr
 800b572:	ba12      	rev	r2, r2
 800b574:	ba1b      	rev	r3, r3
 800b576:	fa82 f44c 	uadd8	r4, r2, ip
 800b57a:	ea82 0403 	eor.w	r4, r2, r3
 800b57e:	faa4 f58c 	sel	r5, r4, ip
 800b582:	fab5 f485 	clz	r4, r5
 800b586:	fa02 f204 	lsl.w	r2, r2, r4
 800b58a:	fa03 f304 	lsl.w	r3, r3, r4
 800b58e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800b592:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800b596:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800b59a:	4770      	bx	lr

0800b59c <__swbuf_r>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	460d      	mov	r5, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	b110      	cbz	r0, 800b5ac <__swbuf_r+0x10>
 800b5a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d043      	beq.n	800b634 <__swbuf_r+0x98>
 800b5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5b0:	69a3      	ldr	r3, [r4, #24]
 800b5b2:	60a3      	str	r3, [r4, #8]
 800b5b4:	b291      	uxth	r1, r2
 800b5b6:	0708      	lsls	r0, r1, #28
 800b5b8:	d51b      	bpl.n	800b5f2 <__swbuf_r+0x56>
 800b5ba:	6923      	ldr	r3, [r4, #16]
 800b5bc:	b1cb      	cbz	r3, 800b5f2 <__swbuf_r+0x56>
 800b5be:	b2ed      	uxtb	r5, r5
 800b5c0:	0489      	lsls	r1, r1, #18
 800b5c2:	462f      	mov	r7, r5
 800b5c4:	d522      	bpl.n	800b60c <__swbuf_r+0x70>
 800b5c6:	6822      	ldr	r2, [r4, #0]
 800b5c8:	6961      	ldr	r1, [r4, #20]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	4299      	cmp	r1, r3
 800b5ce:	dd29      	ble.n	800b624 <__swbuf_r+0x88>
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	68a1      	ldr	r1, [r4, #8]
 800b5d4:	1c50      	adds	r0, r2, #1
 800b5d6:	3901      	subs	r1, #1
 800b5d8:	60a1      	str	r1, [r4, #8]
 800b5da:	6020      	str	r0, [r4, #0]
 800b5dc:	7015      	strb	r5, [r2, #0]
 800b5de:	6962      	ldr	r2, [r4, #20]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d02a      	beq.n	800b63a <__swbuf_r+0x9e>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	07db      	lsls	r3, r3, #31
 800b5e8:	d501      	bpl.n	800b5ee <__swbuf_r+0x52>
 800b5ea:	2d0a      	cmp	r5, #10
 800b5ec:	d025      	beq.n	800b63a <__swbuf_r+0x9e>
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7fe fc4f 	bl	8009e98 <__swsetup_r>
 800b5fa:	bb20      	cbnz	r0, 800b646 <__swbuf_r+0xaa>
 800b5fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	b291      	uxth	r1, r2
 800b604:	b2ed      	uxtb	r5, r5
 800b606:	0489      	lsls	r1, r1, #18
 800b608:	462f      	mov	r7, r5
 800b60a:	d4dc      	bmi.n	800b5c6 <__swbuf_r+0x2a>
 800b60c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b60e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b612:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b616:	81a2      	strh	r2, [r4, #12]
 800b618:	6822      	ldr	r2, [r4, #0]
 800b61a:	6661      	str	r1, [r4, #100]	; 0x64
 800b61c:	6961      	ldr	r1, [r4, #20]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	4299      	cmp	r1, r3
 800b622:	dcd5      	bgt.n	800b5d0 <__swbuf_r+0x34>
 800b624:	4621      	mov	r1, r4
 800b626:	4630      	mov	r0, r6
 800b628:	f7fe fd5c 	bl	800a0e4 <_fflush_r>
 800b62c:	b958      	cbnz	r0, 800b646 <__swbuf_r+0xaa>
 800b62e:	6822      	ldr	r2, [r4, #0]
 800b630:	2301      	movs	r3, #1
 800b632:	e7ce      	b.n	800b5d2 <__swbuf_r+0x36>
 800b634:	f7fe fe02 	bl	800a23c <__sinit>
 800b638:	e7b8      	b.n	800b5ac <__swbuf_r+0x10>
 800b63a:	4621      	mov	r1, r4
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7fe fd51 	bl	800a0e4 <_fflush_r>
 800b642:	2800      	cmp	r0, #0
 800b644:	d0d3      	beq.n	800b5ee <__swbuf_r+0x52>
 800b646:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b64a:	e7d0      	b.n	800b5ee <__swbuf_r+0x52>

0800b64c <__swbuf>:
 800b64c:	4b02      	ldr	r3, [pc, #8]	; (800b658 <__swbuf+0xc>)
 800b64e:	460a      	mov	r2, r1
 800b650:	4601      	mov	r1, r0
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	f7ff bfa2 	b.w	800b59c <__swbuf_r>
 800b658:	200000d4 	.word	0x200000d4

0800b65c <_wcrtomb_r>:
 800b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65e:	4c11      	ldr	r4, [pc, #68]	; (800b6a4 <_wcrtomb_r+0x48>)
 800b660:	6824      	ldr	r4, [r4, #0]
 800b662:	b085      	sub	sp, #20
 800b664:	4606      	mov	r6, r0
 800b666:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800b668:	461f      	mov	r7, r3
 800b66a:	b151      	cbz	r1, 800b682 <_wcrtomb_r+0x26>
 800b66c:	4d0e      	ldr	r5, [pc, #56]	; (800b6a8 <_wcrtomb_r+0x4c>)
 800b66e:	2c00      	cmp	r4, #0
 800b670:	bf08      	it	eq
 800b672:	462c      	moveq	r4, r5
 800b674:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800b678:	47a0      	blx	r4
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	d00c      	beq.n	800b698 <_wcrtomb_r+0x3c>
 800b67e:	b005      	add	sp, #20
 800b680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b682:	4a09      	ldr	r2, [pc, #36]	; (800b6a8 <_wcrtomb_r+0x4c>)
 800b684:	2c00      	cmp	r4, #0
 800b686:	bf08      	it	eq
 800b688:	4614      	moveq	r4, r2
 800b68a:	460a      	mov	r2, r1
 800b68c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800b690:	a901      	add	r1, sp, #4
 800b692:	47a0      	blx	r4
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	d1f2      	bne.n	800b67e <_wcrtomb_r+0x22>
 800b698:	2200      	movs	r2, #0
 800b69a:	238a      	movs	r3, #138	; 0x8a
 800b69c:	603a      	str	r2, [r7, #0]
 800b69e:	6033      	str	r3, [r6, #0]
 800b6a0:	b005      	add	sp, #20
 800b6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a4:	200000d4 	.word	0x200000d4
 800b6a8:	20000910 	.word	0x20000910

0800b6ac <wcrtomb>:
 800b6ac:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <wcrtomb+0x4c>)
 800b6ae:	b570      	push	{r4, r5, r6, lr}
 800b6b0:	681c      	ldr	r4, [r3, #0]
 800b6b2:	4615      	mov	r5, r2
 800b6b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6b6:	4a11      	ldr	r2, [pc, #68]	; (800b6fc <wcrtomb+0x50>)
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bf08      	it	eq
 800b6be:	4613      	moveq	r3, r2
 800b6c0:	b150      	cbz	r0, 800b6d8 <wcrtomb+0x2c>
 800b6c2:	460a      	mov	r2, r1
 800b6c4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800b6c8:	4601      	mov	r1, r0
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	47b0      	blx	r6
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d00a      	beq.n	800b6ea <wcrtomb+0x3e>
 800b6d4:	b004      	add	sp, #16
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	4602      	mov	r2, r0
 800b6da:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800b6de:	a901      	add	r1, sp, #4
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	47b0      	blx	r6
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d1f4      	bne.n	800b6d4 <wcrtomb+0x28>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	238a      	movs	r3, #138	; 0x8a
 800b6ee:	602a      	str	r2, [r5, #0]
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	b004      	add	sp, #16
 800b6f4:	bd70      	pop	{r4, r5, r6, pc}
 800b6f6:	bf00      	nop
 800b6f8:	200000d4 	.word	0x200000d4
 800b6fc:	20000910 	.word	0x20000910

0800b700 <_wctomb_r>:
 800b700:	b430      	push	{r4, r5}
 800b702:	4c06      	ldr	r4, [pc, #24]	; (800b71c <_wctomb_r+0x1c>)
 800b704:	4d06      	ldr	r5, [pc, #24]	; (800b720 <_wctomb_r+0x20>)
 800b706:	6824      	ldr	r4, [r4, #0]
 800b708:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	bf08      	it	eq
 800b70e:	462c      	moveq	r4, r5
 800b710:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800b714:	46a4      	mov	ip, r4
 800b716:	bc30      	pop	{r4, r5}
 800b718:	4760      	bx	ip
 800b71a:	bf00      	nop
 800b71c:	200000d4 	.word	0x200000d4
 800b720:	20000910 	.word	0x20000910

0800b724 <__ascii_wctomb>:
 800b724:	b121      	cbz	r1, 800b730 <__ascii_wctomb+0xc>
 800b726:	2aff      	cmp	r2, #255	; 0xff
 800b728:	d804      	bhi.n	800b734 <__ascii_wctomb+0x10>
 800b72a:	700a      	strb	r2, [r1, #0]
 800b72c:	2001      	movs	r0, #1
 800b72e:	4770      	bx	lr
 800b730:	4608      	mov	r0, r1
 800b732:	4770      	bx	lr
 800b734:	238a      	movs	r3, #138	; 0x8a
 800b736:	6003      	str	r3, [r0, #0]
 800b738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop

0800b740 <_write_r>:
 800b740:	b570      	push	{r4, r5, r6, lr}
 800b742:	460d      	mov	r5, r1
 800b744:	4c08      	ldr	r4, [pc, #32]	; (800b768 <_write_r+0x28>)
 800b746:	4611      	mov	r1, r2
 800b748:	4606      	mov	r6, r0
 800b74a:	461a      	mov	r2, r3
 800b74c:	4628      	mov	r0, r5
 800b74e:	2300      	movs	r3, #0
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	f000 fa63 	bl	800bc1c <_write>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d000      	beq.n	800b75c <_write_r+0x1c>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0fb      	beq.n	800b75a <_write_r+0x1a>
 800b762:	6033      	str	r3, [r6, #0]
 800b764:	bd70      	pop	{r4, r5, r6, pc}
 800b766:	bf00      	nop
 800b768:	2000121c 	.word	0x2000121c

0800b76c <_fclose_r>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	2900      	cmp	r1, #0
 800b770:	d048      	beq.n	800b804 <_fclose_r+0x98>
 800b772:	4605      	mov	r5, r0
 800b774:	460c      	mov	r4, r1
 800b776:	b110      	cbz	r0, 800b77e <_fclose_r+0x12>
 800b778:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d048      	beq.n	800b810 <_fclose_r+0xa4>
 800b77e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b784:	07d0      	lsls	r0, r2, #31
 800b786:	d440      	bmi.n	800b80a <_fclose_r+0x9e>
 800b788:	0599      	lsls	r1, r3, #22
 800b78a:	d530      	bpl.n	800b7ee <_fclose_r+0x82>
 800b78c:	4621      	mov	r1, r4
 800b78e:	4628      	mov	r0, r5
 800b790:	f7fe fbfe 	bl	8009f90 <__sflush_r>
 800b794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b796:	4606      	mov	r6, r0
 800b798:	b133      	cbz	r3, 800b7a8 <_fclose_r+0x3c>
 800b79a:	69e1      	ldr	r1, [r4, #28]
 800b79c:	4628      	mov	r0, r5
 800b79e:	4798      	blx	r3
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	bfb8      	it	lt
 800b7a4:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	061a      	lsls	r2, r3, #24
 800b7ac:	d43c      	bmi.n	800b828 <_fclose_r+0xbc>
 800b7ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b7b0:	b141      	cbz	r1, 800b7c4 <_fclose_r+0x58>
 800b7b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b7b6:	4299      	cmp	r1, r3
 800b7b8:	d002      	beq.n	800b7c0 <_fclose_r+0x54>
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f7fe fee6 	bl	800a58c <_free_r>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b7c6:	b121      	cbz	r1, 800b7d2 <_fclose_r+0x66>
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f7fe fedf 	bl	800a58c <_free_r>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	6463      	str	r3, [r4, #68]	; 0x44
 800b7d2:	f7fe fdb1 	bl	800a338 <__sfp_lock_acquire>
 800b7d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7d8:	2200      	movs	r2, #0
 800b7da:	07db      	lsls	r3, r3, #31
 800b7dc:	81a2      	strh	r2, [r4, #12]
 800b7de:	d51f      	bpl.n	800b820 <_fclose_r+0xb4>
 800b7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7e2:	f7ff f9f7 	bl	800abd4 <__retarget_lock_close_recursive>
 800b7e6:	f7fe fdad 	bl	800a344 <__sfp_lock_release>
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
 800b7ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7f0:	f7ff f9f4 	bl	800abdc <__retarget_lock_acquire_recursive>
 800b7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1c7      	bne.n	800b78c <_fclose_r+0x20>
 800b7fc:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800b7fe:	f016 0601 	ands.w	r6, r6, #1
 800b802:	d016      	beq.n	800b832 <_fclose_r+0xc6>
 800b804:	2600      	movs	r6, #0
 800b806:	4630      	mov	r0, r6
 800b808:	bd70      	pop	{r4, r5, r6, pc}
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d0fa      	beq.n	800b804 <_fclose_r+0x98>
 800b80e:	e7bd      	b.n	800b78c <_fclose_r+0x20>
 800b810:	f7fe fd14 	bl	800a23c <__sinit>
 800b814:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81a:	07d0      	lsls	r0, r2, #31
 800b81c:	d4f5      	bmi.n	800b80a <_fclose_r+0x9e>
 800b81e:	e7b3      	b.n	800b788 <_fclose_r+0x1c>
 800b820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b822:	f7ff f9e3 	bl	800abec <__retarget_lock_release_recursive>
 800b826:	e7db      	b.n	800b7e0 <_fclose_r+0x74>
 800b828:	6921      	ldr	r1, [r4, #16]
 800b82a:	4628      	mov	r0, r5
 800b82c:	f7fe feae 	bl	800a58c <_free_r>
 800b830:	e7bd      	b.n	800b7ae <_fclose_r+0x42>
 800b832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b834:	f7ff f9da 	bl	800abec <__retarget_lock_release_recursive>
 800b838:	4630      	mov	r0, r6
 800b83a:	bd70      	pop	{r4, r5, r6, pc}

0800b83c <fclose>:
 800b83c:	4b02      	ldr	r3, [pc, #8]	; (800b848 <fclose+0xc>)
 800b83e:	4601      	mov	r1, r0
 800b840:	6818      	ldr	r0, [r3, #0]
 800b842:	f7ff bf93 	b.w	800b76c <_fclose_r>
 800b846:	bf00      	nop
 800b848:	200000d4 	.word	0x200000d4

0800b84c <_isatty_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4c07      	ldr	r4, [pc, #28]	; (800b86c <_isatty_r+0x20>)
 800b850:	2300      	movs	r3, #0
 800b852:	4605      	mov	r5, r0
 800b854:	4608      	mov	r0, r1
 800b856:	6023      	str	r3, [r4, #0]
 800b858:	f000 f9b8 	bl	800bbcc <_isatty>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d000      	beq.n	800b862 <_isatty_r+0x16>
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d0fb      	beq.n	800b860 <_isatty_r+0x14>
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	2000121c 	.word	0x2000121c

0800b870 <_lseek_r>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	460d      	mov	r5, r1
 800b874:	4c08      	ldr	r4, [pc, #32]	; (800b898 <_lseek_r+0x28>)
 800b876:	4611      	mov	r1, r2
 800b878:	4606      	mov	r6, r0
 800b87a:	461a      	mov	r2, r3
 800b87c:	4628      	mov	r0, r5
 800b87e:	2300      	movs	r3, #0
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	f000 f9b3 	bl	800bbec <_lseek>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d000      	beq.n	800b88c <_lseek_r+0x1c>
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0fb      	beq.n	800b88a <_lseek_r+0x1a>
 800b892:	6033      	str	r3, [r6, #0]
 800b894:	bd70      	pop	{r4, r5, r6, pc}
 800b896:	bf00      	nop
 800b898:	2000121c 	.word	0x2000121c

0800b89c <__aeabi_uldivmod>:
 800b89c:	b953      	cbnz	r3, 800b8b4 <__aeabi_uldivmod+0x18>
 800b89e:	b94a      	cbnz	r2, 800b8b4 <__aeabi_uldivmod+0x18>
 800b8a0:	2900      	cmp	r1, #0
 800b8a2:	bf08      	it	eq
 800b8a4:	2800      	cmpeq	r0, #0
 800b8a6:	bf1c      	itt	ne
 800b8a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800b8ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800b8b0:	f000 b972 	b.w	800bb98 <__aeabi_idiv0>
 800b8b4:	f1ad 0c08 	sub.w	ip, sp, #8
 800b8b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800b8bc:	f000 f806 	bl	800b8cc <__udivmoddi4>
 800b8c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b8c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8c8:	b004      	add	sp, #16
 800b8ca:	4770      	bx	lr

0800b8cc <__udivmoddi4>:
 800b8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d0:	9e08      	ldr	r6, [sp, #32]
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	4688      	mov	r8, r1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d14b      	bne.n	800b972 <__udivmoddi4+0xa6>
 800b8da:	428a      	cmp	r2, r1
 800b8dc:	4615      	mov	r5, r2
 800b8de:	d967      	bls.n	800b9b0 <__udivmoddi4+0xe4>
 800b8e0:	fab2 f282 	clz	r2, r2
 800b8e4:	b14a      	cbz	r2, 800b8fa <__udivmoddi4+0x2e>
 800b8e6:	f1c2 0720 	rsb	r7, r2, #32
 800b8ea:	fa01 f302 	lsl.w	r3, r1, r2
 800b8ee:	fa20 f707 	lsr.w	r7, r0, r7
 800b8f2:	4095      	lsls	r5, r2
 800b8f4:	ea47 0803 	orr.w	r8, r7, r3
 800b8f8:	4094      	lsls	r4, r2
 800b8fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b8fe:	0c23      	lsrs	r3, r4, #16
 800b900:	fbb8 f7fe 	udiv	r7, r8, lr
 800b904:	fa1f fc85 	uxth.w	ip, r5
 800b908:	fb0e 8817 	mls	r8, lr, r7, r8
 800b90c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800b910:	fb07 f10c 	mul.w	r1, r7, ip
 800b914:	4299      	cmp	r1, r3
 800b916:	d909      	bls.n	800b92c <__udivmoddi4+0x60>
 800b918:	18eb      	adds	r3, r5, r3
 800b91a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800b91e:	f080 811b 	bcs.w	800bb58 <__udivmoddi4+0x28c>
 800b922:	4299      	cmp	r1, r3
 800b924:	f240 8118 	bls.w	800bb58 <__udivmoddi4+0x28c>
 800b928:	3f02      	subs	r7, #2
 800b92a:	442b      	add	r3, r5
 800b92c:	1a5b      	subs	r3, r3, r1
 800b92e:	b2a4      	uxth	r4, r4
 800b930:	fbb3 f0fe 	udiv	r0, r3, lr
 800b934:	fb0e 3310 	mls	r3, lr, r0, r3
 800b938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800b93c:	fb00 fc0c 	mul.w	ip, r0, ip
 800b940:	45a4      	cmp	ip, r4
 800b942:	d909      	bls.n	800b958 <__udivmoddi4+0x8c>
 800b944:	192c      	adds	r4, r5, r4
 800b946:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b94a:	f080 8107 	bcs.w	800bb5c <__udivmoddi4+0x290>
 800b94e:	45a4      	cmp	ip, r4
 800b950:	f240 8104 	bls.w	800bb5c <__udivmoddi4+0x290>
 800b954:	3802      	subs	r0, #2
 800b956:	442c      	add	r4, r5
 800b958:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b95c:	eba4 040c 	sub.w	r4, r4, ip
 800b960:	2700      	movs	r7, #0
 800b962:	b11e      	cbz	r6, 800b96c <__udivmoddi4+0xa0>
 800b964:	40d4      	lsrs	r4, r2
 800b966:	2300      	movs	r3, #0
 800b968:	e9c6 4300 	strd	r4, r3, [r6]
 800b96c:	4639      	mov	r1, r7
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b972:	428b      	cmp	r3, r1
 800b974:	d909      	bls.n	800b98a <__udivmoddi4+0xbe>
 800b976:	2e00      	cmp	r6, #0
 800b978:	f000 80eb 	beq.w	800bb52 <__udivmoddi4+0x286>
 800b97c:	2700      	movs	r7, #0
 800b97e:	e9c6 0100 	strd	r0, r1, [r6]
 800b982:	4638      	mov	r0, r7
 800b984:	4639      	mov	r1, r7
 800b986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b98a:	fab3 f783 	clz	r7, r3
 800b98e:	2f00      	cmp	r7, #0
 800b990:	d147      	bne.n	800ba22 <__udivmoddi4+0x156>
 800b992:	428b      	cmp	r3, r1
 800b994:	d302      	bcc.n	800b99c <__udivmoddi4+0xd0>
 800b996:	4282      	cmp	r2, r0
 800b998:	f200 80fa 	bhi.w	800bb90 <__udivmoddi4+0x2c4>
 800b99c:	1a84      	subs	r4, r0, r2
 800b99e:	eb61 0303 	sbc.w	r3, r1, r3
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	4698      	mov	r8, r3
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	d0e0      	beq.n	800b96c <__udivmoddi4+0xa0>
 800b9aa:	e9c6 4800 	strd	r4, r8, [r6]
 800b9ae:	e7dd      	b.n	800b96c <__udivmoddi4+0xa0>
 800b9b0:	b902      	cbnz	r2, 800b9b4 <__udivmoddi4+0xe8>
 800b9b2:	deff      	udf	#255	; 0xff
 800b9b4:	fab2 f282 	clz	r2, r2
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	f040 808f 	bne.w	800badc <__udivmoddi4+0x210>
 800b9be:	1b49      	subs	r1, r1, r5
 800b9c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b9c4:	fa1f f885 	uxth.w	r8, r5
 800b9c8:	2701      	movs	r7, #1
 800b9ca:	fbb1 fcfe 	udiv	ip, r1, lr
 800b9ce:	0c23      	lsrs	r3, r4, #16
 800b9d0:	fb0e 111c 	mls	r1, lr, ip, r1
 800b9d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b9d8:	fb08 f10c 	mul.w	r1, r8, ip
 800b9dc:	4299      	cmp	r1, r3
 800b9de:	d907      	bls.n	800b9f0 <__udivmoddi4+0x124>
 800b9e0:	18eb      	adds	r3, r5, r3
 800b9e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800b9e6:	d202      	bcs.n	800b9ee <__udivmoddi4+0x122>
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	f200 80cd 	bhi.w	800bb88 <__udivmoddi4+0x2bc>
 800b9ee:	4684      	mov	ip, r0
 800b9f0:	1a59      	subs	r1, r3, r1
 800b9f2:	b2a3      	uxth	r3, r4
 800b9f4:	fbb1 f0fe 	udiv	r0, r1, lr
 800b9f8:	fb0e 1410 	mls	r4, lr, r0, r1
 800b9fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ba00:	fb08 f800 	mul.w	r8, r8, r0
 800ba04:	45a0      	cmp	r8, r4
 800ba06:	d907      	bls.n	800ba18 <__udivmoddi4+0x14c>
 800ba08:	192c      	adds	r4, r5, r4
 800ba0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba0e:	d202      	bcs.n	800ba16 <__udivmoddi4+0x14a>
 800ba10:	45a0      	cmp	r8, r4
 800ba12:	f200 80b6 	bhi.w	800bb82 <__udivmoddi4+0x2b6>
 800ba16:	4618      	mov	r0, r3
 800ba18:	eba4 0408 	sub.w	r4, r4, r8
 800ba1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800ba20:	e79f      	b.n	800b962 <__udivmoddi4+0x96>
 800ba22:	f1c7 0c20 	rsb	ip, r7, #32
 800ba26:	40bb      	lsls	r3, r7
 800ba28:	fa22 fe0c 	lsr.w	lr, r2, ip
 800ba2c:	ea4e 0e03 	orr.w	lr, lr, r3
 800ba30:	fa01 f407 	lsl.w	r4, r1, r7
 800ba34:	fa20 f50c 	lsr.w	r5, r0, ip
 800ba38:	fa21 f30c 	lsr.w	r3, r1, ip
 800ba3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800ba40:	4325      	orrs	r5, r4
 800ba42:	fbb3 f9f8 	udiv	r9, r3, r8
 800ba46:	0c2c      	lsrs	r4, r5, #16
 800ba48:	fb08 3319 	mls	r3, r8, r9, r3
 800ba4c:	fa1f fa8e 	uxth.w	sl, lr
 800ba50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800ba54:	fb09 f40a 	mul.w	r4, r9, sl
 800ba58:	429c      	cmp	r4, r3
 800ba5a:	fa02 f207 	lsl.w	r2, r2, r7
 800ba5e:	fa00 f107 	lsl.w	r1, r0, r7
 800ba62:	d90b      	bls.n	800ba7c <__udivmoddi4+0x1b0>
 800ba64:	eb1e 0303 	adds.w	r3, lr, r3
 800ba68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800ba6c:	f080 8087 	bcs.w	800bb7e <__udivmoddi4+0x2b2>
 800ba70:	429c      	cmp	r4, r3
 800ba72:	f240 8084 	bls.w	800bb7e <__udivmoddi4+0x2b2>
 800ba76:	f1a9 0902 	sub.w	r9, r9, #2
 800ba7a:	4473      	add	r3, lr
 800ba7c:	1b1b      	subs	r3, r3, r4
 800ba7e:	b2ad      	uxth	r5, r5
 800ba80:	fbb3 f0f8 	udiv	r0, r3, r8
 800ba84:	fb08 3310 	mls	r3, r8, r0, r3
 800ba88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800ba8c:	fb00 fa0a 	mul.w	sl, r0, sl
 800ba90:	45a2      	cmp	sl, r4
 800ba92:	d908      	bls.n	800baa6 <__udivmoddi4+0x1da>
 800ba94:	eb1e 0404 	adds.w	r4, lr, r4
 800ba98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba9c:	d26b      	bcs.n	800bb76 <__udivmoddi4+0x2aa>
 800ba9e:	45a2      	cmp	sl, r4
 800baa0:	d969      	bls.n	800bb76 <__udivmoddi4+0x2aa>
 800baa2:	3802      	subs	r0, #2
 800baa4:	4474      	add	r4, lr
 800baa6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800baaa:	fba0 8902 	umull	r8, r9, r0, r2
 800baae:	eba4 040a 	sub.w	r4, r4, sl
 800bab2:	454c      	cmp	r4, r9
 800bab4:	46c2      	mov	sl, r8
 800bab6:	464b      	mov	r3, r9
 800bab8:	d354      	bcc.n	800bb64 <__udivmoddi4+0x298>
 800baba:	d051      	beq.n	800bb60 <__udivmoddi4+0x294>
 800babc:	2e00      	cmp	r6, #0
 800babe:	d069      	beq.n	800bb94 <__udivmoddi4+0x2c8>
 800bac0:	ebb1 050a 	subs.w	r5, r1, sl
 800bac4:	eb64 0403 	sbc.w	r4, r4, r3
 800bac8:	fa04 fc0c 	lsl.w	ip, r4, ip
 800bacc:	40fd      	lsrs	r5, r7
 800bace:	40fc      	lsrs	r4, r7
 800bad0:	ea4c 0505 	orr.w	r5, ip, r5
 800bad4:	e9c6 5400 	strd	r5, r4, [r6]
 800bad8:	2700      	movs	r7, #0
 800bada:	e747      	b.n	800b96c <__udivmoddi4+0xa0>
 800badc:	f1c2 0320 	rsb	r3, r2, #32
 800bae0:	fa20 f703 	lsr.w	r7, r0, r3
 800bae4:	4095      	lsls	r5, r2
 800bae6:	fa01 f002 	lsl.w	r0, r1, r2
 800baea:	fa21 f303 	lsr.w	r3, r1, r3
 800baee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800baf2:	4338      	orrs	r0, r7
 800baf4:	0c01      	lsrs	r1, r0, #16
 800baf6:	fbb3 f7fe 	udiv	r7, r3, lr
 800bafa:	fa1f f885 	uxth.w	r8, r5
 800bafe:	fb0e 3317 	mls	r3, lr, r7, r3
 800bb02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb06:	fb07 f308 	mul.w	r3, r7, r8
 800bb0a:	428b      	cmp	r3, r1
 800bb0c:	fa04 f402 	lsl.w	r4, r4, r2
 800bb10:	d907      	bls.n	800bb22 <__udivmoddi4+0x256>
 800bb12:	1869      	adds	r1, r5, r1
 800bb14:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800bb18:	d22f      	bcs.n	800bb7a <__udivmoddi4+0x2ae>
 800bb1a:	428b      	cmp	r3, r1
 800bb1c:	d92d      	bls.n	800bb7a <__udivmoddi4+0x2ae>
 800bb1e:	3f02      	subs	r7, #2
 800bb20:	4429      	add	r1, r5
 800bb22:	1acb      	subs	r3, r1, r3
 800bb24:	b281      	uxth	r1, r0
 800bb26:	fbb3 f0fe 	udiv	r0, r3, lr
 800bb2a:	fb0e 3310 	mls	r3, lr, r0, r3
 800bb2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb32:	fb00 f308 	mul.w	r3, r0, r8
 800bb36:	428b      	cmp	r3, r1
 800bb38:	d907      	bls.n	800bb4a <__udivmoddi4+0x27e>
 800bb3a:	1869      	adds	r1, r5, r1
 800bb3c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800bb40:	d217      	bcs.n	800bb72 <__udivmoddi4+0x2a6>
 800bb42:	428b      	cmp	r3, r1
 800bb44:	d915      	bls.n	800bb72 <__udivmoddi4+0x2a6>
 800bb46:	3802      	subs	r0, #2
 800bb48:	4429      	add	r1, r5
 800bb4a:	1ac9      	subs	r1, r1, r3
 800bb4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800bb50:	e73b      	b.n	800b9ca <__udivmoddi4+0xfe>
 800bb52:	4637      	mov	r7, r6
 800bb54:	4630      	mov	r0, r6
 800bb56:	e709      	b.n	800b96c <__udivmoddi4+0xa0>
 800bb58:	4607      	mov	r7, r0
 800bb5a:	e6e7      	b.n	800b92c <__udivmoddi4+0x60>
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	e6fb      	b.n	800b958 <__udivmoddi4+0x8c>
 800bb60:	4541      	cmp	r1, r8
 800bb62:	d2ab      	bcs.n	800babc <__udivmoddi4+0x1f0>
 800bb64:	ebb8 0a02 	subs.w	sl, r8, r2
 800bb68:	eb69 020e 	sbc.w	r2, r9, lr
 800bb6c:	3801      	subs	r0, #1
 800bb6e:	4613      	mov	r3, r2
 800bb70:	e7a4      	b.n	800babc <__udivmoddi4+0x1f0>
 800bb72:	4660      	mov	r0, ip
 800bb74:	e7e9      	b.n	800bb4a <__udivmoddi4+0x27e>
 800bb76:	4618      	mov	r0, r3
 800bb78:	e795      	b.n	800baa6 <__udivmoddi4+0x1da>
 800bb7a:	4667      	mov	r7, ip
 800bb7c:	e7d1      	b.n	800bb22 <__udivmoddi4+0x256>
 800bb7e:	4681      	mov	r9, r0
 800bb80:	e77c      	b.n	800ba7c <__udivmoddi4+0x1b0>
 800bb82:	3802      	subs	r0, #2
 800bb84:	442c      	add	r4, r5
 800bb86:	e747      	b.n	800ba18 <__udivmoddi4+0x14c>
 800bb88:	f1ac 0c02 	sub.w	ip, ip, #2
 800bb8c:	442b      	add	r3, r5
 800bb8e:	e72f      	b.n	800b9f0 <__udivmoddi4+0x124>
 800bb90:	4638      	mov	r0, r7
 800bb92:	e708      	b.n	800b9a6 <__udivmoddi4+0xda>
 800bb94:	4637      	mov	r7, r6
 800bb96:	e6e9      	b.n	800b96c <__udivmoddi4+0xa0>

0800bb98 <__aeabi_idiv0>:
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop

0800bb9c <_close>:
 800bb9c:	4b02      	ldr	r3, [pc, #8]	; (800bba8 <_close+0xc>)
 800bb9e:	2258      	movs	r2, #88	; 0x58
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bba6:	4770      	bx	lr
 800bba8:	2000121c 	.word	0x2000121c

0800bbac <_fstat>:
 800bbac:	4b02      	ldr	r3, [pc, #8]	; (800bbb8 <_fstat+0xc>)
 800bbae:	2258      	movs	r2, #88	; 0x58
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbb6:	4770      	bx	lr
 800bbb8:	2000121c 	.word	0x2000121c

0800bbbc <_getpid>:
 800bbbc:	4b02      	ldr	r3, [pc, #8]	; (800bbc8 <_getpid+0xc>)
 800bbbe:	2258      	movs	r2, #88	; 0x58
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbc6:	4770      	bx	lr
 800bbc8:	2000121c 	.word	0x2000121c

0800bbcc <_isatty>:
 800bbcc:	4b02      	ldr	r3, [pc, #8]	; (800bbd8 <_isatty+0xc>)
 800bbce:	2258      	movs	r2, #88	; 0x58
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	2000121c 	.word	0x2000121c

0800bbdc <_kill>:
 800bbdc:	4b02      	ldr	r3, [pc, #8]	; (800bbe8 <_kill+0xc>)
 800bbde:	2258      	movs	r2, #88	; 0x58
 800bbe0:	601a      	str	r2, [r3, #0]
 800bbe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbe6:	4770      	bx	lr
 800bbe8:	2000121c 	.word	0x2000121c

0800bbec <_lseek>:
 800bbec:	4b02      	ldr	r3, [pc, #8]	; (800bbf8 <_lseek+0xc>)
 800bbee:	2258      	movs	r2, #88	; 0x58
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbf6:	4770      	bx	lr
 800bbf8:	2000121c 	.word	0x2000121c

0800bbfc <_open>:
 800bbfc:	4b02      	ldr	r3, [pc, #8]	; (800bc08 <_open+0xc>)
 800bbfe:	2258      	movs	r2, #88	; 0x58
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc06:	4770      	bx	lr
 800bc08:	2000121c 	.word	0x2000121c

0800bc0c <_read>:
 800bc0c:	4b02      	ldr	r3, [pc, #8]	; (800bc18 <_read+0xc>)
 800bc0e:	2258      	movs	r2, #88	; 0x58
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc16:	4770      	bx	lr
 800bc18:	2000121c 	.word	0x2000121c

0800bc1c <_write>:
 800bc1c:	4b02      	ldr	r3, [pc, #8]	; (800bc28 <_write+0xc>)
 800bc1e:	2258      	movs	r2, #88	; 0x58
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc26:	4770      	bx	lr
 800bc28:	2000121c 	.word	0x2000121c

0800bc2c <_exit>:
 800bc2c:	e7fe      	b.n	800bc2c <_exit>
 800bc2e:	bf00      	nop

0800bc30 <clock_config>:
 800bc30:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 800bc40:	0101 0101                                   ....

0800bc44 <DeviceDescriptor>:
 800bc44:	0112 0110 0002 4000 058b 0058 0010 0201     .......@..X.....
 800bc54:	0100 0000                                   ....

0800bc58 <ConfigurationDescriptor>:
 800bc58:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 800bc68:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 800bc78:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 800bc88:	0507 0203 0040 0705 8205 4002 0500 0000     ....@......@....

0800bc98 <LanguageString>:
 800bc98:	0304 0409 0000 0000                         ........

0800bca0 <ManufacturerString>:
 800bca0:	0358 0049 0000 006e 0000 0066 0000 0069     X.I...n...f...i.
 800bcb0:	0000 006e 0000 0065 0000 006f 0000 006e     ..n...e...o...n.
 800bcc0:	0000 0020 0000 0054 0000 0065 0000 0063     .. ...T...e...c.
 800bcd0:	0000 0068 0000 006e 0000 006f 0000 006c     ..h...n...o...l.
 800bce0:	0000 006f 0000 0067 0000 0069 0000 0065     ..o...g...i...e.
 800bcf0:	0000 0073 0000 0000 0000 0000               ..s.........

0800bcfc <ProductString>:
 800bcfc:	0320 0049 0000 0046 0000 0058 0000 0020      .I...F...X... .
 800bd0c:	0000 0043 0000 0044 0000 0043 0000 0000     ..C...D...C.....
 800bd1c:	0000 0000                                   ....

0800bd20 <pr2six>:
 800bd20:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800bd30:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800bd40:	4040 4040 4040 4040 4040 4040 3e40 4040     @@@@@@@@@@@@@>@@
 800bd50:	3534 3736 3938 3b3a 3d3c 4040 4040 4040     456789:;<=@@@@@@
 800bd60:	0040 0201 0403 0605 0807 0a09 0c0b 0e0d     @...............
 800bd70:	100f 1211 1413 1615 1817 4019 4040 3f40     ...........@@@@?
 800bd80:	1a40 1c1b 1e1d 201f 2221 2423 2625 2827     @...... !"#$%&'(
 800bd90:	2a29 2c2b 2e2d 302f 3231 4033 4040 4040     )*+,-./0123@@@@@
 800bda0:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800bdb0:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800bdc0:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800bdd0:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800bde0:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800bdf0:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800be00:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@
 800be10:	4040 4040 4040 4040 4040 4040 4040 4040     @@@@@@@@@@@@@@@@

0800be20 <basis_64>:
 800be20:	4241 4443 4645 4847 4a49 4c4b 4e4d 504f     ABCDEFGHIJKLMNOP
 800be30:	5251 5453 5655 5857 5a59 6261 6463 6665     QRSTUVWXYZabcdef
 800be40:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
 800be50:	7877 7a79 3130 3332 3534 3736 3938 5f2d     wxyz0123456789-_
 800be60:	0000 0000 6944 626c 7265 0074               ....Dilbert.

0800be6c <Driver_USBD0>:
 800be6c:	2929 0800 2991 0800 2bcd 0800 2c09 0800     ))...)...+...,..
 800be7c:	2c3d 0800 2c71 0800 2e79 0800 3099 0800     =,..q,..y....0..
 800be8c:	3381 0800 2ec5 0800 2cd5 0800 2d5d 0800     .3.......,..]-..
 800be9c:	2dd5 0800 3011 0800 34f1 0800 351d 0800     .-...0...4...5..
 800beac:	20a1 0000 0000 0002                         . ......

0800beb4 <nonce.6423>:
 800beb4:	694c 7362 646f 7569 446d 4752               LibsodiumDRG

0800bec0 <__func__.6434>:
 800bec0:	6172 646e 6d6f 7962 6574 0073 7562 5f66     randombytes.buf_
 800bed0:	656c 206e 3d3c 5320 5a49 5f45 414d 0058     len <= SIZE_MAX.
 800bee0:	6172 646e 6d6f 7962 6574 2f73 6172 646e     randombytes/rand
 800bef0:	6d6f 7962 6574 2e73 0063                    ombytes.c.

0800befa <__func__.7060>:
 800befa:	6173 6566 725f 6165 0064 7973 7273 6e61     safe_read.sysran
 800bf0a:	6f64 006d 6973 657a 3e20 2820 6973 657a     dom.size > (size
 800bf1a:	745f 2029 5530 7200 6e61 6f64 626d 7479     _t) 0U.randombyt
 800bf2a:	7365 732f 7379 6172 646e 6d6f 722f 6e61     es/sysrandom/ran
 800bf3a:	6f64 626d 7479 7365 735f 7379 6172 646e     dombytes_sysrand
 800bf4a:	6d6f 632e 7300 7a69 2065 3d3c 5320 4953     om.c.size <= SSI
 800bf5a:	455a 4d5f 5841 2f00 6564 2f76 7275 6e61     ZE_MAX./dev/uran
 800bf6a:	6f64 006d 642f 7665 722f 6e61 6f64 006d     dom./dev/random.
 800bf7a:	0000 202c 7566 636e 6974 6e6f 203a 0000     .., function: ..
 800bf8a:	0000 7361 6573 7472 6f69 206e 2522 2273     ..assertion "%s"
 800bf9a:	6620 6961 656c 3a64 6620 6c69 2065 2522      failed: file "%
 800bfaa:	2273 202c 696c 656e 2520 2564 2573 0a73     s", line %d%s%s.
	...

0800bfbc <_global_impure_ptr>:
 800bfbc:	00d8 2000 3130 3332 3534 3736 3938 4241     ... 0123456789AB
 800bfcc:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
 800bfdc:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
 800bfec:	296c 0000                                   l)..

0800bff0 <blanks.7270>:
 800bff0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0800c000 <zeroes.7271>:
 800c000:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 800c010:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0800c020 <_ctype_>:
 800c020:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 800c030:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800c040:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 800c050:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 800c060:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 800c070:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 800c080:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 800c090:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 800c0a0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
